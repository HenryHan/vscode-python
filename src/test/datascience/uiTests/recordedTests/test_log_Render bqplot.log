[
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "pip install bqplot"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "360649533c6043d9998207a405d1d353"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "## Using `bqplot`'s interactive elements"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Change color of plots"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_Ready"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "started"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "pip install bqplot"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "360649533c6043d9998207a405d1d353"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "## Using `bqplot`'s interactive elements"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Change color of plots"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_response",
            "payload": "<BLAH>"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_response",
            "payload": "{\r\n    \"information_for_contributors\": [\r\n        \"This file has been converted from https://github.com/MagicStack/MagicPython/blob/master/grammars/MagicPython.tmLanguage\",\r\n        \"If you want to provide a fix or improvement, please create a pull request against the original repository.\",\r\n        \"Once accepted there, we are happy to receive an update request.\"\r\n    ],\r\n    \"version\": \"https://github.com/MagicStack/MagicPython/commit/8ff35b3e5fcde471fae62a57ea1ae1c7cd34c9fc\",\r\n    \"name\": \"MagicPython\",\r\n    \"scopeName\": \"source.python\",\r\n    \"patterns\": [\r\n        {\r\n            \"include\": \"#statement\"\r\n        },\r\n        {\r\n            \"include\": \"#expression\"\r\n        }\r\n    ],\r\n    \"repository\": {\r\n        \"impossible\": {\r\n            \"comment\": \"This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.\",\r\n            \"match\": \"$.^\"\r\n        },\r\n        \"statement\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#import\"\r\n                },\r\n                {\r\n                    \"include\": \"#class-declaration\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-declaration\"\r\n                },\r\n                {\r\n                    \"include\": \"#statement-keyword\"\r\n                },\r\n                {\r\n                    \"include\": \"#assignment-operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#decorator\"\r\n                },\r\n                {\r\n                    \"include\": \"#docstring-statement\"\r\n                },\r\n                {\r\n                    \"include\": \"#semicolon\"\r\n                }\r\n            ]\r\n        },\r\n        \"semicolon\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"invalid.deprecated.semicolon.python\",\r\n                    \"match\": \"\\\\;$\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"comment.line.number-sign.python\",\r\n                    \"contentName\": \"meta.typehint.comment.python\",\r\n                    \"begin\": \"(?x)\\n  (?:\\n    \\\\# \\\\s* (type:)\\n    \\\\s*+ (?# we want `\\\\s*+` which is possessive quantifier since\\n             we do not actually want to backtrack when matching\\n             whitespace here)\\n    (?! $ | \\\\#)\\n  )\\n\",\r\n                    \"end\": \"(?:$|(?=\\\\#))\",\r\n                    \"beginCaptures\": {\r\n                        \"0\": {\r\n                            \"name\": \"meta.typehint.comment.python\"\r\n                        },\r\n                        \"1\": {\r\n                            \"name\": \"comment.typehint.directive.notation.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"comment.typehint.ignore.notation.python\",\r\n                            \"match\": \"(?x)\\n  \\\\G ignore\\n  (?= \\\\s* (?: $ | \\\\#))\\n\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.type.notation.python\",\r\n                            \"match\": \"(?x)\\n  (?<!\\\\.)\\\\b(\\n    bool | bytes | float | int | object | str\\n    | List | Dict | Iterable | Sequence | Set\\n    | FrozenSet | Callable | Union | Tuple\\n    | Any | None\\n  )\\\\b\\n\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.punctuation.notation.python\",\r\n                            \"match\": \"([\\\\[\\\\]\\\\(\\\\),\\\\.\\\\=\\\\*]|(->))\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.variable.notation.python\",\r\n                            \"match\": \"([[:alpha:]_]\\\\w*)\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"include\": \"#comments-base\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-statement\": {\r\n            \"begin\": \"^(?=\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\r\n            \"comment\": \"the string either terminates correctly or by the beginning of a new line (this is for single line docstrings that aren't terminated) AND it's not followed by another docstring\",\r\n            \"end\": \"((?<=\\\\1)|^)(?!\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#docstring\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"string.quoted.docstring.multi.python\",\r\n                    \"begin\": \"(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\r\n                    \"end\": \"(\\\\1)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#docstring-prompt\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-guts-unicode\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.raw.multi.python\",\r\n                    \"begin\": \"([rR])(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\r\n                    \"end\": \"(\\\\2)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.string.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#string-consume-escape\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-prompt\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.single.python\",\r\n                    \"begin\": \"(\\\\'|\\\\\\\")\",\r\n                    \"end\": \"(\\\\1)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-guts-unicode\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.raw.single.python\",\r\n                    \"begin\": \"([rR])(\\\\'|\\\\\\\")\",\r\n                    \"end\": \"(\\\\2)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.string.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#string-consume-escape\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-guts-unicode\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-prompt\": {\r\n            \"match\": \"(?x)\\n  (?:\\n    (?:^|\\\\G) \\\\s* (?# '\\\\G' is necessary for ST)\\n    ((?:>>>|\\\\.\\\\.\\\\.) \\\\s) (?=\\\\s*\\\\S)\\n  )\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                }\r\n            }\r\n        },\r\n        \"statement-keyword\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.function.python\",\r\n                    \"match\": \"\\\\b((async\\\\s+)?\\\\s*def)\\\\b\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.flow.python\",\r\n                    \"comment\": \"if `as` is eventually followed by `:` or line continuation\\nit's probably control flow like:\\n    with foo as bar, \\\\\\n         Foo as Bar:\\n      try:\\n        do_stuff()\\n      except Exception as e:\\n        pass\\n\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)as\\\\b(?=.*[:\\\\\\\\])\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.import.python\",\r\n                    \"comment\": \"other legal use of `as` is in an import\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.flow.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    async | continue | del | assert | break | finally | for\\n    | from | elif | else | if | except | pass | raise\\n    | return | try | while | with\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.modifier.declaration.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    global | nonlocal\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.class.python\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)(class)\\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression-bare\": {\r\n            \"comment\": \"valid Python expressions w/o comments and line continuation\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#backticks\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-anno\"\r\n                },\r\n                {\r\n                    \"include\": \"#literal\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp\"\r\n                },\r\n                {\r\n                    \"include\": \"#string\"\r\n                },\r\n                {\r\n                    \"include\": \"#lambda\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#curly-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#item-access\"\r\n                },\r\n                {\r\n                    \"include\": \"#list\"\r\n                },\r\n                {\r\n                    \"include\": \"#round-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-call\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-types\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-exceptions\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#ellipsis\"\r\n                },\r\n                {\r\n                    \"include\": \"#punctuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression-base\": {\r\n            \"comment\": \"valid Python expressions with comments and line continuation\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression-bare\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression\": {\r\n            \"comment\": \"All valid Python expressions\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access\"\r\n                },\r\n                {\r\n                    \"comment\": \"Tokenize identifiers to help linters\",\r\n                    \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"member-access\": {\r\n            \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\r\n            \"end\": \"(?x)\\n  # stop when you've just read non-whitespace followed by non-word\\n  # i.e. when finished reading an identifier or function call\\n  (?<=\\\\S)(?=\\\\W) |\\n  # stop when seeing the start of something that's not a word,\\n  # i.e. when seeing a non-identifier\\n  (^|(?<=\\\\s))(?=[^\\\\\\\\\\\\w\\\\s]) |\\n  $\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.period.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#function-call\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-base\"\r\n                }\r\n            ]\r\n        },\r\n        \"member-access-base\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#item-access\"\r\n                }\r\n            ]\r\n        },\r\n        \"special-names\": {\r\n            \"name\": \"constant.other.caps.python\",\r\n            \"match\": \"(?x)\\n  \\\\b\\n    # we want to see \\\"enough\\\", meaning 2 or more upper-case\\n    # letters in the beginning of the constant\\n    #\\n    # for more details refer to:\\n    #   https://github.com/MagicStack/MagicPython/issues/42\\n    (\\n      _* [[:upper:]] [_\\\\d]* [[:upper:]]\\n    )\\n    [[:upper:]\\\\d]* (_\\\\w*)?\\n  \\\\b\\n\"\r\n        },\r\n        \"curly-braces\": {\r\n            \"begin\": \"\\\\{\",\r\n            \"end\": \"\\\\}\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.dict.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.dict.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.dict.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"list\": {\r\n            \"begin\": \"\\\\[\",\r\n            \"end\": \"\\\\]\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.list.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.list.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"round-braces\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"\\\\)\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.parenthesis.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.parenthesis.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"line-continuation\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(\\\\\\\\)\\\\s*(\\\\S.*$\\\\n?)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.separator.continuation.line.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.line.continuation.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"begin\": \"(\\\\\\\\)\\\\s*$\\\\n?\",\r\n                    \"end\": \"(?x)\\n  (?=^\\\\s*$)\\n  |\\n  (?! (\\\\s* [rR]? (\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\\n      |\\n      (\\\\G $)  (?# '\\\\G' is necessary for ST)\\n  )\\n\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.separator.continuation.line.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#string\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"assignment-operator\": {\r\n            \"name\": \"keyword.operator.assignment.python\",\r\n            \"match\": \"(?x)\\n     <<= | >>= | //= | \\\\*\\\\*=\\n    | \\\\+= | -= | /= | @=\\n    | \\\\*= | %= | ~= | \\\\^= | &= | \\\\|=\\n    | =(?!=)\\n\"\r\n        },\r\n        \"operator\": {\r\n            \"match\": \"(?x)\\n    \\\\b(?<!\\\\.)\\n      (?:\\n        (and | or | not | in | is)                         (?# 1)\\n        |\\n        (for | if | else | await | (?:yield(?:\\\\s+from)?))  (?# 2)\\n      )\\n    (?!\\\\s*:)\\\\b\\n\\n    | (<< | >> | & | \\\\| | \\\\^ | ~)                          (?# 3)\\n\\n    | (\\\\*\\\\* | \\\\* | \\\\+ | - | % | // | / | @)                (?# 4)\\n\\n    | (!= | == | >= | <= | < | >)                          (?# 5)\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.logical.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"keyword.operator.bitwise.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"keyword.operator.arithmetic.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"keyword.operator.comparison.python\"\r\n                }\r\n            }\r\n        },\r\n        \"punctuation\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.colon.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"name\": \"punctuation.separator.element.python\",\r\n                    \"match\": \",\"\r\n                }\r\n            ]\r\n        },\r\n        \"literal\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.language.python\",\r\n                    \"match\": \"\\\\b(True|False|None|NotImplemented|Ellipsis)\\\\b\"\r\n                },\r\n                {\r\n                    \"include\": \"#number\"\r\n                }\r\n            ]\r\n        },\r\n        \"number\": {\r\n            \"name\": \"constant.numeric.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#number-float\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-dec\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-hex\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-oct\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-bin\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-long\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.name.python\",\r\n                    \"match\": \"\\\\b[0-9]+\\\\w+\"\r\n                }\r\n            ]\r\n        },\r\n        \"number-float\": {\r\n            \"name\": \"constant.numeric.float.python\",\r\n            \"match\": \"(?x)\\n  (?<! \\\\w)(?:\\n    (?:\\n      \\\\.[0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\. [0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\.\\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\\n    |\\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\\n  )([jJ])?\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.imaginary.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-dec\": {\r\n            \"name\": \"constant.numeric.dec.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])(?:\\n      [1-9](?: _?[0-9] )*\\n      |\\n      0+\\n      |\\n      [0-9](?: _?[0-9] )* ([jJ])\\n      |\\n      0 ([0-9]+)(?![eE\\\\.])\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.imaginary.number.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.dec.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"invalid.illegal.dec.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-hex\": {\r\n            \"name\": \"constant.numeric.hex.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[xX]) (_?[0-9a-fA-F])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-oct\": {\r\n            \"name\": \"constant.numeric.oct.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[oO]) (_?[0-7])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-bin\": {\r\n            \"name\": \"constant.numeric.bin.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[bB]) (_?[01])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-long\": {\r\n            \"name\": \"constant.numeric.bin.python\",\r\n            \"comment\": \"this is to support python2 syntax for long ints\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    ([1-9][0-9]* | 0) ([lL])\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"2\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-single-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-double-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-single-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-double-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-single-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-double-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-single-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-double-one-line\"\r\n                }\r\n            ]\r\n        },\r\n        \"string\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-bin-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-bin-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-bin-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-bin-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-fnorm-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-fnorm-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-normf-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-normf-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-quoted-single-line\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-unicode-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-brace-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-consume-escape\": {\r\n            \"match\": \"\\\\\\\\['\\\"\\\\n\\\\\\\\]\"\r\n        },\r\n        \"string-raw-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-brace-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-entity\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-illegal-single-brace\": {\r\n            \"comment\": \"it is illegal to have a multiline brace inside a single-line string\",\r\n            \"begin\": \"(\\\\{)(?=[^\\\\n}]*$\\\\n?)\",\r\n            \"end\": \"(\\\\})|(?=\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-single\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-illegal-multi-brace\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#impossible\"\r\n                }\r\n            ]\r\n        },\r\n        \"f-expression\": {\r\n            \"comment\": \"All valid Python expressions, except comments and line cont\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression-bare\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access\"\r\n                },\r\n                {\r\n                    \"comment\": \"Tokenize identifiers to help linters\",\r\n                    \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"escape-sequence-unicode\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.character.escape.python\",\r\n                    \"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n        | N\\\\{[\\\\w\\\\s]+?\\\\}\\n     )\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"escape-sequence\": {\r\n            \"name\": \"constant.character.escape.python\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | [0-7]{1,3}\\n        | [\\\\\\\\\\\"'abfnrtv]\\n     )\\n\"\r\n        },\r\n        \"string-line-continuation\": {\r\n            \"name\": \"constant.language.python\",\r\n            \"match\": \"\\\\\\\\$\"\r\n        },\r\n        \"string-formatting\": {\r\n            \"name\": \"meta.format.percent.python\",\r\n            \"match\": \"(?x)\\n  (\\n    % (\\\\([\\\\w\\\\s]*\\\\))?\\n      [-+#0 ]*\\n      (\\\\d+|\\\\*)? (\\\\.(\\\\d+|\\\\*))?\\n      ([hlL])?\\n      [diouxXeEfFgGcrsab%]\\n  )\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            }\r\n        },\r\n        \"string-brace-formatting\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.format.brace.python\",\r\n                    \"match\": \"(?x)\\n  (\\n    {{ | }}\\n    | (?:\\n      {\\n        \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n        (![rsa])?\\n        ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n          \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )?\\n      })\\n  )\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"4\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"meta.format.brace.python\",\r\n                    \"match\": \"(?x)\\n  (\\n    {\\n      \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n      (![rsa])?\\n      (:)\\n        [^'\\\"{}\\\\n]* (?:\\n          \\\\{ [^'\\\"}\\\\n]*? \\\\} [^'\\\"{}\\\\n]*\\n        )*\\n    }\\n  )\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"4\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-formatting-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting-singe-brace\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting-singe-brace\": {\r\n            \"name\": \"invalid.illegal.brace.python\",\r\n            \"match\": \"(}(?!}))\"\r\n        },\r\n        \"import\": {\r\n            \"comment\": \"Import statements used to correctly mark `from`, `import`, and `as`\\n\",\r\n            \"patterns\": [\r\n                {\r\n                    \"begin\": \"\\\\b(?<!\\\\.)(from)\\\\b(?=.+import)\",\r\n                    \"end\": \"$|(?=import)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.import.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"punctuation.separator.period.python\",\r\n                            \"match\": \"\\\\.+\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"begin\": \"\\\\b(?<!\\\\.)(import)\\\\b\",\r\n                    \"end\": \"$\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.import.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"keyword.control.import.python\",\r\n                            \"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"class-declaration\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.class.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\s*(class)\\\\s+\\n    (?=\\n      [[:alpha:]_]\\\\w* \\\\s* (:|\\\\()\\n    )\\n\",\r\n                    \"end\": \"(:)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.class.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.section.class.begin.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#class-name\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#class-inheritance\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"class-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.type.class.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"class-inheritance\": {\r\n            \"name\": \"meta.class.inheritance.python\",\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.inheritance.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.inheritance.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"keyword.operator.unpacking.arguments.python\",\r\n                    \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                },\r\n                {\r\n                    \"name\": \"punctuation.separator.inheritance.python\",\r\n                    \"match\": \",\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                },\r\n                {\r\n                    \"name\": \"support.type.metaclass.python\",\r\n                    \"match\": \"\\\\bmetaclass\\\\b\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#class-kwarg\"\r\n                },\r\n                {\r\n                    \"include\": \"#call-wrapper-inheritance\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-class\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"class-kwarg\": {\r\n            \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\s*(=)(?!=)\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.other.inherited-class.python variable.parameter.class.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.operator.assignment.python\"\r\n                }\r\n            }\r\n        },\r\n        \"inheritance-identifier\": {\r\n            \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.other.inherited-class.python\"\r\n                }\r\n            }\r\n        },\r\n        \"member-access-class\": {\r\n            \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\r\n            \"end\": \"(?<=\\\\S)(?=\\\\W)|$\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.period.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#call-wrapper-inheritance\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"lambda\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"((?<=\\\\.)lambda|lambda(?=\\\\s*[\\\\.=]))\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.flow.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"match\": \"\\\\b(lambda)\\\\s*?(?=[,\\\\n]|$)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.function.lambda.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"meta.lambda-function.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\b (lambda) \\\\b\\n\",\r\n                    \"end\": \"(:)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.function.lambda.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.section.function.lambda.begin.python\"\r\n                        }\r\n                    },\r\n                    \"contentName\": \"meta.function.lambda.parameters.python\",\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"keyword.operator.unpacking.parameter.python\",\r\n                            \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#lambda-nested-incomplete\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-names\"\r\n                        },\r\n                        {\r\n                            \"match\": \"([[:alpha:]_]\\\\w*)\\\\s*(?:(,)|(?=:|$))\",\r\n                            \"captures\": {\r\n                                \"1\": {\r\n                                    \"name\": \"variable.parameter.function.language.python\"\r\n                                },\r\n                                \"2\": {\r\n                                    \"name\": \"punctuation.separator.parameters.python\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"include\": \"#comments\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#backticks\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-anno\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#lambda-parameter-with-default\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#line-continuation\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-operator\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"lambda-incomplete\": {\r\n            \"name\": \"storage.type.function.lambda.python\",\r\n            \"match\": \"\\\\blambda(?=\\\\s*[,)])\"\r\n        },\r\n        \"lambda-nested-incomplete\": {\r\n            \"name\": \"storage.type.function.lambda.python\",\r\n            \"match\": \"\\\\blambda(?=\\\\s*[:,)])\"\r\n        },\r\n        \"lambda-parameter-with-default\": {\r\n            \"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (=)\\n\",\r\n            \"end\": \"(,)|(?=:|$)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.operator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-declaration\": {\r\n            \"name\": \"meta.function.python\",\r\n            \"begin\": \"(?x)\\n  \\\\s*\\n  (?:\\\\b(async) \\\\s+)? \\\\b(def)\\\\s+\\n    (?=\\n      [[:alpha:]_][[:word:]]* \\\\s* \\\\(\\n    )\\n\",\r\n            \"end\": \"(:|(?=[#'\\\"\\\\n]))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.function.async.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.function.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.section.function.begin.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#function-def-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#parameters\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#return-annotation\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-def-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.function.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"parameters\": {\r\n            \"name\": \"meta.function.parameters.python\",\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.parameters.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.parameters.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"keyword.operator.unpacking.parameter.python\",\r\n                    \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                },\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#parameter-special\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*)\\n    \\\\s* (?: (,) | (?=[)#\\\\n=]))\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"variable.parameter.function.language.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.separator.parameters.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#loose-default\"\r\n                },\r\n                {\r\n                    \"include\": \"#annotated-parameter\"\r\n                }\r\n            ]\r\n        },\r\n        \"parameter-special\": {\r\n            \"match\": \"(?x)\\n  \\\\b ((self)|(cls)) \\\\b \\\\s*(?:(,)|(?=\\\\)))\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"variable.parameter.function.language.special.self.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"variable.parameter.function.language.special.cls.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            }\r\n        },\r\n        \"loose-default\": {\r\n            \"begin\": \"(=)\",\r\n            \"end\": \"(,)|(?=\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"annotated-parameter\": {\r\n            \"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\",\r\n            \"end\": \"(,)|(?=\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.separator.annotation.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                }\r\n            ]\r\n        },\r\n        \"return-annotation\": {\r\n            \"begin\": \"(->)\",\r\n            \"end\": \"(?=:)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.annotation.result.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"item-access\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.item-access.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\b(?=\\n    [[:alpha:]_]\\\\w* \\\\s* \\\\[\\n  )\\n\",\r\n                    \"end\": \"(\\\\])\",\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.arguments.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#item-name\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#item-index\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"item-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"item-index\": {\r\n            \"begin\": \"(\\\\[)\",\r\n            \"end\": \"(?=\\\\])\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                }\r\n            },\r\n            \"contentName\": \"meta.item-access.arguments.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.slice.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"decorator\": {\r\n            \"name\": \"meta.function.decorator.python\",\r\n            \"begin\": \"(?x)\\n  ^\\\\s*\\n  ((@)) \\\\s* (?=[[:alpha:]_]\\\\w*)\\n\",\r\n            \"end\": \"(?x)\\n  ( \\\\) )\\n    # trailing whitespace and comments are legal\\n    (?: (.*?) (?=\\\\s*(?:\\\\#|$)) )\\n  | (?=\\\\n|\\\\#)\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.name.function.decorator.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.decorator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.decorator.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#decorator-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"decorator-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.function.decorator.python\",\r\n                    \"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*) | (\\\\.)\\n\",\r\n                    \"captures\": {\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.separator.period.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.decorator.python\",\r\n                    \"match\": \"(?x)\\n  \\\\s* ([^([:alpha:]\\\\s_\\\\.#\\\\\\\\] .*?) (?=\\\\#|$)\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"invalid.illegal.decorator.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"call-wrapper-inheritance\": {\r\n            \"comment\": \"same as a function call, but in inheritance context\",\r\n            \"name\": \"meta.function-call.python\",\r\n            \"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\r\n            \"end\": \"(\\\\))\",\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#inheritance-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"inheritance-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-call\": {\r\n            \"name\": \"meta.function-call.python\",\r\n            \"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\r\n            \"end\": \"(\\\\))\",\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"comment\": \"Some color schemas support meta.function-call.generic scope\",\r\n                    \"name\": \"meta.function-call.generic.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-arguments\": {\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(?=\\\\))(?!\\\\)\\\\s*\\\\()\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                }\r\n            },\r\n            \"contentName\": \"meta.function-call.arguments.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.arguments.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (?:(?<=[,(])|^) \\\\s* (\\\\*{1,2})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.operator.unpacking.arguments.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\b([[:alpha:]_]\\\\w*)\\\\s*(=)(?!=)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"variable.parameter.function-call.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.assignment.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\s*(\\\\))\\\\s*(\\\\()\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.arguments.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-callables\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-exceptions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-types\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-possible-callables\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-exceptions\": {\r\n            \"name\": \"support.type.exception.python\",\r\n            \"match\": \"(?x) (?<!\\\\.) \\\\b(\\n  (\\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\\n    | BrokenPipe | ChildProcess\\n    | (Connection (Aborted | Refused | Reset)?)\\n    | EOF | Environment | FileExists | FileNotFound\\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\\n    | Timeout\\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\\n    | Reference | Runtime | Recursion | Syntax | System\\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\\n    | Value | Windows | ZeroDivision | ModuleNotFound\\n  ) Error\\n|\\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\\n    | Unicode | Bytes | Resource\\n  )? Warning\\n|\\n  SystemExit | Stop(Async)?Iteration\\n  | KeyboardInterrupt\\n  | GeneratorExit | (Base)?Exception\\n)\\\\b\\n\"\r\n        },\r\n        \"builtin-functions\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"support.function.builtin.python\",\r\n                    \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    __import__ | abs | all | any | ascii | bin | breakpoint | callable\\n    | chr | compile | copyright | credits | delattr | dir | divmod\\n    | enumerate | eval | exec | exit | filter | format | getattr\\n    | globals | hasattr | hash | help | hex | id | input\\n    | isinstance | issubclass | iter | len | license | locals | map\\n    | max | memoryview | min | next | oct | open | ord | pow | print\\n    | quit | range | reload | repr | reversed | round\\n    | setattr | sorted | sum | vars | zip\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"variable.legacy.builtin.python\",\r\n                    \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    file | reduce | intern | raw_input | unicode | cmp | basestring\\n    | execfile | long | xrange\\n  )\\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-types\": {\r\n            \"name\": \"support.type.python\",\r\n            \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    bool | bytearray | bytes | classmethod | complex | dict\\n    | float | frozenset | int | list | object | property\\n    | set | slice | staticmethod | str | tuple | type\\n\\n    (?# Although 'super' is not a type, it's related to types,\\n        and is special enough to be highlighted differently from\\n        other built-ins)\\n    | super\\n  )\\\\b\\n\"\r\n        },\r\n        \"magic-function-names\": {\r\n            \"comment\": \"these methods have magic interpretation by python and are generally called\\nindirectly through syntactic constructs\\n\",\r\n            \"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      abs | add | aenter | aexit | aiter | and | anext | await\\n      | bool | call | ceil | cmp | coerce | complex | contains\\n      | copy | deepcopy | del | delattr | delete | delitem\\n      | delslice | dir | div | divmod | enter | eq | exit | float\\n      | floor | floordiv | format | ge | get | getattr\\n      | getattribute | getinitargs | getitem | getnewargs\\n      | getslice | getstate | gt | hash | hex | iadd | iand | idiv\\n      | ifloordiv | ilshift | imod | imul | index | init\\n      | instancecheck | int | invert | ior | ipow | irshift | isub\\n      | iter | itruediv | ixor | le | len | long | lshift | lt\\n      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or\\n      | pos | pow | radd | rand | rdiv | rdivmod | reduce\\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\\n      | rmul | ror | round | rpow | rrshift | rshift | rsub\\n      | rtruediv | rxor | set | setattr | setitem | setslice\\n      | setstate | sizeof | str | sub | subclasscheck | truediv\\n      | trunc | unicode | xor | matmul | rmatmul | imatmul\\n      | init_subclass | set_name | fspath | bytes | prepare\\n    )__\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.function.magic.python\"\r\n                }\r\n            }\r\n        },\r\n        \"magic-variable-names\": {\r\n            \"comment\": \"magic variables which a class/module may have.\",\r\n            \"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      all | bases | builtins | class | class_getitem | code | debug\\n      | defaults | dict | doc | file | func | kwdefaults | members\\n      | metaclass | methods | module | mro | mro_entries | name\\n      | qualname | post_init | self | signature | slots | subclasses\\n      | version | weakref | wrapped | annotations | classcell\\n      | spec | path | package | future | traceback\\n    )__\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.variable.magic.python\"\r\n                }\r\n            }\r\n        },\r\n        \"magic-names\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#magic-function-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-variable-names\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-names\": {\r\n            \"match\": \"(?x)\\n  \\\\b(?:\\n    (\\n      and | assert | async | await | break | class | continue | def\\n      | del | elif | else | except | finally | for | from | global\\n      | if | in | is | (?<=\\\\.)lambda | lambda(?=\\\\s*[\\\\.=])\\n      | nonlocal | not | or | pass | raise | return | try | while | with\\n      | yield\\n    ) | (\\n      as | import\\n    )\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.control.import.python\"\r\n                }\r\n            }\r\n        },\r\n        \"special-variables\": {\r\n            \"match\": \"(?x)\\n  \\\\b (?<!\\\\.) (?:\\n    (self) | (cls)\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.language.special.self.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"variable.language.special.cls.python\"\r\n                }\r\n            }\r\n        },\r\n        \"ellipsis\": {\r\n            \"name\": \"constant.other.ellipsis.python\",\r\n            \"match\": \"\\\\.\\\\.\\\\.\"\r\n        },\r\n        \"backticks\": {\r\n            \"name\": \"invalid.deprecated.backtick.python\",\r\n            \"begin\": \"\\\\`\",\r\n            \"end\": \"(?:\\\\`|(?<!\\\\\\\\)(\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-operator\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"match\": \"&&|\\\\|\\\\||--|\\\\+\\\\+\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"match\": \"[?$]\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"comment\": \"We don't want `!` to flash when we're typing `!=`\",\r\n                    \"match\": \"!\\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-object-name\": {\r\n            \"comment\": \"It's illegal to name class or function \\\"True\\\"\",\r\n            \"name\": \"keyword.illegal.name.python\",\r\n            \"match\": \"\\\\b(True|False|None)\\\\b\"\r\n        },\r\n        \"illegal-anno\": {\r\n            \"name\": \"invalid.illegal.annotation.python\",\r\n            \"match\": \"->\"\r\n        },\r\n        \"regexp-base-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-quantifier\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-base-common\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-base-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-quantifier\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting-braces\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\{.*?\\\\}\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-base-common\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting-braces\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"comment\": \"empty braces are illegal\",\r\n                    \"match\": \"({)(\\\\s*?)(})\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.brace.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"constant.character.escape.python\",\r\n                    \"match\": \"({{|}})\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-base-common\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"support.other.match.any.regexp\",\r\n                    \"match\": \"\\\\.\"\r\n                },\r\n                {\r\n                    \"name\": \"support.other.match.begin.regexp\",\r\n                    \"match\": \"\\\\^\"\r\n                },\r\n                {\r\n                    \"name\": \"support.other.match.end.regexp\",\r\n                    \"match\": \"\\\\$\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.quantifier.regexp\",\r\n                    \"match\": \"[+*?]\\\\??\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.disjunction.regexp\",\r\n                    \"match\": \"\\\\|\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-sequence\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-quantifier\": {\r\n            \"name\": \"keyword.operator.quantifier.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\n\"\r\n        },\r\n        \"fregexp-quantifier\": {\r\n            \"name\": \"keyword.operator.quantifier.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\{\\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\\\}\\n\"\r\n        },\r\n        \"regexp-backreference-number\": {\r\n            \"name\": \"meta.backreference.regexp\",\r\n            \"match\": \"(\\\\\\\\[1-9]\\\\d?)\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.name.tag.backreference.regexp\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp-backreference\": {\r\n            \"name\": \"meta.backreference.named.regexp\",\r\n            \"match\": \"(?x)\\n  (\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.backreference.regexp\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp-flags\": {\r\n            \"name\": \"storage.modifier.flag.regexp\",\r\n            \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\"\r\n        },\r\n        \"regexp-escape-special\": {\r\n            \"name\": \"support.other.escape.special.regexp\",\r\n            \"match\": \"\\\\\\\\([AbBdDsSwWZ])\"\r\n        },\r\n        \"regexp-escape-character\": {\r\n            \"name\": \"constant.character.escape.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | 0[0-7]{1,2}\\n        | [0-7]{3}\\n     )\\n\"\r\n        },\r\n        \"regexp-escape-unicode\": {\r\n            \"name\": \"constant.character.unicode.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n     )\\n\"\r\n        },\r\n        \"regexp-escape-catchall\": {\r\n            \"name\": \"constant.character.escape.regexp\",\r\n            \"match\": \"\\\\\\\\(.|\\\\n)\"\r\n        },\r\n        \"regexp-escape-sequence\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-escape-special\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-character\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference-number\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-catchall\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-charecter-set-escapes\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.character.escape.regexp\",\r\n                    \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-special\"\r\n                },\r\n                {\r\n                    \"name\": \"constant.character.escape.regexp\",\r\n                    \"match\": \"\\\\\\\\([0-7]{1,3})\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-character\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-catchall\"\r\n                }\r\n            ]\r\n        },\r\n        \"codetags\": {\r\n            \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.codetag.notation.python\"\r\n                }\r\n            }\r\n        },\r\n        \"comments-base\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($)\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments-string-single-three\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($|(?='''))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments-string-double-three\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($|(?=\\\"\\\"\\\"))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\\'\\\\'\\\\'))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\"\\\"\\\"))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-single-one-line\": {\r\n            \"name\": \"string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\')\",\r\n            \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-single-three-line\": {\r\n            \"name\": \"string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\'\\\\'\\\\')\",\r\n            \"end\": \"(\\\\'\\\\'\\\\')\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-double-one-line\": {\r\n            \"name\": \"string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\")\",\r\n            \"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-double-three-line\": {\r\n            \"name\": \"string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\"\\\"\\\")\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-single-one-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\')\",\r\n            \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-single-three-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\'\\\\'\\\\')\",\r\n            \"end\": \"(\\\\'\\\\'\\\\')\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-double-one-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\")\",\r\n            \"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-double-three-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\"\\\"\\\")\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-quoted-single-line\": {\r\n            \"name\": \"string.quoted.raw.single.python\",\r\n            \"begin\": \"\\\\b(([uU]R)|(R))((['\\\"]))\",\r\n            \"end\": \"(\\\\4)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-single-bad-brace1-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-single-bad-brace2-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-bin-quoted-single-line\": {\r\n            \"name\": \"string.quoted.binary.single.python\",\r\n            \"begin\": \"(\\\\b[bB])((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-quoted-single-line\": {\r\n            \"name\": \"string.quoted.raw.binary.single.python\",\r\n            \"begin\": \"(\\\\b(?:R[bB]|[bB]R))((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-raw-bin-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-quoted-single-line\": {\r\n            \"name\": \"string.quoted.single.python\",\r\n            \"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-single-bad-brace1-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-single-bad-brace2-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-unicode-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace1-formatting-unicode\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace1-formatting-raw\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace2-formatting-unicode\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace2-formatting-raw\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.raw.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]R)|(R))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\4)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace1-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace2-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-bin-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.binary.multi.python\",\r\n            \"begin\": \"(\\\\b[bB])('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.raw.binary.multi.python\",\r\n            \"begin\": \"(\\\\b(?:R[bB]|[bB]R))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-raw-bin-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.multi.python\",\r\n            \"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace1-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace2-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-unicode-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace1-formatting-unicode\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace1-formatting-raw\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace2-formatting-unicode\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace2-formatting-raw\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-fnorm-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[fF])([bBuU])?((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-normf-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[bBuU])([fF])((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.raw.single.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-raw-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-single-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.single.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-raw-single-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.raw.single.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-single-brace\": {\r\n            \"comment\": \"value interpolation using { ... }\",\r\n            \"begin\": \"(\\\\{)\",\r\n            \"end\": \"(?x)\\n  (\\\\})|(?=\\\\n)\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-single\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-single\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(![rsa])(?=})\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-terminator-single-tail\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-single-tail\": {\r\n            \"begin\": \"(![rsa])?(:)(?=.*?{)\",\r\n            \"end\": \"(?=})|(?=\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([bcdeEfFgGnosxX%])(?=})\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\.\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\#)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([-+ ])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([<>=^])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\w)\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-fnorm-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[fF])([bBuU])?('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-normf-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[bBuU])([fF])('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.raw.multi.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-raw-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-multi-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.multi.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-raw-multi-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.raw.multi.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-multi-brace\": {\r\n            \"comment\": \"value interpolation using { ... }\",\r\n            \"begin\": \"(\\\\{)\",\r\n            \"end\": \"(?x)\\n  (\\\\})\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-multi\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-multi\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(![rsa])(?=})\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-terminator-multi-tail\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-multi-tail\": {\r\n            \"begin\": \"(![rsa])?(:)(?=.*?{)\",\r\n            \"end\": \"(?=})\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([bcdeEfFgGnosxX%])(?=})\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\.\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\#)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([-+ ])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([<>=^])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\w)\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.editor_loaded",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "settings_updated"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#0",
                    "NotebookImport#1",
                    "NotebookImport#2",
                    "NotebookImport#3",
                    "NotebookImport#4",
                    "NotebookImport#5",
                    "NotebookImport#6",
                    "NotebookImport#7",
                    "NotebookImport#8",
                    "NotebookImport#9"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_all_cells_complete",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "pip install bqplot"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 126,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 127,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "## Using `bqplot`'s interactive elements"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 128,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 129,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "markdown",
                            "metadata": {},
                            "source": [
                                "# Change color of plots"
                            ],
                            "execution_count": null,
                            "outputs": []
                        }
                    },
                    {
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.loaded_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_onigasm_assembly_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_tmlanguage_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_monaco_ready",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#2"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#1"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": ""
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "notebook_execution_activated",
            "payload": "file:///c%3A/Users/RCHIOD~1.RED/AppData/Local/Temp/tmp-23504lmEYJ3f9sbTi.ipynb"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_kernelOptions",
            "payload": {
                "clientId": "47834645-2907-484e-9016-93e8e85f6222",
                "id": "e07905fc-2dec-476b-803d-55ec149c011f",
                "model": {
                    "name": "python3",
                    "id": "e07905fc-2dec-476b-803d-55ec149c011f"
                },
                "userName": ""
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "4398157e-0a99-4d83-b5c8-7efc5d3440f3",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": false,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "import os\nimport sys\n%cd \"c:\\Users\\RCHIOD~1.RED\\AppData\\Local\\Temp\"\nif os.getcwd() not in sys.path:\n    sys.path.insert(0, os.getcwd())"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:03.622Z",
                        "msg_id": "4398157e-0a99-4d83-b5c8-7efc5d3440f3",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_registerCommTarget",
            "payload": "jupyter.widget"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_registerCommTarget",
            "payload": "jupyter.widget"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4398157e-0a99-4d83-b5c8-7efc5d3440f3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": ""
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_notebook_execution_activated",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "fb47e033-7505-474d-90e9-3cbc9194ee93",
                "data": "{\"header\": {\"msg_id\": \"85e3e5c6-20401aabf4399d8e8181b03c\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:04.224227Z\", \"version\": \"5.3\"}, \"msg_id\": \"85e3e5c6-20401aabf4399d8e8181b03c\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:03.622000Z\", \"msg_id\": \"4398157e-0a99-4d83-b5c8-7efc5d3440f3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "fb47e033-7505-474d-90e9-3cbc9194ee93"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "68fd9449-bac7-4071-897d-3b918b98c191",
                "data": "{\"header\": {\"msg_id\": \"7e5f4da7-afe80bb64842c11a35e992d3\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:04.225227Z\", \"version\": \"5.3\"}, \"msg_id\": \"7e5f4da7-afe80bb64842c11a35e992d3\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:03.622000Z\", \"msg_id\": \"4398157e-0a99-4d83-b5c8-7efc5d3440f3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"import os\\nimport sys\\n%cd \\\"c:\\\\Users\\\\RCHIOD~1.RED\\\\AppData\\\\Local\\\\Temp\\\"\\nif os.getcwd() not in sys.path:\\n    sys.path.insert(0, os.getcwd())\", \"execution_count\": 1}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "68fd9449-bac7-4071-897d-3b918b98c191"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4ac8c1e0-d8a4-4de2-af12-902784f5eb2c",
                "data": "{\"header\": {\"msg_id\": \"22e83b2f-b7933f7a9d2392d5e6ab07be\", \"msg_type\": \"stream\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:04.229227Z\", \"version\": \"5.3\"}, \"msg_id\": \"22e83b2f-b7933f7a9d2392d5e6ab07be\", \"msg_type\": \"stream\", \"parent_header\": {\"date\": \"2020-04-03T17:44:03.622000Z\", \"msg_id\": \"4398157e-0a99-4d83-b5c8-7efc5d3440f3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"name\": \"stdout\", \"text\": \"c:\\\\Users\\\\RCHIOD~1.RED\\\\AppData\\\\Local\\\\Temp\\n\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4ac8c1e0-d8a4-4de2-af12-902784f5eb2c"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ea0e5e89-160c-4c31-90fc-b8b1d4750a62",
                "data": "{\"header\": {\"msg_id\": \"50d8be2c-387a5e8f4fe04be82e5668ed\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:04.233229Z\", \"version\": \"5.3\"}, \"msg_id\": \"50d8be2c-387a5e8f4fe04be82e5668ed\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:03.622000Z\", \"msg_id\": \"4398157e-0a99-4d83-b5c8-7efc5d3440f3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:04.225227Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 0, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ea0e5e89-160c-4c31-90fc-b8b1d4750a62"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "9f4e9cac-5b4e-4286-b2cf-ce867eb6c057",
                "data": "{\"header\": {\"msg_id\": \"8d5b2db5-71aec92a635a57ac507e0d7d\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:04.233229Z\", \"version\": \"5.3\"}, \"msg_id\": \"8d5b2db5-71aec92a635a57ac507e0d7d\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:03.622000Z\", \"msg_id\": \"4398157e-0a99-4d83-b5c8-7efc5d3440f3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9f4e9cac-5b4e-4286-b2cf-ce867eb6c057"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "b25a7a13-a676-4b90-84da-834c0b597306",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "import numpy as np\nfrom bqplot import pyplot as plt\n\n# And creating some random data\nsize = 100\nnp.random.seed(0)\nx_data = np.arange(size)\ny_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:06.744Z",
                        "msg_id": "b25a7a13-a676-4b90-84da-834c0b597306",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b25a7a13-a676-4b90-84da-834c0b597306"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "9695f002-729e-4537-9c25-b9011c1e6e77",
                "data": "{\"header\": {\"msg_id\": \"4dce95b1-060b56addab660947dbc02fd\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:07.287777Z\", \"version\": \"5.3\"}, \"msg_id\": \"4dce95b1-060b56addab660947dbc02fd\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:06.744000Z\", \"msg_id\": \"b25a7a13-a676-4b90-84da-834c0b597306\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9695f002-729e-4537-9c25-b9011c1e6e77"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c960dbf9-16fe-460b-8178-de046a2a4774",
                "data": "{\"header\": {\"msg_id\": \"982a365e-78f4c3509a6cf335cff1c903\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:07.287777Z\", \"version\": \"5.3\"}, \"msg_id\": \"982a365e-78f4c3509a6cf335cff1c903\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:06.744000Z\", \"msg_id\": \"b25a7a13-a676-4b90-84da-834c0b597306\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"import numpy as np\\nfrom bqplot import pyplot as plt\\n\\n# And creating some random data\\nsize = 100\\nnp.random.seed(0)\\nx_data = np.arange(size)\\ny_data = np.cumsum(np.random.randn(size)  * 100.0)\", \"execution_count\": 1}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c960dbf9-16fe-460b-8178-de046a2a4774"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "3b36c028-0e5e-4f81-87cf-afb27ad4874f",
                "data": "{\"header\": {\"msg_id\": \"711b0085-4665cb4ff542e4a9901c77fc\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:07.321805Z\", \"version\": \"5.3\"}, \"msg_id\": \"711b0085-4665cb4ff542e4a9901c77fc\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:06.744000Z\", \"msg_id\": \"b25a7a13-a676-4b90-84da-834c0b597306\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:07.287777Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 1, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "3b36c028-0e5e-4f81-87cf-afb27ad4874f"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "14463661-46b2-4848-9ae4-a140c86f5179",
                "data": "{\"header\": {\"msg_id\": \"6ef40afa-03d2b4c689f72af59e2a8a10\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:07.321805Z\", \"version\": \"5.3\"}, \"msg_id\": \"6ef40afa-03d2b4c689f72af59e2a8a10\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:06.744000Z\", \"msg_id\": \"b25a7a13-a676-4b90-84da-834c0b597306\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "14463661-46b2-4848-9ae4-a140c86f5179"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "import numpy as np\n",
                        "from bqplot import pyplot as plt\n",
                        "\n",
                        "# And creating some random data\n",
                        "size = 100\n",
                        "np.random.seed(0)\n",
                        "x_data = np.arange(size)\n",
                        "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#1",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "import numpy as np\n",
                                "from bqplot import pyplot as plt\n",
                                "\n",
                                "# And creating some random data\n",
                                "size = 100\n",
                                "np.random.seed(0)\n",
                                "x_data = np.arange(size)\n",
                                "y_data = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#1"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#2"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "35896bd6-82b0-49ca-b8c9-6c892939888a",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "plt.figure(title='My First Plot')\nplt.plot(x_data, y_data)\nplt.show()"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:09.923Z",
                        "msg_id": "35896bd6-82b0-49ca-b8c9-6c892939888a",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "35896bd6-82b0-49ca-b8c9-6c892939888a"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4466a0a8-5fad-495e-bff1-1b3f9e6dc347",
                "data": "{\"header\": {\"msg_id\": \"934a8731-32b28d065ba1db774d14ad4a\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.434176Z\", \"version\": \"5.3\"}, \"msg_id\": \"934a8731-32b28d065ba1db774d14ad4a\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4466a0a8-5fad-495e-bff1-1b3f9e6dc347"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "8a3cb900-4751-49c3-a3fd-1e1339ff42cb",
                "data": "{\"header\": {\"msg_id\": \"8f435999-14ebf81f6b5a36929de79883\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.435172Z\", \"version\": \"5.3\"}, \"msg_id\": \"8f435999-14ebf81f6b5a36929de79883\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"plt.figure(title='My First Plot')\\nplt.plot(x_data, y_data)\\nplt.show()\", \"execution_count\": 2}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "8a3cb900-4751-49c3-a3fd-1e1339ff42cb"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "41d7b9e7-29b6-481c-bea3-66f1aed5d470",
                "data": "{\"header\": {\"msg_id\": \"2acb80a8-6ccb80989d0b2b6ced2f18b7\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.438167Z\", \"version\": \"5.3\"}, \"msg_id\": \"2acb80a8-6ccb80989d0b2b6ced2f18b7\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"4e9ff19ab52a4f70a11ef5b9bc2f5131\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "41d7b9e7-29b6-481c-bea3-66f1aed5d470"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "6b954ce7-d4e9-4e6f-8472-8fa0daa0c8aa",
                "data": "{\"header\": {\"msg_id\": \"7eda89ea-13063dea999a25cbee471449\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.440166Z\", \"version\": \"5.3\"}, \"msg_id\": \"7eda89ea-13063dea999a25cbee471449\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": false, \"max\": 1.0, \"mid_range\": 0.8, \"min\": 0.0, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"e053aa01a57e4c81855c7c86e1698ee8\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "6b954ce7-d4e9-4e6f-8472-8fa0daa0c8aa"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "965f5835-013d-48bd-ae48-fd2868c87eb4",
                "data": "{\"header\": {\"msg_id\": \"da18d870-2c10ead269992b2d0455479b\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.441166Z\", \"version\": \"5.3\"}, \"msg_id\": \"da18d870-2c10ead269992b2d0455479b\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": false, \"max\": 1.0, \"mid_range\": 0.8, \"min\": 0.0, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"bc97e9f1eab24cd2a1d51acb68533fa0\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "965f5835-013d-48bd-ae48-fd2868c87eb4"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ad666709-53f7-416b-a760-b4f88ae68407",
                "data": "{\"header\": {\"msg_id\": \"45f78e27-ae7eb8ab809fd9168426fa9f\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.441166Z\", \"version\": \"5.3\"}, \"msg_id\": \"45f78e27-ae7eb8ab809fd9168426fa9f\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"FigureModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Figure\", \"animation_duration\": 0, \"axes\": [], \"background_style\": {}, \"fig_margin\": {\"top\": 60, \"bottom\": 60, \"left\": 60, \"right\": 60}, \"interaction\": null, \"layout\": \"IPY_MODEL_4e9ff19ab52a4f70a11ef5b9bc2f5131\", \"legend_location\": \"top-right\", \"legend_style\": {}, \"legend_text\": {}, \"marks\": [], \"max_aspect_ratio\": 100.0, \"min_aspect_ratio\": 0.01, \"padding_x\": 0.0, \"padding_y\": 0.025, \"pixel_ratio\": null, \"scale_x\": \"IPY_MODEL_e053aa01a57e4c81855c7c86e1698ee8\", \"scale_y\": \"IPY_MODEL_bc97e9f1eab24cd2a1d51acb68533fa0\", \"theme\": \"classic\", \"title\": \"My First Plot\", \"title_style\": {}}, \"buffer_paths\": []}, \"comm_id\": \"1b5e65d082ea4b7d963f9f43b460f968\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ad666709-53f7-416b-a760-b4f88ae68407"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "da102f56-b0e0-4eac-8432-19f759f83e39",
                "data": "{\"header\": {\"msg_id\": \"68a526d2-95b6415f71ba6d27ce44adf3\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.443199Z\", \"version\": \"5.3\"}, \"msg_id\": \"68a526d2-95b6415f71ba6d27ce44adf3\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": true, \"max\": null, \"mid_range\": 0.8, \"min\": null, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"55ade64948d347978c4df796d5af3a02\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "da102f56-b0e0-4eac-8432-19f759f83e39"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "1a65c3f7-555d-42a5-bea4-41f15ffc8172",
                "data": "{\"header\": {\"msg_id\": \"bbacb6b1-146a0cd4b624f144f7e31a8d\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.445167Z\", \"version\": \"5.3\"}, \"msg_id\": \"bbacb6b1-146a0cd4b624f144f7e31a8d\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": true, \"max\": null, \"mid_range\": 0.8, \"min\": null, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"af09c82bce08412fbd8f5cbce5fca745\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "1a65c3f7-555d-42a5-bea4-41f15ffc8172"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_binary_msg",
            "payload": {
                "id": "9ee9392a-6e00-47b1-84ea-9349c9415e3f",
                "data": [
                    [
                        0,
                        0,
                        0,
                        3,
                        0,
                        0,
                        0,
                        16,
                        0,
                        0,
                        7,
                        247,
                        0,
                        0,
                        9,
                        135,
                        123,
                        34,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        102,
                        101,
                        57,
                        98,
                        102,
                        50,
                        102,
                        45,
                        54,
                        51,
                        51,
                        57,
                        49,
                        56,
                        101,
                        56,
                        99,
                        100,
                        56,
                        53,
                        56,
                        57,
                        100,
                        48,
                        102,
                        55,
                        57,
                        99,
                        97,
                        101,
                        48,
                        56,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        111,
                        112,
                        101,
                        110,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        98,
                        56,
                        102,
                        97,
                        55,
                        99,
                        55,
                        49,
                        45,
                        51,
                        54,
                        56,
                        57,
                        49,
                        52,
                        100,
                        50,
                        102,
                        53,
                        52,
                        56,
                        51,
                        54,
                        51,
                        56,
                        50,
                        51,
                        98,
                        101,
                        57,
                        99,
                        48,
                        98,
                        34,
                        44,
                        32,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        49,
                        48,
                        46,
                        52,
                        52,
                        55,
                        49,
                        54,
                        54,
                        90,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        51,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        102,
                        101,
                        57,
                        98,
                        102,
                        50,
                        102,
                        45,
                        54,
                        51,
                        51,
                        57,
                        49,
                        56,
                        101,
                        56,
                        99,
                        100,
                        56,
                        53,
                        56,
                        57,
                        100,
                        48,
                        102,
                        55,
                        57,
                        99,
                        97,
                        101,
                        48,
                        56,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        111,
                        112,
                        101,
                        110,
                        34,
                        44,
                        32,
                        34,
                        112,
                        97,
                        114,
                        101,
                        110,
                        116,
                        95,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        48,
                        57,
                        46,
                        57,
                        50,
                        51,
                        48,
                        48,
                        48,
                        90,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        51,
                        53,
                        56,
                        57,
                        54,
                        98,
                        100,
                        54,
                        45,
                        56,
                        50,
                        98,
                        48,
                        45,
                        52,
                        57,
                        99,
                        97,
                        45,
                        98,
                        56,
                        99,
                        57,
                        45,
                        54,
                        99,
                        56,
                        57,
                        50,
                        57,
                        51,
                        57,
                        56,
                        56,
                        56,
                        97,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        101,
                        120,
                        101,
                        99,
                        117,
                        116,
                        101,
                        95,
                        114,
                        101,
                        113,
                        117,
                        101,
                        115,
                        116,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        52,
                        55,
                        56,
                        51,
                        52,
                        54,
                        52,
                        53,
                        45,
                        50,
                        57,
                        48,
                        55,
                        45,
                        52,
                        56,
                        52,
                        101,
                        45,
                        57,
                        48,
                        49,
                        54,
                        45,
                        57,
                        51,
                        101,
                        56,
                        101,
                        56,
                        53,
                        102,
                        54,
                        50,
                        50,
                        50,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        50,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        101,
                        116,
                        97,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        50,
                        46,
                        48,
                        46,
                        48,
                        34,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        110,
                        116,
                        101,
                        110,
                        116,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        115,
                        116,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        34,
                        98,
                        113,
                        112,
                        108,
                        111,
                        116,
                        34,
                        44,
                        32,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        95,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        94,
                        48,
                        46,
                        53,
                        46,
                        54,
                        34,
                        44,
                        32,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        76,
                        105,
                        110,
                        101,
                        115,
                        77,
                        111,
                        100,
                        101,
                        108,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        99,
                        111,
                        117,
                        110,
                        116,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        34,
                        98,
                        113,
                        112,
                        108,
                        111,
                        116,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        95,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        94,
                        48,
                        46,
                        53,
                        46,
                        54,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        76,
                        105,
                        110,
                        101,
                        115,
                        34,
                        44,
                        32,
                        34,
                        97,
                        112,
                        112,
                        108,
                        121,
                        95,
                        99,
                        108,
                        105,
                        112,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        99,
                        108,
                        111,
                        115,
                        101,
                        95,
                        112,
                        97,
                        116,
                        104,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        115,
                        34,
                        58,
                        32,
                        91,
                        34,
                        35,
                        49,
                        102,
                        55,
                        55,
                        98,
                        52,
                        34,
                        44,
                        32,
                        34,
                        35,
                        102,
                        102,
                        55,
                        102,
                        48,
                        101,
                        34,
                        44,
                        32,
                        34,
                        35,
                        50,
                        99,
                        97,
                        48,
                        50,
                        99,
                        34,
                        44,
                        32,
                        34,
                        35,
                        100,
                        54,
                        50,
                        55,
                        50,
                        56,
                        34,
                        44,
                        32,
                        34,
                        35,
                        57,
                        52,
                        54,
                        55,
                        98,
                        100,
                        34,
                        44,
                        32,
                        34,
                        35,
                        56,
                        99,
                        53,
                        54,
                        52,
                        98,
                        34,
                        44,
                        32,
                        34,
                        35,
                        101,
                        51,
                        55,
                        55,
                        99,
                        50,
                        34,
                        44,
                        32,
                        34,
                        35,
                        55,
                        102,
                        55,
                        102,
                        55,
                        102,
                        34,
                        44,
                        32,
                        34,
                        35,
                        98,
                        99,
                        98,
                        100,
                        50,
                        50,
                        34,
                        44,
                        32,
                        34,
                        35,
                        49,
                        55,
                        98,
                        101,
                        99,
                        102,
                        34,
                        93,
                        44,
                        32,
                        34,
                        99,
                        117,
                        114,
                        118,
                        101,
                        115,
                        95,
                        115,
                        117,
                        98,
                        115,
                        101,
                        116,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        100,
                        105,
                        115,
                        112,
                        108,
                        97,
                        121,
                        95,
                        108,
                        101,
                        103,
                        101,
                        110,
                        100,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        101,
                        110,
                        97,
                        98,
                        108,
                        101,
                        95,
                        104,
                        111,
                        118,
                        101,
                        114,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        102,
                        105,
                        108,
                        108,
                        34,
                        58,
                        32,
                        34,
                        110,
                        111,
                        110,
                        101,
                        34,
                        44,
                        32,
                        34,
                        102,
                        105,
                        108,
                        108,
                        95,
                        99,
                        111,
                        108,
                        111,
                        114,
                        115,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        102,
                        105,
                        108,
                        108,
                        95,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        105,
                        101,
                        115,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        105,
                        110,
                        116,
                        101,
                        114,
                        97,
                        99,
                        116,
                        105,
                        111,
                        110,
                        115,
                        34,
                        58,
                        32,
                        123,
                        34,
                        104,
                        111,
                        118,
                        101,
                        114,
                        34,
                        58,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        34,
                        125,
                        44,
                        32,
                        34,
                        105,
                        110,
                        116,
                        101,
                        114,
                        112,
                        111,
                        108,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        108,
                        105,
                        110,
                        101,
                        97,
                        114,
                        34,
                        44,
                        32,
                        34,
                        108,
                        97,
                        98,
                        101,
                        108,
                        115,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        108,
                        97,
                        98,
                        101,
                        108,
                        115,
                        95,
                        118,
                        105,
                        115,
                        105,
                        98,
                        105,
                        108,
                        105,
                        116,
                        121,
                        34,
                        58,
                        32,
                        34,
                        110,
                        111,
                        110,
                        101,
                        34,
                        44,
                        32,
                        34,
                        108,
                        105,
                        110,
                        101,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        34,
                        115,
                        111,
                        108,
                        105,
                        100,
                        34,
                        44,
                        32,
                        34,
                        109,
                        97,
                        114,
                        107,
                        101,
                        114,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        109,
                        97,
                        114,
                        107,
                        101,
                        114,
                        95,
                        115,
                        105,
                        122,
                        101,
                        34,
                        58,
                        32,
                        54,
                        52,
                        44,
                        32,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        105,
                        101,
                        115,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        112,
                        114,
                        101,
                        115,
                        101,
                        114,
                        118,
                        101,
                        95,
                        100,
                        111,
                        109,
                        97,
                        105,
                        110,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        115,
                        99,
                        97,
                        108,
                        101,
                        115,
                        34,
                        58,
                        32,
                        123,
                        34,
                        120,
                        34,
                        58,
                        32,
                        34,
                        73,
                        80,
                        89,
                        95,
                        77,
                        79,
                        68,
                        69,
                        76,
                        95,
                        53,
                        53,
                        97,
                        100,
                        101,
                        54,
                        52,
                        57,
                        52,
                        56,
                        100,
                        51,
                        52,
                        55,
                        57,
                        55,
                        56,
                        99,
                        52,
                        100,
                        102,
                        55,
                        57,
                        54,
                        100,
                        53,
                        97,
                        102,
                        51,
                        97,
                        48,
                        50,
                        34,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        34,
                        73,
                        80,
                        89,
                        95,
                        77,
                        79,
                        68,
                        69,
                        76,
                        95,
                        97,
                        102,
                        48,
                        57,
                        99,
                        56,
                        50,
                        98,
                        99,
                        101,
                        48,
                        56,
                        52,
                        49,
                        50,
                        102,
                        98,
                        100,
                        56,
                        102,
                        53,
                        99,
                        98,
                        99,
                        101,
                        53,
                        102,
                        99,
                        97,
                        55,
                        52,
                        53,
                        34,
                        125,
                        44,
                        32,
                        34,
                        115,
                        99,
                        97,
                        108,
                        101,
                        115,
                        95,
                        109,
                        101,
                        116,
                        97,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        120,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        114,
                        105,
                        101,
                        110,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        104,
                        111,
                        114,
                        105,
                        122,
                        111,
                        110,
                        116,
                        97,
                        108,
                        34,
                        44,
                        32,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        120,
                        34,
                        125,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        114,
                        105,
                        101,
                        110,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        118,
                        101,
                        114,
                        116,
                        105,
                        99,
                        97,
                        108,
                        34,
                        44,
                        32,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        121,
                        34,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        125,
                        125,
                        44,
                        32,
                        34,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        115,
                        116,
                        114,
                        111,
                        107,
                        101,
                        95,
                        119,
                        105,
                        100,
                        116,
                        104,
                        34,
                        58,
                        32,
                        50,
                        46,
                        48,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        95,
                        108,
                        111,
                        99,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        109,
                        111,
                        117,
                        115,
                        101,
                        34,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        121,
                        34,
                        58,
                        32,
                        48,
                        46,
                        57,
                        125,
                        44,
                        32,
                        34,
                        117,
                        110,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        118,
                        105,
                        115,
                        105,
                        98,
                        108,
                        101,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        120,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        105,
                        110,
                        116,
                        51,
                        50,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        48,
                        48,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        102,
                        108,
                        111,
                        97,
                        116,
                        54,
                        52,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        48,
                        48,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        125,
                        44,
                        32,
                        34,
                        98,
                        117,
                        102,
                        102,
                        101,
                        114,
                        95,
                        112,
                        97,
                        116,
                        104,
                        115,
                        34,
                        58,
                        32,
                        91,
                        91,
                        34,
                        120,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        44,
                        32,
                        91,
                        34,
                        121,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        93,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        54,
                        99,
                        56,
                        52,
                        57,
                        56,
                        97,
                        97,
                        98,
                        55,
                        54,
                        55,
                        52,
                        50,
                        49,
                        97,
                        57,
                        50,
                        97,
                        54,
                        49,
                        57,
                        50,
                        56,
                        51,
                        53,
                        55,
                        99,
                        97,
                        55,
                        48,
                        97,
                        34,
                        44,
                        32,
                        34,
                        116,
                        97,
                        114,
                        103,
                        101,
                        116,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        106,
                        117,
                        112,
                        121,
                        116,
                        101,
                        114,
                        46,
                        119,
                        105,
                        100,
                        103,
                        101,
                        116,
                        34,
                        44,
                        32,
                        34,
                        116,
                        97,
                        114,
                        103,
                        101,
                        116,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        44,
                        32,
                        34,
                        99,
                        104,
                        97,
                        110,
                        110,
                        101,
                        108,
                        34,
                        58,
                        32,
                        34,
                        105,
                        111,
                        112,
                        117,
                        98,
                        34,
                        125,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        3,
                        0,
                        0,
                        0,
                        4,
                        0,
                        0,
                        0,
                        5,
                        0,
                        0,
                        0,
                        6,
                        0,
                        0,
                        0,
                        7,
                        0,
                        0,
                        0,
                        8,
                        0,
                        0,
                        0,
                        9,
                        0,
                        0,
                        0,
                        10,
                        0,
                        0,
                        0,
                        11,
                        0,
                        0,
                        0,
                        12,
                        0,
                        0,
                        0,
                        13,
                        0,
                        0,
                        0,
                        14,
                        0,
                        0,
                        0,
                        15,
                        0,
                        0,
                        0,
                        16,
                        0,
                        0,
                        0,
                        17,
                        0,
                        0,
                        0,
                        18,
                        0,
                        0,
                        0,
                        19,
                        0,
                        0,
                        0,
                        20,
                        0,
                        0,
                        0,
                        21,
                        0,
                        0,
                        0,
                        22,
                        0,
                        0,
                        0,
                        23,
                        0,
                        0,
                        0,
                        24,
                        0,
                        0,
                        0,
                        25,
                        0,
                        0,
                        0,
                        26,
                        0,
                        0,
                        0,
                        27,
                        0,
                        0,
                        0,
                        28,
                        0,
                        0,
                        0,
                        29,
                        0,
                        0,
                        0,
                        30,
                        0,
                        0,
                        0,
                        31,
                        0,
                        0,
                        0,
                        32,
                        0,
                        0,
                        0,
                        33,
                        0,
                        0,
                        0,
                        34,
                        0,
                        0,
                        0,
                        35,
                        0,
                        0,
                        0,
                        36,
                        0,
                        0,
                        0,
                        37,
                        0,
                        0,
                        0,
                        38,
                        0,
                        0,
                        0,
                        39,
                        0,
                        0,
                        0,
                        40,
                        0,
                        0,
                        0,
                        41,
                        0,
                        0,
                        0,
                        42,
                        0,
                        0,
                        0,
                        43,
                        0,
                        0,
                        0,
                        44,
                        0,
                        0,
                        0,
                        45,
                        0,
                        0,
                        0,
                        46,
                        0,
                        0,
                        0,
                        47,
                        0,
                        0,
                        0,
                        48,
                        0,
                        0,
                        0,
                        49,
                        0,
                        0,
                        0,
                        50,
                        0,
                        0,
                        0,
                        51,
                        0,
                        0,
                        0,
                        52,
                        0,
                        0,
                        0,
                        53,
                        0,
                        0,
                        0,
                        54,
                        0,
                        0,
                        0,
                        55,
                        0,
                        0,
                        0,
                        56,
                        0,
                        0,
                        0,
                        57,
                        0,
                        0,
                        0,
                        58,
                        0,
                        0,
                        0,
                        59,
                        0,
                        0,
                        0,
                        60,
                        0,
                        0,
                        0,
                        61,
                        0,
                        0,
                        0,
                        62,
                        0,
                        0,
                        0,
                        63,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        65,
                        0,
                        0,
                        0,
                        66,
                        0,
                        0,
                        0,
                        67,
                        0,
                        0,
                        0,
                        68,
                        0,
                        0,
                        0,
                        69,
                        0,
                        0,
                        0,
                        70,
                        0,
                        0,
                        0,
                        71,
                        0,
                        0,
                        0,
                        72,
                        0,
                        0,
                        0,
                        73,
                        0,
                        0,
                        0,
                        74,
                        0,
                        0,
                        0,
                        75,
                        0,
                        0,
                        0,
                        76,
                        0,
                        0,
                        0,
                        77,
                        0,
                        0,
                        0,
                        78,
                        0,
                        0,
                        0,
                        79,
                        0,
                        0,
                        0,
                        80,
                        0,
                        0,
                        0,
                        81,
                        0,
                        0,
                        0,
                        82,
                        0,
                        0,
                        0,
                        83,
                        0,
                        0,
                        0,
                        84,
                        0,
                        0,
                        0,
                        85,
                        0,
                        0,
                        0,
                        86,
                        0,
                        0,
                        0,
                        87,
                        0,
                        0,
                        0,
                        88,
                        0,
                        0,
                        0,
                        89,
                        0,
                        0,
                        0,
                        90,
                        0,
                        0,
                        0,
                        91,
                        0,
                        0,
                        0,
                        92,
                        0,
                        0,
                        0,
                        93,
                        0,
                        0,
                        0,
                        94,
                        0,
                        0,
                        0,
                        95,
                        0,
                        0,
                        0,
                        96,
                        0,
                        0,
                        0,
                        97,
                        0,
                        0,
                        0,
                        98,
                        0,
                        0,
                        0,
                        99,
                        0,
                        0,
                        0,
                        57,
                        138,
                        139,
                        174,
                        247,
                        12,
                        102,
                        64,
                        11,
                        125,
                        135,
                        119,
                        120,
                        13,
                        107,
                        64,
                        233,
                        137,
                        206,
                        79,
                        183,
                        164,
                        115,
                        64,
                        55,
                        4,
                        68,
                        149,
                        18,
                        211,
                        128,
                        64,
                        76,
                        162,
                        158,
                        117,
                        30,
                        169,
                        134,
                        64,
                        147,
                        119,
                        28,
                        243,
                        75,
                        155,
                        131,
                        64,
                        55,
                        104,
                        188,
                        14,
                        94,
                        147,
                        134,
                        64,
                        61,
                        254,
                        238,
                        25,
                        72,
                        26,
                        134,
                        64,
                        9,
                        139,
                        101,
                        225,
                        180,
                        199,
                        133,
                        64,
                        142,
                        148,
                        34,
                        116,
                        47,
                        16,
                        135,
                        64,
                        146,
                        0,
                        184,
                        147,
                        107,
                        131,
                        135,
                        64,
                        188,
                        132,
                        143,
                        202,
                        214,
                        14,
                        140,
                        64,
                        152,
                        171,
                        62,
                        81,
                        171,
                        111,
                        142,
                        64,
                        41,
                        121,
                        89,
                        92,
                        2,
                        209,
                        142,
                        64,
                        245,
                        211,
                        128,
                        198,
                        12,
                        26,
                        144,
                        64,
                        222,
                        110,
                        202,
                        6,
                        133,
                        159,
                        144,
                        64,
                        213,
                        2,
                        63,
                        185,
                        38,
                        245,
                        146,
                        64,
                        136,
                        219,
                        116,
                        132,
                        22,
                        163,
                        146,
                        64,
                        85,
                        37,
                        106,
                        166,
                        80,
                        32,
                        147,
                        64,
                        203,
                        247,
                        16,
                        63,
                        173,
                        202,
                        145,
                        64,
                        215,
                        24,
                        173,
                        45,
                        246,
                        154,
                        139,
                        64,
                        226,
                        243,
                        74,
                        68,
                        219,
                        165,
                        141,
                        64,
                        254,
                        17,
                        112,
                        230,
                        179,
                        44,
                        144,
                        64,
                        80,
                        35,
                        116,
                        103,
                        172,
                        7,
                        142,
                        64,
                        71,
                        134,
                        87,
                        19,
                        189,
                        143,
                        146,
                        64,
                        156,
                        59,
                        205,
                        7,
                        254,
                        73,
                        144,
                        64,
                        224,
                        172,
                        224,
                        179,
                        75,
                        92,
                        144,
                        64,
                        191,
                        60,
                        143,
                        19,
                        108,
                        17,
                        144,
                        64,
                        1,
                        20,
                        255,
                        170,
                        136,
                        118,
                        146,
                        64,
                        2,
                        185,
                        136,
                        1,
                        71,
                        194,
                        148,
                        64,
                        17,
                        140,
                        84,
                        159,
                        65,
                        0,
                        149,
                        64,
                        201,
                        85,
                        226,
                        118,
                        133,
                        151,
                        149,
                        64,
                        74,
                        115,
                        46,
                        52,
                        104,
                        52,
                        148,
                        64,
                        169,
                        173,
                        62,
                        165,
                        22,
                        28,
                        145,
                        64,
                        231,
                        94,
                        255,
                        112,
                        236,
                        144,
                        144,
                        64,
                        222,
                        200,
                        105,
                        147,
                        118,
                        207,
                        144,
                        64,
                        134,
                        32,
                        111,
                        87,
                        148,
                        187,
                        146,
                        64,
                        234,
                        247,
                        189,
                        9,
                        136,
                        156,
                        148,
                        64,
                        140,
                        171,
                        158,
                        197,
                        153,
                        1,
                        148,
                        64,
                        200,
                        38,
                        101,
                        248,
                        173,
                        136,
                        147,
                        64,
                        252,
                        51,
                        140,
                        37,
                        66,
                        229,
                        145,
                        64,
                        78,
                        170,
                        171,
                        158,
                        128,
                        90,
                        143,
                        64,
                        3,
                        175,
                        25,
                        124,
                        124,
                        5,
                        138,
                        64,
                        79,
                        40,
                        146,
                        164,
                        13,
                        15,
                        144,
                        64,
                        230,
                        209,
                        213,
                        132,
                        98,
                        134,
                        142,
                        64,
                        110,
                        19,
                        228,
                        230,
                        236,
                        39,
                        141,
                        64,
                        114,
                        151,
                        132,
                        105,
                        176,
                        61,
                        137,
                        64,
                        54,
                        194,
                        226,
                        111,
                        174,
                        171,
                        139,
                        64,
                        65,
                        109,
                        106,
                        40,
                        144,
                        160,
                        134,
                        64,
                        143,
                        252,
                        207,
                        242,
                        94,
                        246,
                        133,
                        64,
                        211,
                        165,
                        145,
                        101,
                        255,
                        41,
                        131,
                        64,
                        209,
                        170,
                        63,
                        7,
                        133,
                        95,
                        132,
                        64,
                        37,
                        37,
                        218,
                        34,
                        224,
                        198,
                        130,
                        64,
                        254,
                        248,
                        100,
                        84,
                        189,
                        44,
                        126,
                        64,
                        79,
                        116,
                        145,
                        227,
                        165,
                        255,
                        125,
                        64,
                        70,
                        252,
                        193,
                        79,
                        125,
                        86,
                        128,
                        64,
                        114,
                        25,
                        232,
                        9,
                        180,
                        139,
                        128,
                        64,
                        148,
                        242,
                        137,
                        72,
                        174,
                        125,
                        129,
                        64,
                        45,
                        21,
                        181,
                        60,
                        114,
                        4,
                        127,
                        64,
                        233,
                        232,
                        158,
                        116,
                        15,
                        192,
                        124,
                        64,
                        243,
                        214,
                        248,
                        167,
                        31,
                        140,
                        120,
                        64,
                        231,
                        102,
                        97,
                        174,
                        214,
                        76,
                        118,
                        64,
                        7,
                        223,
                        203,
                        246,
                        205,
                        55,
                        113,
                        64,
                        212,
                        198,
                        198,
                        112,
                        2,
                        183,
                        89,
                        64,
                        212,
                        168,
                        151,
                        110,
                        137,
                        38,
                        94,
                        64,
                        12,
                        100,
                        206,
                        139,
                        35,
                        27,
                        84,
                        64,
                        116,
                        235,
                        240,
                        108,
                        33,
                        166,
                        84,
                        192,
                        69,
                        57,
                        201,
                        244,
                        165,
                        40,
                        66,
                        192,
                        168,
                        30,
                        73,
                        158,
                        8,
                        195,
                        95,
                        192,
                        160,
                        16,
                        38,
                        72,
                        149,
                        118,
                        94,
                        192,
                        32,
                        100,
                        9,
                        156,
                        206,
                        120,
                        72,
                        192,
                        196,
                        23,
                        85,
                        104,
                        211,
                        5,
                        66,
                        192,
                        115,
                        74,
                        182,
                        96,
                        64,
                        121,
                        83,
                        64,
                        16,
                        47,
                        25,
                        126,
                        68,
                        203,
                        70,
                        192,
                        208,
                        218,
                        218,
                        56,
                        91,
                        106,
                        21,
                        192,
                        9,
                        170,
                        235,
                        141,
                        110,
                        117,
                        82,
                        192,
                        232,
                        168,
                        66,
                        77,
                        68,
                        29,
                        100,
                        192,
                        214,
                        244,
                        121,
                        242,
                        149,
                        89,
                        107,
                        192,
                        156,
                        222,
                        15,
                        200,
                        141,
                        62,
                        111,
                        192,
                        81,
                        77,
                        21,
                        34,
                        211,
                        138,
                        110,
                        192,
                        65,
                        141,
                        252,
                        240,
                        166,
                        141,
                        118,
                        192,
                        43,
                        79,
                        140,
                        105,
                        84,
                        236,
                        112,
                        192,
                        18,
                        101,
                        106,
                        39,
                        138,
                        6,
                        108,
                        192,
                        254,
                        125,
                        170,
                        125,
                        66,
                        157,
                        119,
                        192,
                        115,
                        20,
                        220,
                        200,
                        28,
                        160,
                        108,
                        192,
                        128,
                        187,
                        133,
                        124,
                        17,
                        181,
                        67,
                        192,
                        82,
                        57,
                        200,
                        180,
                        167,
                        157,
                        83,
                        64,
                        68,
                        214,
                        218,
                        181,
                        69,
                        60,
                        78,
                        64,
                        134,
                        221,
                        211,
                        122,
                        92,
                        77,
                        71,
                        192,
                        228,
                        33,
                        99,
                        240,
                        158,
                        107,
                        77,
                        64,
                        232,
                        43,
                        55,
                        112,
                        233,
                        133,
                        50,
                        64,
                        28,
                        130,
                        115,
                        46,
                        144,
                        152,
                        97,
                        64,
                        218,
                        50,
                        34,
                        11,
                        11,
                        51,
                        100,
                        64,
                        159,
                        176,
                        255,
                        222,
                        36,
                        52,
                        112,
                        64,
                        119,
                        140,
                        32,
                        140,
                        84,
                        110,
                        114,
                        64,
                        78,
                        165,
                        196,
                        234,
                        216,
                        216,
                        118,
                        64,
                        128,
                        170,
                        189,
                        185,
                        165,
                        233,
                        118,
                        64,
                        203,
                        66,
                        210,
                        35,
                        133,
                        9,
                        129,
                        64,
                        248,
                        25,
                        140,
                        188,
                        12,
                        111,
                        129,
                        64,
                        218,
                        69,
                        124,
                        40,
                        164,
                        176,
                        130,
                        64
                    ]
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9ee9392a-6e00-47b1-84ea-9349c9415e3f"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c96ae176-af15-4613-ba0c-56088331541d",
                "data": "{\"header\": {\"msg_id\": \"03698404-e902a0076f438a83ae9e1273\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.466716Z\", \"version\": \"5.3\"}, \"msg_id\": \"03698404-e902a0076f438a83ae9e1273\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:10.435172Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 2, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c96ae176-af15-4613-ba0c-56088331541d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "9b1feb32-e261-4bc8-97e5-9f43e820321d",
                "data": "{\"header\": {\"msg_id\": \"0937911a-a78bda217661feda61654dfe\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.448166Z\", \"version\": \"5.3\"}, \"msg_id\": \"0937911a-a78bda217661feda61654dfe\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"marks\": [\"IPY_MODEL_6c8498aab767421a92a61928357ca70a\"]}, \"buffer_paths\": []}, \"comm_id\": \"1b5e65d082ea4b7d963f9f43b460f968\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9b1feb32-e261-4bc8-97e5-9f43e820321d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "58e66fad-78a8-4fff-bcc6-086ea1889948",
                "data": "{\"header\": {\"msg_id\": \"751cb341-2ce522c5c2735472376e27b2\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.449166Z\", \"version\": \"5.3\"}, \"msg_id\": \"751cb341-2ce522c5c2735472376e27b2\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"AxisModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Axis\", \"color\": null, \"grid_color\": null, \"grid_lines\": \"solid\", \"label\": \"\", \"label_color\": null, \"label_location\": \"middle\", \"label_offset\": null, \"num_ticks\": null, \"offset\": {}, \"orientation\": \"horizontal\", \"scale\": \"IPY_MODEL_55ade64948d347978c4df796d5af3a02\", \"side\": null, \"tick_format\": null, \"tick_rotate\": 0, \"tick_style\": {}, \"tick_values\": null, \"visible\": true}, \"buffer_paths\": []}, \"comm_id\": \"dc3c55a5c62a4f369c5c1026aa4f11dd\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "58e66fad-78a8-4fff-bcc6-086ea1889948"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "db71c8e0-dc03-46f8-9c7d-ea73f1b80a91",
                "data": "{\"header\": {\"msg_id\": \"1b753788-69c6c215aba767c59427c0d5\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.451167Z\", \"version\": \"5.3\"}, \"msg_id\": \"1b753788-69c6c215aba767c59427c0d5\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"AxisModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Axis\", \"color\": null, \"grid_color\": null, \"grid_lines\": \"solid\", \"label\": \"\", \"label_color\": null, \"label_location\": \"middle\", \"label_offset\": null, \"num_ticks\": null, \"offset\": {}, \"orientation\": \"vertical\", \"scale\": \"IPY_MODEL_af09c82bce08412fbd8f5cbce5fca745\", \"side\": null, \"tick_format\": null, \"tick_rotate\": 0, \"tick_style\": {}, \"tick_values\": null, \"visible\": true}, \"buffer_paths\": []}, \"comm_id\": \"e1d1bdf9acfc4ba4beea19e613e74c2d\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"dc3c55a5c62a4f369c5c1026aa4f11dd\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"bottom\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:16.518Z\",\"msg_id\":\"d6a509c7-7fe2-48b3-bde4-932adebe74cb\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "db71c8e0-dc03-46f8-9c7d-ea73f1b80a91"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "f4690fdb-e6c2-4127-866d-c44eee6b9f76",
                "data": "{\"header\": {\"msg_id\": \"36da9c6b-324fc0959d3ecaff71ad1693\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.451167Z\", \"version\": \"5.3\"}, \"msg_id\": \"36da9c6b-324fc0959d3ecaff71ad1693\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"axes\": [\"IPY_MODEL_dc3c55a5c62a4f369c5c1026aa4f11dd\", \"IPY_MODEL_e1d1bdf9acfc4ba4beea19e613e74c2d\"]}, \"buffer_paths\": []}, \"comm_id\": \"1b5e65d082ea4b7d963f9f43b460f968\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"e1d1bdf9acfc4ba4beea19e613e74c2d\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"left\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:17.022Z\",\"msg_id\":\"b64511f5-7214-4d39-a06e-a3a6df0dd5e0\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "f4690fdb-e6c2-4127-866d-c44eee6b9f76"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "8eb908a6-e0cc-4645-b2a3-57c5d180e73c",
                "data": "{\"header\": {\"msg_id\": \"041e3014-0a2dbc7e9e031436bcd4ab15\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.453168Z\", \"version\": \"5.3\"}, \"msg_id\": \"041e3014-0a2dbc7e9e031436bcd4ab15\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"af95bc83b9d94cae98a0ba921fd1d7ee\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "8eb908a6-e0cc-4645-b2a3-57c5d180e73c"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "7e81a0f8-74a4-418d-9b31-f5a05ba26031",
                "data": "{\"header\": {\"msg_id\": \"8fc168ea-7667d662fe25aaa69a620a68\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.454167Z\", \"version\": \"5.3\"}, \"msg_id\": \"8fc168ea-7667d662fe25aaa69a620a68\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"ToolbarModel\", \"_panning\": false, \"_panzoom\": null, \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Toolbar\", \"figure\": \"IPY_MODEL_1b5e65d082ea4b7d963f9f43b460f968\", \"layout\": \"IPY_MODEL_af95bc83b9d94cae98a0ba921fd1d7ee\"}, \"buffer_paths\": []}, \"comm_id\": \"33ba158123cb43488f9fc5509be26bdc\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "7e81a0f8-74a4-418d-9b31-f5a05ba26031"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "fb78b770-e1ba-456f-8f9a-ef733bfe3f12",
                "data": "{\"header\": {\"msg_id\": \"5a6340d0-92cc12335f8afe7f183b2139\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.455691Z\", \"version\": \"5.3\"}, \"msg_id\": \"5a6340d0-92cc12335f8afe7f183b2139\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"a23d1e35d8b54cebbbb0bdff5158c294\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "fb78b770-e1ba-456f-8f9a-ef733bfe3f12"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "fb4ca76c-2022-42ca-be2e-949bb1f7fad2",
                "data": "{\"header\": {\"msg_id\": \"e05b05c9-43866b1598d3e646e0cae21a\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.455691Z\", \"version\": \"5.3\"}, \"msg_id\": \"e05b05c9-43866b1598d3e646e0cae21a\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"@jupyter-widgets/controls\", \"_model_module_version\": \"1.5.0\", \"_model_name\": \"VBoxModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/controls\", \"_view_module_version\": \"1.5.0\", \"_view_name\": \"VBoxView\", \"box_style\": \"\", \"children\": [\"IPY_MODEL_1b5e65d082ea4b7d963f9f43b460f968\", \"IPY_MODEL_33ba158123cb43488f9fc5509be26bdc\"], \"layout\": \"IPY_MODEL_a23d1e35d8b54cebbbb0bdff5158c294\"}, \"buffer_paths\": []}, \"comm_id\": \"360649533c6043d9998207a405d1d353\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "fb4ca76c-2022-42ca-be2e-949bb1f7fad2"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "49096c4c-512a-438b-8192-8823f9d85ade",
                "data": "{\"header\": {\"msg_id\": \"7a3b303e-19224e013581b8e9fe62c2ec\", \"msg_type\": \"display_data\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.463680Z\", \"version\": \"5.3\"}, \"msg_id\": \"7a3b303e-19224e013581b8e9fe62c2ec\", \"msg_type\": \"display_data\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig\\u2026\", \"application/vnd.jupyter.widget-view+json\": {\"version_major\": 2, \"version_minor\": 0, \"model_id\": \"360649533c6043d9998207a405d1d353\"}}, \"metadata\": {}, \"transient\": {}}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "49096c4c-512a-438b-8192-8823f9d85ade"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "f3e0c3ef-6951-4bad-8310-68e46f708acb",
                "data": "{\"header\": {\"msg_id\": \"b1c580f6-e5cbe3d7694f68063b749b50\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:10.466716Z\", \"version\": \"5.3\"}, \"msg_id\": \"b1c580f6-e5cbe3d7694f68063b749b50\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:09.923000Z\", \"msg_id\": \"35896bd6-82b0-49ca-b8c9-6c892939888a\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "360649533c6043d9998207a405d1d353"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "f3e0c3ef-6951-4bad-8310-68e46f708acb"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "7480eb64-50a7-4363-8965-91431e087190",
                "data": "{\"header\": {\"msg_id\": \"f281b8ff-82ed5a95284d790060c68f17\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:16.535335Z\", \"version\": \"5.3\"}, \"msg_id\": \"f281b8ff-82ed5a95284d790060c68f17\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:16.518000Z\", \"msg_id\": \"d6a509c7-7fe2-48b3-bde4-932adebe74cb\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "360649533c6043d9998207a405d1d353"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "360649533c6043d9998207a405d1d353"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "plt.figure(title='My First Plot')\n",
                        "plt.plot(x_data, y_data)\n",
                        "plt.show()"
                    ]
                },
                "id": "NotebookImport#2",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "360649533c6043d9998207a405d1d353"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "7480eb64-50a7-4363-8965-91431e087190"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "a71d87b9-01ac-4089-8d59-a255dfd23608",
                "data": "{\"header\": {\"msg_id\": \"bfe3c20b-1a67640fd2c891657e8e7ead\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:16.536335Z\", \"version\": \"5.3\"}, \"msg_id\": \"bfe3c20b-1a67640fd2c891657e8e7ead\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:16.518000Z\", \"msg_id\": \"d6a509c7-7fe2-48b3-bde4-932adebe74cb\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "360649533c6043d9998207a405d1d353"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "VBox(children=(Figure(axes=[Axis(scale=LinearScale()), Axis(orientation='vertical', scale=LinearScale())], fig…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "360649533c6043d9998207a405d1d353"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "plt.figure(title='My First Plot')\n",
                                "plt.plot(x_data, y_data)\n",
                                "plt.show()"
                            ]
                        },
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#2"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#5"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#4"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "d435e485-a464-4af3-8a9d-6229eaba61a3",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "# Creating a new Figure and setting it's title\nplt.figure(title='My Second Chart')"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:21.167Z",
                        "msg_id": "d435e485-a464-4af3-8a9d-6229eaba61a3",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "a71d87b9-01ac-4089-8d59-a255dfd23608"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "373f98c0-bb66-40de-9ddb-5d0723a602d4",
                "data": "{\"header\": {\"msg_id\": \"08cb1b32-c38bea7d07d43bcd551ab966\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:17.027333Z\", \"version\": \"5.3\"}, \"msg_id\": \"08cb1b32-c38bea7d07d43bcd551ab966\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:17.022000Z\", \"msg_id\": \"b64511f5-7214-4d39-a06e-a3a6df0dd5e0\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"dc3c55a5c62a4f369c5c1026aa4f11dd\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"bottom\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:21.556Z\",\"msg_id\":\"b831a672-1c4a-4657-ae64-1fb08e1866fd\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d435e485-a464-4af3-8a9d-6229eaba61a3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "373f98c0-bb66-40de-9ddb-5d0723a602d4"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "33c514d3-b937-4bfe-bc3b-1cdb1e14243a",
                "data": "{\"header\": {\"msg_id\": \"83eb3168-d8048a04ddef1628c38e33a5\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:17.028334Z\", \"version\": \"5.3\"}, \"msg_id\": \"83eb3168-d8048a04ddef1628c38e33a5\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:17.022000Z\", \"msg_id\": \"b64511f5-7214-4d39-a06e-a3a6df0dd5e0\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "33c514d3-b937-4bfe-bc3b-1cdb1e14243a"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "0d71264c-38f5-44fe-8219-460c64826f48",
                "data": "{\"header\": {\"msg_id\": \"0b0280e2-105c7309bb45131e7a15fe68\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.564491Z\", \"version\": \"5.3\"}, \"msg_id\": \"0b0280e2-105c7309bb45131e7a15fe68\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.556000Z\", \"msg_id\": \"b831a672-1c4a-4657-ae64-1fb08e1866fd\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"e1d1bdf9acfc4ba4beea19e613e74c2d\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"left\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:22.568Z\",\"msg_id\":\"3b432423-8d18-4063-82d1-7e7682379c4a\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "0d71264c-38f5-44fe-8219-460c64826f48"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "683b7776-2912-475c-93fd-17e5b11387a3",
                "data": "{\"header\": {\"msg_id\": \"4e0da269-ca1bce979633bdbef8fbb5b1\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.565492Z\", \"version\": \"5.3\"}, \"msg_id\": \"4e0da269-ca1bce979633bdbef8fbb5b1\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.556000Z\", \"msg_id\": \"b831a672-1c4a-4657-ae64-1fb08e1866fd\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "683b7776-2912-475c-93fd-17e5b11387a3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "92577fd8-f6a5-42b1-95cb-cff29afbe3cd",
                "data": "{\"header\": {\"msg_id\": \"99635642-8e5ec4111e6d20d785401464\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.676522Z\", \"version\": \"5.3\"}, \"msg_id\": \"99635642-8e5ec4111e6d20d785401464\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "92577fd8-f6a5-42b1-95cb-cff29afbe3cd"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "405e15c6-0529-4e52-b66b-b9c4a348f3bd",
                "data": "{\"header\": {\"msg_id\": \"0760acd3-92e1bf87478c57f5a609ba68\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.676522Z\", \"version\": \"5.3\"}, \"msg_id\": \"0760acd3-92e1bf87478c57f5a609ba68\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"# Creating a new Figure and setting it's title\\nplt.figure(title='My Second Chart')\", \"execution_count\": 3}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "405e15c6-0529-4e52-b66b-b9c4a348f3bd"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ed975c22-3e1a-41a9-9523-7bde1999040c",
                "data": "{\"header\": {\"msg_id\": \"d763fe3f-8b5221dc75f2ef347e7ec21a\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.678493Z\", \"version\": \"5.3\"}, \"msg_id\": \"d763fe3f-8b5221dc75f2ef347e7ec21a\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"fa951b3147034073bc2d1eb6b2a1d0b7\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ed975c22-3e1a-41a9-9523-7bde1999040c"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "7f58b883-7abb-46dc-b235-4864fdacdb03",
                "data": "{\"header\": {\"msg_id\": \"6cc6cd2b-0270ce46a584314dfbad9175\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.679492Z\", \"version\": \"5.3\"}, \"msg_id\": \"6cc6cd2b-0270ce46a584314dfbad9175\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": false, \"max\": 1.0, \"mid_range\": 0.8, \"min\": 0.0, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"a464d6edb9164abda4058c3575d8fadb\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "7f58b883-7abb-46dc-b235-4864fdacdb03"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "5cc6a06d-2931-4fb3-b805-dd042f5629a3",
                "data": "{\"header\": {\"msg_id\": \"052774ab-0fe160edc9a3b1446107b8ec\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.680520Z\", \"version\": \"5.3\"}, \"msg_id\": \"052774ab-0fe160edc9a3b1446107b8ec\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": false, \"max\": 1.0, \"mid_range\": 0.8, \"min\": 0.0, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"d6f74dbb18cc4cbfae1c55827004ac48\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "5cc6a06d-2931-4fb3-b805-dd042f5629a3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "152bb6b1-9c17-4191-be90-41e31b33bf7f",
                "data": "{\"header\": {\"msg_id\": \"75eb9385-347e884a27b485440704fb6d\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.680520Z\", \"version\": \"5.3\"}, \"msg_id\": \"75eb9385-347e884a27b485440704fb6d\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"FigureModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Figure\", \"animation_duration\": 0, \"axes\": [], \"background_style\": {}, \"fig_margin\": {\"top\": 60, \"bottom\": 60, \"left\": 60, \"right\": 60}, \"interaction\": null, \"layout\": \"IPY_MODEL_fa951b3147034073bc2d1eb6b2a1d0b7\", \"legend_location\": \"top-right\", \"legend_style\": {}, \"legend_text\": {}, \"marks\": [], \"max_aspect_ratio\": 100.0, \"min_aspect_ratio\": 0.01, \"padding_x\": 0.0, \"padding_y\": 0.025, \"pixel_ratio\": null, \"scale_x\": \"IPY_MODEL_a464d6edb9164abda4058c3575d8fadb\", \"scale_y\": \"IPY_MODEL_d6f74dbb18cc4cbfae1c55827004ac48\", \"theme\": \"classic\", \"title\": \"My Second Chart\", \"title_style\": {}}, \"buffer_paths\": []}, \"comm_id\": \"107dc7a1ad9b400f8f77a23de0a80319\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "152bb6b1-9c17-4191-be90-41e31b33bf7f"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "36d8e906-8c2e-4be8-8723-ae728a855419",
                "data": "{\"header\": {\"msg_id\": \"90c1878b-9ce555caf73990b319f760a9\", \"msg_type\": \"display_data\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.683266Z\", \"version\": \"5.3\"}, \"msg_id\": \"90c1878b-9ce555caf73990b319f760a9\", \"msg_type\": \"display_data\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,\\u2026\", \"application/vnd.jupyter.widget-view+json\": {\"version_major\": 2, \"version_minor\": 0, \"model_id\": \"107dc7a1ad9b400f8f77a23de0a80319\"}}, \"metadata\": {}, \"transient\": {}}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "36d8e906-8c2e-4be8-8723-ae728a855419"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c3c48ded-70ab-45ef-a154-8d227320e275",
                "data": "{\"header\": {\"msg_id\": \"5fe88c6d-68a9e9a8cc28405cbdf361eb\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.686011Z\", \"version\": \"5.3\"}, \"msg_id\": \"5fe88c6d-68a9e9a8cc28405cbdf361eb\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:21.676522Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 3, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c3c48ded-70ab-45ef-a154-8d227320e275"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "727cee5c-bd3f-4786-98c6-a9f9f2b43f04",
                "data": "{\"header\": {\"msg_id\": \"a012546a-ac5941fd478456abe3009e7f\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:21.686011Z\", \"version\": \"5.3\"}, \"msg_id\": \"a012546a-ac5941fd478456abe3009e7f\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:21.167000Z\", \"msg_id\": \"d435e485-a464-4af3-8a9d-6229eaba61a3\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "727cee5c-bd3f-4786-98c6-a9f9f2b43f04"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "cd5d49a0-a5c6-4fe3-b2fd-6e8da27fc8c5",
                "data": "{\"header\": {\"msg_id\": \"a36fe05d-3c44fa54d71aeab3b6ae4253\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:22.573183Z\", \"version\": \"5.3\"}, \"msg_id\": \"a36fe05d-3c44fa54d71aeab3b6ae4253\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:22.568000Z\", \"msg_id\": \"3b432423-8d18-4063-82d1-7e7682379c4a\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "# Creating a new Figure and setting it's title\n",
                        "plt.figure(title='My Second Chart')"
                    ]
                },
                "id": "NotebookImport#4",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "cd5d49a0-a5c6-4fe3-b2fd-6e8da27fc8c5"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ab6ee813-8d41-4d19-909e-2b07081a4765",
                "data": "{\"header\": {\"msg_id\": \"ebbbd497-944d5f67bd2503566599f54a\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:22.574183Z\", \"version\": \"5.3\"}, \"msg_id\": \"ebbbd497-944d5f67bd2503566599f54a\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:22.568000Z\", \"msg_id\": \"3b432423-8d18-4063-82d1-7e7682379c4a\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Figure(fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'right': 60}, scale_x=LinearScale(allow_padding=False,…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "107dc7a1ad9b400f8f77a23de0a80319"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "# Creating a new Figure and setting it's title\n",
                                "plt.figure(title='My Second Chart')"
                            ]
                        },
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#4"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#6"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#5"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "e976c0ce-b008-4ba9-a1ed-1dda9185231d",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "# Let's assign the scatter plot to a variable\nscatter_plot = plt.scatter(x_data, y_data)\nscatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:28.750Z",
                        "msg_id": "e976c0ce-b008-4ba9-a1ed-1dda9185231d",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ab6ee813-8d41-4d19-909e-2b07081a4765"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "e976c0ce-b008-4ba9-a1ed-1dda9185231d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "bc2987a4-73e4-4a63-9e5c-6765d9df3c34",
                "data": "{\"header\": {\"msg_id\": \"1545a3b0-d2914369d6fc984c92b7043a\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.295459Z\", \"version\": \"5.3\"}, \"msg_id\": \"1545a3b0-d2914369d6fc984c92b7043a\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "bc2987a4-73e4-4a63-9e5c-6765d9df3c34"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "88e0a26d-f467-4c70-bfe8-b219fa3106ce",
                "data": "{\"header\": {\"msg_id\": \"24771c4e-c9e8e2a4c624b92be901c389\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.295459Z\", \"version\": \"5.3\"}, \"msg_id\": \"24771c4e-c9e8e2a4c624b92be901c389\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"# Let's assign the scatter plot to a variable\\nscatter_plot = plt.scatter(x_data, y_data)\\nscatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)\", \"execution_count\": 4}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "88e0a26d-f467-4c70-bfe8-b219fa3106ce"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "0d45a21b-168c-4eeb-9bd0-b82b7b3de279",
                "data": "{\"header\": {\"msg_id\": \"ebb6372e-12731070469e16d282b7a6fd\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.299459Z\", \"version\": \"5.3\"}, \"msg_id\": \"ebb6372e-12731070469e16d282b7a6fd\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": true, \"max\": null, \"mid_range\": 0.8, \"min\": null, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"16c19da5156b47e9a588b36d33a4516a\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "0d45a21b-168c-4eeb-9bd0-b82b7b3de279"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4259b91a-1889-4bf9-bb89-ea1da4e1189e",
                "data": "{\"header\": {\"msg_id\": \"1ff8bb05-1a7ea5c0956401c0dc5aefb9\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.300488Z\", \"version\": \"5.3\"}, \"msg_id\": \"1ff8bb05-1a7ea5c0956401c0dc5aefb9\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"LinearScaleModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"LinearScale\", \"allow_padding\": true, \"max\": null, \"mid_range\": 0.8, \"min\": null, \"min_range\": 0.6, \"reverse\": false, \"stabilized\": false}, \"buffer_paths\": []}, \"comm_id\": \"f800c3f42d3d4c9e819fd412ccf3fd92\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4259b91a-1889-4bf9-bb89-ea1da4e1189e"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_binary_msg",
            "payload": {
                "id": "c45dfc6a-841b-461e-948e-32653d3ada72",
                "data": [
                    [
                        0,
                        0,
                        0,
                        4,
                        0,
                        0,
                        0,
                        20,
                        0,
                        0,
                        9,
                        89,
                        0,
                        0,
                        9,
                        97,
                        0,
                        0,
                        10,
                        241,
                        123,
                        34,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        98,
                        50,
                        100,
                        51,
                        54,
                        52,
                        97,
                        45,
                        52,
                        100,
                        97,
                        102,
                        56,
                        57,
                        51,
                        100,
                        102,
                        57,
                        55,
                        55,
                        50,
                        49,
                        52,
                        56,
                        51,
                        98,
                        98,
                        53,
                        99,
                        101,
                        54,
                        51,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        111,
                        112,
                        101,
                        110,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        98,
                        56,
                        102,
                        97,
                        55,
                        99,
                        55,
                        49,
                        45,
                        51,
                        54,
                        56,
                        57,
                        49,
                        52,
                        100,
                        50,
                        102,
                        53,
                        52,
                        56,
                        51,
                        54,
                        51,
                        56,
                        50,
                        51,
                        98,
                        101,
                        57,
                        99,
                        48,
                        98,
                        34,
                        44,
                        32,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        50,
                        57,
                        46,
                        51,
                        48,
                        51,
                        52,
                        56,
                        56,
                        90,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        51,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        98,
                        50,
                        100,
                        51,
                        54,
                        52,
                        97,
                        45,
                        52,
                        100,
                        97,
                        102,
                        56,
                        57,
                        51,
                        100,
                        102,
                        57,
                        55,
                        55,
                        50,
                        49,
                        52,
                        56,
                        51,
                        98,
                        98,
                        53,
                        99,
                        101,
                        54,
                        51,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        111,
                        112,
                        101,
                        110,
                        34,
                        44,
                        32,
                        34,
                        112,
                        97,
                        114,
                        101,
                        110,
                        116,
                        95,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        50,
                        56,
                        46,
                        55,
                        53,
                        48,
                        48,
                        48,
                        48,
                        90,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        101,
                        57,
                        55,
                        54,
                        99,
                        48,
                        99,
                        101,
                        45,
                        98,
                        48,
                        48,
                        56,
                        45,
                        52,
                        98,
                        97,
                        57,
                        45,
                        97,
                        49,
                        101,
                        100,
                        45,
                        49,
                        100,
                        100,
                        97,
                        57,
                        49,
                        56,
                        53,
                        50,
                        51,
                        49,
                        100,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        101,
                        120,
                        101,
                        99,
                        117,
                        116,
                        101,
                        95,
                        114,
                        101,
                        113,
                        117,
                        101,
                        115,
                        116,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        52,
                        55,
                        56,
                        51,
                        52,
                        54,
                        52,
                        53,
                        45,
                        50,
                        57,
                        48,
                        55,
                        45,
                        52,
                        56,
                        52,
                        101,
                        45,
                        57,
                        48,
                        49,
                        54,
                        45,
                        57,
                        51,
                        101,
                        56,
                        101,
                        56,
                        53,
                        102,
                        54,
                        50,
                        50,
                        50,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        50,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        101,
                        116,
                        97,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        50,
                        46,
                        48,
                        46,
                        48,
                        34,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        110,
                        116,
                        101,
                        110,
                        116,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        115,
                        116,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        34,
                        98,
                        113,
                        112,
                        108,
                        111,
                        116,
                        34,
                        44,
                        32,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        95,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        94,
                        48,
                        46,
                        53,
                        46,
                        54,
                        34,
                        44,
                        32,
                        34,
                        95,
                        109,
                        111,
                        100,
                        101,
                        108,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        83,
                        99,
                        97,
                        116,
                        116,
                        101,
                        114,
                        77,
                        111,
                        100,
                        101,
                        108,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        99,
                        111,
                        117,
                        110,
                        116,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        34,
                        98,
                        113,
                        112,
                        108,
                        111,
                        116,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        95,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        94,
                        48,
                        46,
                        53,
                        46,
                        54,
                        34,
                        44,
                        32,
                        34,
                        95,
                        118,
                        105,
                        101,
                        119,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        83,
                        99,
                        97,
                        116,
                        116,
                        101,
                        114,
                        34,
                        44,
                        32,
                        34,
                        97,
                        112,
                        112,
                        108,
                        121,
                        95,
                        99,
                        108,
                        105,
                        112,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        115,
                        34,
                        58,
                        32,
                        91,
                        34,
                        115,
                        116,
                        101,
                        101,
                        108,
                        98,
                        108,
                        117,
                        101,
                        34,
                        93,
                        44,
                        32,
                        34,
                        100,
                        101,
                        102,
                        97,
                        117,
                        108,
                        116,
                        95,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        105,
                        101,
                        115,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        102,
                        108,
                        111,
                        97,
                        116,
                        54,
                        52,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        44,
                        32,
                        34,
                        100,
                        101,
                        102,
                        97,
                        117,
                        108,
                        116,
                        95,
                        115,
                        105,
                        122,
                        101,
                        34,
                        58,
                        32,
                        54,
                        52,
                        44,
                        32,
                        34,
                        100,
                        101,
                        102,
                        97,
                        117,
                        108,
                        116,
                        95,
                        115,
                        107,
                        101,
                        119,
                        34,
                        58,
                        32,
                        48,
                        46,
                        53,
                        44,
                        32,
                        34,
                        100,
                        105,
                        115,
                        112,
                        108,
                        97,
                        121,
                        95,
                        108,
                        101,
                        103,
                        101,
                        110,
                        100,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        100,
                        105,
                        115,
                        112,
                        108,
                        97,
                        121,
                        95,
                        110,
                        97,
                        109,
                        101,
                        115,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        100,
                        114,
                        97,
                        103,
                        95,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        100,
                        114,
                        97,
                        103,
                        95,
                        115,
                        105,
                        122,
                        101,
                        34,
                        58,
                        32,
                        53,
                        46,
                        48,
                        44,
                        32,
                        34,
                        101,
                        110,
                        97,
                        98,
                        108,
                        101,
                        95,
                        100,
                        101,
                        108,
                        101,
                        116,
                        101,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        101,
                        110,
                        97,
                        98,
                        108,
                        101,
                        95,
                        104,
                        111,
                        118,
                        101,
                        114,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        101,
                        110,
                        97,
                        98,
                        108,
                        101,
                        95,
                        109,
                        111,
                        118,
                        101,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        102,
                        105,
                        108,
                        108,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        104,
                        111,
                        118,
                        101,
                        114,
                        101,
                        100,
                        95,
                        112,
                        111,
                        105,
                        110,
                        116,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        104,
                        111,
                        118,
                        101,
                        114,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        105,
                        110,
                        116,
                        101,
                        114,
                        97,
                        99,
                        116,
                        105,
                        111,
                        110,
                        115,
                        34,
                        58,
                        32,
                        123,
                        34,
                        104,
                        111,
                        118,
                        101,
                        114,
                        34,
                        58,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        34,
                        125,
                        44,
                        32,
                        34,
                        108,
                        97,
                        98,
                        101,
                        108,
                        115,
                        34,
                        58,
                        32,
                        91,
                        93,
                        44,
                        32,
                        34,
                        109,
                        97,
                        114,
                        107,
                        101,
                        114,
                        34,
                        58,
                        32,
                        34,
                        99,
                        105,
                        114,
                        99,
                        108,
                        101,
                        34,
                        44,
                        32,
                        34,
                        110,
                        97,
                        109,
                        101,
                        115,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        110,
                        97,
                        109,
                        101,
                        115,
                        95,
                        117,
                        110,
                        105,
                        113,
                        117,
                        101,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        121,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        112,
                        114,
                        101,
                        115,
                        101,
                        114,
                        118,
                        101,
                        95,
                        100,
                        111,
                        109,
                        97,
                        105,
                        110,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        114,
                        101,
                        115,
                        116,
                        114,
                        105,
                        99,
                        116,
                        95,
                        120,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        114,
                        101,
                        115,
                        116,
                        114,
                        105,
                        99,
                        116,
                        95,
                        121,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        114,
                        111,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        99,
                        97,
                        108,
                        101,
                        115,
                        34,
                        58,
                        32,
                        123,
                        34,
                        120,
                        34,
                        58,
                        32,
                        34,
                        73,
                        80,
                        89,
                        95,
                        77,
                        79,
                        68,
                        69,
                        76,
                        95,
                        49,
                        54,
                        99,
                        49,
                        57,
                        100,
                        97,
                        53,
                        49,
                        53,
                        54,
                        98,
                        52,
                        55,
                        101,
                        57,
                        97,
                        53,
                        56,
                        56,
                        98,
                        51,
                        54,
                        100,
                        51,
                        51,
                        97,
                        52,
                        53,
                        49,
                        54,
                        97,
                        34,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        34,
                        73,
                        80,
                        89,
                        95,
                        77,
                        79,
                        68,
                        69,
                        76,
                        95,
                        102,
                        56,
                        48,
                        48,
                        99,
                        51,
                        102,
                        52,
                        50,
                        100,
                        51,
                        100,
                        52,
                        99,
                        57,
                        101,
                        56,
                        49,
                        57,
                        102,
                        100,
                        52,
                        49,
                        50,
                        99,
                        99,
                        102,
                        51,
                        102,
                        100,
                        57,
                        50,
                        34,
                        125,
                        44,
                        32,
                        34,
                        115,
                        99,
                        97,
                        108,
                        101,
                        115,
                        95,
                        109,
                        101,
                        116,
                        97,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        120,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        114,
                        105,
                        101,
                        110,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        104,
                        111,
                        114,
                        105,
                        122,
                        111,
                        110,
                        116,
                        97,
                        108,
                        34,
                        44,
                        32,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        120,
                        34,
                        125,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        114,
                        105,
                        101,
                        110,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        118,
                        101,
                        114,
                        116,
                        105,
                        99,
                        97,
                        108,
                        34,
                        44,
                        32,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        121,
                        34,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        108,
                        111,
                        114,
                        34,
                        125,
                        44,
                        32,
                        34,
                        115,
                        105,
                        122,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        115,
                        105,
                        122,
                        101,
                        34,
                        125,
                        44,
                        32,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        121,
                        34,
                        125,
                        44,
                        32,
                        34,
                        114,
                        111,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        114,
                        111,
                        116,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        125,
                        44,
                        32,
                        34,
                        115,
                        107,
                        101,
                        119,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        105,
                        109,
                        101,
                        110,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        115,
                        107,
                        101,
                        119,
                        34,
                        125,
                        125,
                        44,
                        32,
                        34,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        115,
                        105,
                        122,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        107,
                        101,
                        119,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        116,
                        114,
                        111,
                        107,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        115,
                        116,
                        114,
                        111,
                        107,
                        101,
                        95,
                        119,
                        105,
                        100,
                        116,
                        104,
                        34,
                        58,
                        32,
                        49,
                        46,
                        53,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        95,
                        108,
                        111,
                        99,
                        97,
                        116,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        109,
                        111,
                        117,
                        115,
                        101,
                        34,
                        44,
                        32,
                        34,
                        116,
                        111,
                        111,
                        108,
                        116,
                        105,
                        112,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        121,
                        34,
                        58,
                        32,
                        48,
                        46,
                        57,
                        125,
                        44,
                        32,
                        34,
                        117,
                        110,
                        104,
                        111,
                        118,
                        101,
                        114,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        117,
                        110,
                        115,
                        101,
                        108,
                        101,
                        99,
                        116,
                        101,
                        100,
                        95,
                        115,
                        116,
                        121,
                        108,
                        101,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        117,
                        112,
                        100,
                        97,
                        116,
                        101,
                        95,
                        111,
                        110,
                        95,
                        109,
                        111,
                        118,
                        101,
                        34,
                        58,
                        32,
                        102,
                        97,
                        108,
                        115,
                        101,
                        44,
                        32,
                        34,
                        118,
                        105,
                        115,
                        105,
                        98,
                        108,
                        101,
                        34,
                        58,
                        32,
                        116,
                        114,
                        117,
                        101,
                        44,
                        32,
                        34,
                        120,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        105,
                        110,
                        116,
                        51,
                        50,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        48,
                        48,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        44,
                        32,
                        34,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        102,
                        108,
                        111,
                        97,
                        116,
                        54,
                        52,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        48,
                        48,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        125,
                        44,
                        32,
                        34,
                        98,
                        117,
                        102,
                        102,
                        101,
                        114,
                        95,
                        112,
                        97,
                        116,
                        104,
                        115,
                        34,
                        58,
                        32,
                        91,
                        91,
                        34,
                        100,
                        101,
                        102,
                        97,
                        117,
                        108,
                        116,
                        95,
                        111,
                        112,
                        97,
                        99,
                        105,
                        116,
                        105,
                        101,
                        115,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        44,
                        32,
                        91,
                        34,
                        120,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        44,
                        32,
                        91,
                        34,
                        121,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        93,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        53,
                        51,
                        99,
                        50,
                        51,
                        99,
                        48,
                        55,
                        100,
                        53,
                        54,
                        52,
                        53,
                        57,
                        54,
                        56,
                        56,
                        54,
                        52,
                        55,
                        48,
                        102,
                        102,
                        99,
                        52,
                        100,
                        49,
                        102,
                        53,
                        102,
                        97,
                        34,
                        44,
                        32,
                        34,
                        116,
                        97,
                        114,
                        103,
                        101,
                        116,
                        95,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        106,
                        117,
                        112,
                        121,
                        116,
                        101,
                        114,
                        46,
                        119,
                        105,
                        100,
                        103,
                        101,
                        116,
                        34,
                        44,
                        32,
                        34,
                        116,
                        97,
                        114,
                        103,
                        101,
                        116,
                        95,
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        44,
                        32,
                        34,
                        99,
                        104,
                        97,
                        110,
                        110,
                        101,
                        108,
                        34,
                        58,
                        32,
                        34,
                        105,
                        111,
                        112,
                        117,
                        98,
                        34,
                        125,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        240,
                        63,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        3,
                        0,
                        0,
                        0,
                        4,
                        0,
                        0,
                        0,
                        5,
                        0,
                        0,
                        0,
                        6,
                        0,
                        0,
                        0,
                        7,
                        0,
                        0,
                        0,
                        8,
                        0,
                        0,
                        0,
                        9,
                        0,
                        0,
                        0,
                        10,
                        0,
                        0,
                        0,
                        11,
                        0,
                        0,
                        0,
                        12,
                        0,
                        0,
                        0,
                        13,
                        0,
                        0,
                        0,
                        14,
                        0,
                        0,
                        0,
                        15,
                        0,
                        0,
                        0,
                        16,
                        0,
                        0,
                        0,
                        17,
                        0,
                        0,
                        0,
                        18,
                        0,
                        0,
                        0,
                        19,
                        0,
                        0,
                        0,
                        20,
                        0,
                        0,
                        0,
                        21,
                        0,
                        0,
                        0,
                        22,
                        0,
                        0,
                        0,
                        23,
                        0,
                        0,
                        0,
                        24,
                        0,
                        0,
                        0,
                        25,
                        0,
                        0,
                        0,
                        26,
                        0,
                        0,
                        0,
                        27,
                        0,
                        0,
                        0,
                        28,
                        0,
                        0,
                        0,
                        29,
                        0,
                        0,
                        0,
                        30,
                        0,
                        0,
                        0,
                        31,
                        0,
                        0,
                        0,
                        32,
                        0,
                        0,
                        0,
                        33,
                        0,
                        0,
                        0,
                        34,
                        0,
                        0,
                        0,
                        35,
                        0,
                        0,
                        0,
                        36,
                        0,
                        0,
                        0,
                        37,
                        0,
                        0,
                        0,
                        38,
                        0,
                        0,
                        0,
                        39,
                        0,
                        0,
                        0,
                        40,
                        0,
                        0,
                        0,
                        41,
                        0,
                        0,
                        0,
                        42,
                        0,
                        0,
                        0,
                        43,
                        0,
                        0,
                        0,
                        44,
                        0,
                        0,
                        0,
                        45,
                        0,
                        0,
                        0,
                        46,
                        0,
                        0,
                        0,
                        47,
                        0,
                        0,
                        0,
                        48,
                        0,
                        0,
                        0,
                        49,
                        0,
                        0,
                        0,
                        50,
                        0,
                        0,
                        0,
                        51,
                        0,
                        0,
                        0,
                        52,
                        0,
                        0,
                        0,
                        53,
                        0,
                        0,
                        0,
                        54,
                        0,
                        0,
                        0,
                        55,
                        0,
                        0,
                        0,
                        56,
                        0,
                        0,
                        0,
                        57,
                        0,
                        0,
                        0,
                        58,
                        0,
                        0,
                        0,
                        59,
                        0,
                        0,
                        0,
                        60,
                        0,
                        0,
                        0,
                        61,
                        0,
                        0,
                        0,
                        62,
                        0,
                        0,
                        0,
                        63,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        65,
                        0,
                        0,
                        0,
                        66,
                        0,
                        0,
                        0,
                        67,
                        0,
                        0,
                        0,
                        68,
                        0,
                        0,
                        0,
                        69,
                        0,
                        0,
                        0,
                        70,
                        0,
                        0,
                        0,
                        71,
                        0,
                        0,
                        0,
                        72,
                        0,
                        0,
                        0,
                        73,
                        0,
                        0,
                        0,
                        74,
                        0,
                        0,
                        0,
                        75,
                        0,
                        0,
                        0,
                        76,
                        0,
                        0,
                        0,
                        77,
                        0,
                        0,
                        0,
                        78,
                        0,
                        0,
                        0,
                        79,
                        0,
                        0,
                        0,
                        80,
                        0,
                        0,
                        0,
                        81,
                        0,
                        0,
                        0,
                        82,
                        0,
                        0,
                        0,
                        83,
                        0,
                        0,
                        0,
                        84,
                        0,
                        0,
                        0,
                        85,
                        0,
                        0,
                        0,
                        86,
                        0,
                        0,
                        0,
                        87,
                        0,
                        0,
                        0,
                        88,
                        0,
                        0,
                        0,
                        89,
                        0,
                        0,
                        0,
                        90,
                        0,
                        0,
                        0,
                        91,
                        0,
                        0,
                        0,
                        92,
                        0,
                        0,
                        0,
                        93,
                        0,
                        0,
                        0,
                        94,
                        0,
                        0,
                        0,
                        95,
                        0,
                        0,
                        0,
                        96,
                        0,
                        0,
                        0,
                        97,
                        0,
                        0,
                        0,
                        98,
                        0,
                        0,
                        0,
                        99,
                        0,
                        0,
                        0,
                        57,
                        138,
                        139,
                        174,
                        247,
                        12,
                        102,
                        64,
                        11,
                        125,
                        135,
                        119,
                        120,
                        13,
                        107,
                        64,
                        233,
                        137,
                        206,
                        79,
                        183,
                        164,
                        115,
                        64,
                        55,
                        4,
                        68,
                        149,
                        18,
                        211,
                        128,
                        64,
                        76,
                        162,
                        158,
                        117,
                        30,
                        169,
                        134,
                        64,
                        147,
                        119,
                        28,
                        243,
                        75,
                        155,
                        131,
                        64,
                        55,
                        104,
                        188,
                        14,
                        94,
                        147,
                        134,
                        64,
                        61,
                        254,
                        238,
                        25,
                        72,
                        26,
                        134,
                        64,
                        9,
                        139,
                        101,
                        225,
                        180,
                        199,
                        133,
                        64,
                        142,
                        148,
                        34,
                        116,
                        47,
                        16,
                        135,
                        64,
                        146,
                        0,
                        184,
                        147,
                        107,
                        131,
                        135,
                        64,
                        188,
                        132,
                        143,
                        202,
                        214,
                        14,
                        140,
                        64,
                        152,
                        171,
                        62,
                        81,
                        171,
                        111,
                        142,
                        64,
                        41,
                        121,
                        89,
                        92,
                        2,
                        209,
                        142,
                        64,
                        245,
                        211,
                        128,
                        198,
                        12,
                        26,
                        144,
                        64,
                        222,
                        110,
                        202,
                        6,
                        133,
                        159,
                        144,
                        64,
                        213,
                        2,
                        63,
                        185,
                        38,
                        245,
                        146,
                        64,
                        136,
                        219,
                        116,
                        132,
                        22,
                        163,
                        146,
                        64,
                        85,
                        37,
                        106,
                        166,
                        80,
                        32,
                        147,
                        64,
                        203,
                        247,
                        16,
                        63,
                        173,
                        202,
                        145,
                        64,
                        215,
                        24,
                        173,
                        45,
                        246,
                        154,
                        139,
                        64,
                        226,
                        243,
                        74,
                        68,
                        219,
                        165,
                        141,
                        64,
                        254,
                        17,
                        112,
                        230,
                        179,
                        44,
                        144,
                        64,
                        80,
                        35,
                        116,
                        103,
                        172,
                        7,
                        142,
                        64,
                        71,
                        134,
                        87,
                        19,
                        189,
                        143,
                        146,
                        64,
                        156,
                        59,
                        205,
                        7,
                        254,
                        73,
                        144,
                        64,
                        224,
                        172,
                        224,
                        179,
                        75,
                        92,
                        144,
                        64,
                        191,
                        60,
                        143,
                        19,
                        108,
                        17,
                        144,
                        64,
                        1,
                        20,
                        255,
                        170,
                        136,
                        118,
                        146,
                        64,
                        2,
                        185,
                        136,
                        1,
                        71,
                        194,
                        148,
                        64,
                        17,
                        140,
                        84,
                        159,
                        65,
                        0,
                        149,
                        64,
                        201,
                        85,
                        226,
                        118,
                        133,
                        151,
                        149,
                        64,
                        74,
                        115,
                        46,
                        52,
                        104,
                        52,
                        148,
                        64,
                        169,
                        173,
                        62,
                        165,
                        22,
                        28,
                        145,
                        64,
                        231,
                        94,
                        255,
                        112,
                        236,
                        144,
                        144,
                        64,
                        222,
                        200,
                        105,
                        147,
                        118,
                        207,
                        144,
                        64,
                        134,
                        32,
                        111,
                        87,
                        148,
                        187,
                        146,
                        64,
                        234,
                        247,
                        189,
                        9,
                        136,
                        156,
                        148,
                        64,
                        140,
                        171,
                        158,
                        197,
                        153,
                        1,
                        148,
                        64,
                        200,
                        38,
                        101,
                        248,
                        173,
                        136,
                        147,
                        64,
                        252,
                        51,
                        140,
                        37,
                        66,
                        229,
                        145,
                        64,
                        78,
                        170,
                        171,
                        158,
                        128,
                        90,
                        143,
                        64,
                        3,
                        175,
                        25,
                        124,
                        124,
                        5,
                        138,
                        64,
                        79,
                        40,
                        146,
                        164,
                        13,
                        15,
                        144,
                        64,
                        230,
                        209,
                        213,
                        132,
                        98,
                        134,
                        142,
                        64,
                        110,
                        19,
                        228,
                        230,
                        236,
                        39,
                        141,
                        64,
                        114,
                        151,
                        132,
                        105,
                        176,
                        61,
                        137,
                        64,
                        54,
                        194,
                        226,
                        111,
                        174,
                        171,
                        139,
                        64,
                        65,
                        109,
                        106,
                        40,
                        144,
                        160,
                        134,
                        64,
                        143,
                        252,
                        207,
                        242,
                        94,
                        246,
                        133,
                        64,
                        211,
                        165,
                        145,
                        101,
                        255,
                        41,
                        131,
                        64,
                        209,
                        170,
                        63,
                        7,
                        133,
                        95,
                        132,
                        64,
                        37,
                        37,
                        218,
                        34,
                        224,
                        198,
                        130,
                        64,
                        254,
                        248,
                        100,
                        84,
                        189,
                        44,
                        126,
                        64,
                        79,
                        116,
                        145,
                        227,
                        165,
                        255,
                        125,
                        64,
                        70,
                        252,
                        193,
                        79,
                        125,
                        86,
                        128,
                        64,
                        114,
                        25,
                        232,
                        9,
                        180,
                        139,
                        128,
                        64,
                        148,
                        242,
                        137,
                        72,
                        174,
                        125,
                        129,
                        64,
                        45,
                        21,
                        181,
                        60,
                        114,
                        4,
                        127,
                        64,
                        233,
                        232,
                        158,
                        116,
                        15,
                        192,
                        124,
                        64,
                        243,
                        214,
                        248,
                        167,
                        31,
                        140,
                        120,
                        64,
                        231,
                        102,
                        97,
                        174,
                        214,
                        76,
                        118,
                        64,
                        7,
                        223,
                        203,
                        246,
                        205,
                        55,
                        113,
                        64,
                        212,
                        198,
                        198,
                        112,
                        2,
                        183,
                        89,
                        64,
                        212,
                        168,
                        151,
                        110,
                        137,
                        38,
                        94,
                        64,
                        12,
                        100,
                        206,
                        139,
                        35,
                        27,
                        84,
                        64,
                        116,
                        235,
                        240,
                        108,
                        33,
                        166,
                        84,
                        192,
                        69,
                        57,
                        201,
                        244,
                        165,
                        40,
                        66,
                        192,
                        168,
                        30,
                        73,
                        158,
                        8,
                        195,
                        95,
                        192,
                        160,
                        16,
                        38,
                        72,
                        149,
                        118,
                        94,
                        192,
                        32,
                        100,
                        9,
                        156,
                        206,
                        120,
                        72,
                        192,
                        196,
                        23,
                        85,
                        104,
                        211,
                        5,
                        66,
                        192,
                        115,
                        74,
                        182,
                        96,
                        64,
                        121,
                        83,
                        64,
                        16,
                        47,
                        25,
                        126,
                        68,
                        203,
                        70,
                        192,
                        208,
                        218,
                        218,
                        56,
                        91,
                        106,
                        21,
                        192,
                        9,
                        170,
                        235,
                        141,
                        110,
                        117,
                        82,
                        192,
                        232,
                        168,
                        66,
                        77,
                        68,
                        29,
                        100,
                        192,
                        214,
                        244,
                        121,
                        242,
                        149,
                        89,
                        107,
                        192,
                        156,
                        222,
                        15,
                        200,
                        141,
                        62,
                        111,
                        192,
                        81,
                        77,
                        21,
                        34,
                        211,
                        138,
                        110,
                        192,
                        65,
                        141,
                        252,
                        240,
                        166,
                        141,
                        118,
                        192,
                        43,
                        79,
                        140,
                        105,
                        84,
                        236,
                        112,
                        192,
                        18,
                        101,
                        106,
                        39,
                        138,
                        6,
                        108,
                        192,
                        254,
                        125,
                        170,
                        125,
                        66,
                        157,
                        119,
                        192,
                        115,
                        20,
                        220,
                        200,
                        28,
                        160,
                        108,
                        192,
                        128,
                        187,
                        133,
                        124,
                        17,
                        181,
                        67,
                        192,
                        82,
                        57,
                        200,
                        180,
                        167,
                        157,
                        83,
                        64,
                        68,
                        214,
                        218,
                        181,
                        69,
                        60,
                        78,
                        64,
                        134,
                        221,
                        211,
                        122,
                        92,
                        77,
                        71,
                        192,
                        228,
                        33,
                        99,
                        240,
                        158,
                        107,
                        77,
                        64,
                        232,
                        43,
                        55,
                        112,
                        233,
                        133,
                        50,
                        64,
                        28,
                        130,
                        115,
                        46,
                        144,
                        152,
                        97,
                        64,
                        218,
                        50,
                        34,
                        11,
                        11,
                        51,
                        100,
                        64,
                        159,
                        176,
                        255,
                        222,
                        36,
                        52,
                        112,
                        64,
                        119,
                        140,
                        32,
                        140,
                        84,
                        110,
                        114,
                        64,
                        78,
                        165,
                        196,
                        234,
                        216,
                        216,
                        118,
                        64,
                        128,
                        170,
                        189,
                        185,
                        165,
                        233,
                        118,
                        64,
                        203,
                        66,
                        210,
                        35,
                        133,
                        9,
                        129,
                        64,
                        248,
                        25,
                        140,
                        188,
                        12,
                        111,
                        129,
                        64,
                        218,
                        69,
                        124,
                        40,
                        164,
                        176,
                        130,
                        64
                    ]
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c45dfc6a-841b-461e-948e-32653d3ada72"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "cbd54008-d5d9-4d36-95ae-17138379be06",
                "data": "{\"header\": {\"msg_id\": \"35f3d9c4-6c7992a4b9183c13faa0c333\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.303488Z\", \"version\": \"5.3\"}, \"msg_id\": \"35f3d9c4-6c7992a4b9183c13faa0c333\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"marks\": [\"IPY_MODEL_553c23c07d564596886470ffc4d1f5fa\"]}, \"buffer_paths\": []}, \"comm_id\": \"107dc7a1ad9b400f8f77a23de0a80319\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "cbd54008-d5d9-4d36-95ae-17138379be06"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "d18d4e43-224c-4cd5-a20f-b311b449f6e7",
                "data": "{\"header\": {\"msg_id\": \"06ceb729-d4e3f0d0676fc7fb90a96bd2\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.310489Z\", \"version\": \"5.3\"}, \"msg_id\": \"06ceb729-d4e3f0d0676fc7fb90a96bd2\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:29.295459Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 4, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d18d4e43-224c-4cd5-a20f-b311b449f6e7"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "f5b6122a-141d-486b-9cf7-93ad8c8e1d34",
                "data": "{\"header\": {\"msg_id\": \"a7740828-e78804524bdb8d0bf3b2d558\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.305495Z\", \"version\": \"5.3\"}, \"msg_id\": \"a7740828-e78804524bdb8d0bf3b2d558\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"AxisModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Axis\", \"color\": null, \"grid_color\": null, \"grid_lines\": \"solid\", \"label\": \"\", \"label_color\": null, \"label_location\": \"middle\", \"label_offset\": null, \"num_ticks\": null, \"offset\": {}, \"orientation\": \"horizontal\", \"scale\": \"IPY_MODEL_16c19da5156b47e9a588b36d33a4516a\", \"side\": null, \"tick_format\": null, \"tick_rotate\": 0, \"tick_style\": {}, \"tick_values\": null, \"visible\": true}, \"buffer_paths\": []}, \"comm_id\": \"51e5b4011d504a18b47a1b588aee7d7b\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "f5b6122a-141d-486b-9cf7-93ad8c8e1d34"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4a4f5ab6-f2c1-446b-adab-d8404b5f09d0",
                "data": "{\"header\": {\"msg_id\": \"c09ed7a9-2727bc5cd4352cbacf0bdd1f\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.306494Z\", \"version\": \"5.3\"}, \"msg_id\": \"c09ed7a9-2727bc5cd4352cbacf0bdd1f\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"bqplot\", \"_model_module_version\": \"^0.5.6\", \"_model_name\": \"AxisModel\", \"_view_count\": null, \"_view_module\": \"bqplot\", \"_view_module_version\": \"^0.5.6\", \"_view_name\": \"Axis\", \"color\": null, \"grid_color\": null, \"grid_lines\": \"solid\", \"label\": \"\", \"label_color\": null, \"label_location\": \"middle\", \"label_offset\": null, \"num_ticks\": null, \"offset\": {}, \"orientation\": \"vertical\", \"scale\": \"IPY_MODEL_f800c3f42d3d4c9e819fd412ccf3fd92\", \"side\": null, \"tick_format\": null, \"tick_rotate\": 0, \"tick_style\": {}, \"tick_values\": null, \"visible\": true}, \"buffer_paths\": []}, \"comm_id\": \"b5d7e76ed712471ebc2cbaaa0e3f84b8\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"51e5b4011d504a18b47a1b588aee7d7b\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"bottom\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:33.351Z\",\"msg_id\":\"5ac9e689-4aec-4e3a-a137-92c86b54601d\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4a4f5ab6-f2c1-446b-adab-d8404b5f09d0"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "878cf727-2a93-4a98-9724-7d2ba93aada1",
                "data": "{\"header\": {\"msg_id\": \"a9ef4e22-1c2c337cc878e53f5b00d7cd\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.306494Z\", \"version\": \"5.3\"}, \"msg_id\": \"a9ef4e22-1c2c337cc878e53f5b00d7cd\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"axes\": [\"IPY_MODEL_51e5b4011d504a18b47a1b588aee7d7b\", \"IPY_MODEL_b5d7e76ed712471ebc2cbaaa0e3f84b8\"]}, \"buffer_paths\": []}, \"comm_id\": \"107dc7a1ad9b400f8f77a23de0a80319\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"b5d7e76ed712471ebc2cbaaa0e3f84b8\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"left\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:33.854Z\",\"msg_id\":\"e8feddb1-2872-4a0e-97e7-cf4dfdceb4a3\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "878cf727-2a93-4a98-9724-7d2ba93aada1"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_binary_msg",
            "payload": {
                "id": "6b3ecf68-80de-48e3-8573-c6241ced8eec",
                "data": [
                    [
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        12,
                        0,
                        0,
                        2,
                        235,
                        123,
                        34,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        100,
                        50,
                        101,
                        48,
                        98,
                        101,
                        55,
                        52,
                        45,
                        97,
                        54,
                        52,
                        52,
                        99,
                        51,
                        51,
                        56,
                        48,
                        57,
                        54,
                        99,
                        52,
                        98,
                        54,
                        52,
                        53,
                        56,
                        48,
                        99,
                        102,
                        98,
                        100,
                        54,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        109,
                        115,
                        103,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        98,
                        56,
                        102,
                        97,
                        55,
                        99,
                        55,
                        49,
                        45,
                        51,
                        54,
                        56,
                        57,
                        49,
                        52,
                        100,
                        50,
                        102,
                        53,
                        52,
                        56,
                        51,
                        54,
                        51,
                        56,
                        50,
                        51,
                        98,
                        101,
                        57,
                        99,
                        48,
                        98,
                        34,
                        44,
                        32,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        50,
                        57,
                        46,
                        51,
                        48,
                        55,
                        52,
                        54,
                        48,
                        90,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        51,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        100,
                        50,
                        101,
                        48,
                        98,
                        101,
                        55,
                        52,
                        45,
                        97,
                        54,
                        52,
                        52,
                        99,
                        51,
                        51,
                        56,
                        48,
                        57,
                        54,
                        99,
                        52,
                        98,
                        54,
                        52,
                        53,
                        56,
                        48,
                        99,
                        102,
                        98,
                        100,
                        54,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        109,
                        115,
                        103,
                        34,
                        44,
                        32,
                        34,
                        112,
                        97,
                        114,
                        101,
                        110,
                        116,
                        95,
                        104,
                        101,
                        97,
                        100,
                        101,
                        114,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        34,
                        50,
                        48,
                        50,
                        48,
                        45,
                        48,
                        52,
                        45,
                        48,
                        51,
                        84,
                        49,
                        55,
                        58,
                        52,
                        52,
                        58,
                        50,
                        56,
                        46,
                        55,
                        53,
                        48,
                        48,
                        48,
                        48,
                        90,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        101,
                        57,
                        55,
                        54,
                        99,
                        48,
                        99,
                        101,
                        45,
                        98,
                        48,
                        48,
                        56,
                        45,
                        52,
                        98,
                        97,
                        57,
                        45,
                        97,
                        49,
                        101,
                        100,
                        45,
                        49,
                        100,
                        100,
                        97,
                        57,
                        49,
                        56,
                        53,
                        50,
                        51,
                        49,
                        100,
                        34,
                        44,
                        32,
                        34,
                        109,
                        115,
                        103,
                        95,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        101,
                        120,
                        101,
                        99,
                        117,
                        116,
                        101,
                        95,
                        114,
                        101,
                        113,
                        117,
                        101,
                        115,
                        116,
                        34,
                        44,
                        32,
                        34,
                        115,
                        101,
                        115,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        52,
                        55,
                        56,
                        51,
                        52,
                        54,
                        52,
                        53,
                        45,
                        50,
                        57,
                        48,
                        55,
                        45,
                        52,
                        56,
                        52,
                        101,
                        45,
                        57,
                        48,
                        49,
                        54,
                        45,
                        57,
                        51,
                        101,
                        56,
                        101,
                        56,
                        53,
                        102,
                        54,
                        50,
                        50,
                        50,
                        34,
                        44,
                        32,
                        34,
                        117,
                        115,
                        101,
                        114,
                        110,
                        97,
                        109,
                        101,
                        34,
                        58,
                        32,
                        34,
                        34,
                        44,
                        32,
                        34,
                        118,
                        101,
                        114,
                        115,
                        105,
                        111,
                        110,
                        34,
                        58,
                        32,
                        34,
                        53,
                        46,
                        50,
                        34,
                        125,
                        44,
                        32,
                        34,
                        109,
                        101,
                        116,
                        97,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        110,
                        116,
                        101,
                        110,
                        116,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        97,
                        116,
                        97,
                        34,
                        58,
                        32,
                        123,
                        34,
                        109,
                        101,
                        116,
                        104,
                        111,
                        100,
                        34,
                        58,
                        32,
                        34,
                        117,
                        112,
                        100,
                        97,
                        116,
                        101,
                        34,
                        44,
                        32,
                        34,
                        115,
                        116,
                        97,
                        116,
                        101,
                        34,
                        58,
                        32,
                        123,
                        34,
                        121,
                        34,
                        58,
                        32,
                        123,
                        34,
                        100,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        34,
                        102,
                        108,
                        111,
                        97,
                        116,
                        54,
                        52,
                        34,
                        44,
                        32,
                        34,
                        115,
                        104,
                        97,
                        112,
                        101,
                        34,
                        58,
                        32,
                        91,
                        49,
                        48,
                        48,
                        93,
                        44,
                        32,
                        34,
                        116,
                        121,
                        112,
                        101,
                        34,
                        58,
                        32,
                        110,
                        117,
                        108,
                        108,
                        125,
                        125,
                        44,
                        32,
                        34,
                        98,
                        117,
                        102,
                        102,
                        101,
                        114,
                        95,
                        112,
                        97,
                        116,
                        104,
                        115,
                        34,
                        58,
                        32,
                        91,
                        91,
                        34,
                        121,
                        34,
                        44,
                        32,
                        34,
                        118,
                        97,
                        108,
                        117,
                        101,
                        34,
                        93,
                        93,
                        125,
                        44,
                        32,
                        34,
                        99,
                        111,
                        109,
                        109,
                        95,
                        105,
                        100,
                        34,
                        58,
                        32,
                        34,
                        53,
                        53,
                        51,
                        99,
                        50,
                        51,
                        99,
                        48,
                        55,
                        100,
                        53,
                        54,
                        52,
                        53,
                        57,
                        54,
                        56,
                        56,
                        54,
                        52,
                        55,
                        48,
                        102,
                        102,
                        99,
                        52,
                        100,
                        49,
                        102,
                        53,
                        102,
                        97,
                        34,
                        125,
                        44,
                        32,
                        34,
                        99,
                        104,
                        97,
                        110,
                        110,
                        101,
                        108,
                        34,
                        58,
                        32,
                        34,
                        105,
                        111,
                        112,
                        117,
                        98,
                        34,
                        125,
                        228,
                        51,
                        16,
                        13,
                        21,
                        138,
                        103,
                        64,
                        84,
                        22,
                        4,
                        80,
                        3,
                        197,
                        74,
                        64,
                        200,
                        211,
                        25,
                        247,
                        152,
                        96,
                        82,
                        192,
                        248,
                        143,
                        215,
                        103,
                        42,
                        110,
                        55,
                        64,
                        219,
                        139,
                        24,
                        201,
                        114,
                        120,
                        87,
                        192,
                        119,
                        221,
                        63,
                        42,
                        186,
                        30,
                        89,
                        64,
                        240,
                        84,
                        103,
                        167,
                        33,
                        143,
                        77,
                        64,
                        104,
                        218,
                        189,
                        22,
                        41,
                        65,
                        47,
                        192,
                        114,
                        25,
                        64,
                        138,
                        87,
                        21,
                        102,
                        64,
                        232,
                        100,
                        235,
                        160,
                        126,
                        75,
                        116,
                        64,
                        28,
                        75,
                        94,
                        199,
                        150,
                        247,
                        127,
                        64,
                        45,
                        44,
                        221,
                        85,
                        161,
                        208,
                        130,
                        64,
                        16,
                        216,
                        170,
                        80,
                        166,
                        31,
                        128,
                        64,
                        246,
                        148,
                        20,
                        158,
                        179,
                        23,
                        134,
                        64,
                        208,
                        9,
                        242,
                        134,
                        76,
                        65,
                        133,
                        64,
                        13,
                        83,
                        212,
                        152,
                        67,
                        195,
                        135,
                        64,
                        247,
                        34,
                        204,
                        204,
                        16,
                        185,
                        138,
                        64,
                        237,
                        246,
                        160,
                        187,
                        14,
                        61,
                        138,
                        64,
                        173,
                        234,
                        30,
                        48,
                        82,
                        40,
                        140,
                        64,
                        172,
                        83,
                        67,
                        29,
                        22,
                        10,
                        143,
                        64,
                        251,
                        78,
                        19,
                        8,
                        157,
                        27,
                        144,
                        64,
                        111,
                        65,
                        251,
                        199,
                        180,
                        199,
                        140,
                        64,
                        113,
                        188,
                        145,
                        245,
                        75,
                        182,
                        141,
                        64,
                        203,
                        24,
                        60,
                        229,
                        179,
                        237,
                        144,
                        64,
                        113,
                        178,
                        16,
                        75,
                        192,
                        175,
                        143,
                        64,
                        248,
                        98,
                        173,
                        35,
                        11,
                        56,
                        143,
                        64,
                        212,
                        16,
                        37,
                        177,
                        235,
                        219,
                        141,
                        64,
                        136,
                        255,
                        167,
                        115,
                        170,
                        209,
                        145,
                        64,
                        205,
                        159,
                        85,
                        111,
                        149,
                        222,
                        146,
                        64,
                        70,
                        249,
                        228,
                        134,
                        145,
                        129,
                        147,
                        64,
                        87,
                        214,
                        243,
                        30,
                        154,
                        77,
                        146,
                        64,
                        118,
                        227,
                        243,
                        60,
                        77,
                        37,
                        147,
                        64,
                        57,
                        104,
                        218,
                        146,
                        145,
                        23,
                        146,
                        64,
                        237,
                        8,
                        215,
                        5,
                        77,
                        36,
                        146,
                        64,
                        17,
                        38,
                        103,
                        98,
                        246,
                        37,
                        145,
                        64,
                        93,
                        182,
                        94,
                        39,
                        137,
                        52,
                        146,
                        64,
                        104,
                        76,
                        172,
                        13,
                        44,
                        27,
                        147,
                        64,
                        105,
                        90,
                        198,
                        66,
                        218,
                        199,
                        146,
                        64,
                        180,
                        169,
                        36,
                        89,
                        65,
                        102,
                        147,
                        64,
                        32,
                        92,
                        135,
                        217,
                        7,
                        177,
                        145,
                        64,
                        112,
                        38,
                        251,
                        36,
                        14,
                        185,
                        142,
                        64,
                        55,
                        221,
                        77,
                        200,
                        72,
                        12,
                        144,
                        64,
                        57,
                        51,
                        251,
                        37,
                        244,
                        78,
                        144,
                        64,
                        158,
                        156,
                        20,
                        94,
                        247,
                        76,
                        145,
                        64,
                        47,
                        122,
                        119,
                        100,
                        57,
                        6,
                        149,
                        64,
                        220,
                        204,
                        135,
                        23,
                        4,
                        128,
                        150,
                        64,
                        5,
                        115,
                        149,
                        24,
                        227,
                        18,
                        149,
                        64,
                        108,
                        207,
                        93,
                        144,
                        177,
                        209,
                        150,
                        64,
                        2,
                        243,
                        36,
                        165,
                        84,
                        195,
                        148,
                        64,
                        129,
                        12,
                        174,
                        97,
                        178,
                        10,
                        148,
                        64,
                        44,
                        246,
                        240,
                        112,
                        102,
                        239,
                        147,
                        64,
                        163,
                        55,
                        98,
                        188,
                        188,
                        156,
                        150,
                        64,
                        25,
                        153,
                        147,
                        215,
                        213,
                        114,
                        149,
                        64,
                        76,
                        19,
                        38,
                        137,
                        66,
                        40,
                        148,
                        64,
                        243,
                        220,
                        74,
                        255,
                        224,
                        0,
                        148,
                        64,
                        102,
                        56,
                        26,
                        210,
                        124,
                        247,
                        146,
                        64,
                        230,
                        162,
                        209,
                        86,
                        36,
                        186,
                        148,
                        64,
                        143,
                        58,
                        73,
                        90,
                        43,
                        10,
                        147,
                        64,
                        53,
                        86,
                        11,
                        144,
                        46,
                        63,
                        145,
                        64,
                        247,
                        105,
                        67,
                        202,
                        13,
                        144,
                        144,
                        64,
                        201,
                        155,
                        198,
                        136,
                        174,
                        145,
                        143,
                        64,
                        246,
                        160,
                        117,
                        89,
                        167,
                        204,
                        146,
                        64,
                        49,
                        180,
                        66,
                        10,
                        108,
                        72,
                        148,
                        64,
                        161,
                        209,
                        133,
                        73,
                        113,
                        107,
                        148,
                        64,
                        175,
                        108,
                        168,
                        176,
                        68,
                        129,
                        146,
                        64,
                        212,
                        107,
                        119,
                        117,
                        3,
                        211,
                        147,
                        64,
                        165,
                        141,
                        67,
                        104,
                        237,
                        66,
                        146,
                        64,
                        147,
                        38,
                        166,
                        177,
                        9,
                        178,
                        143,
                        64,
                        3,
                        94,
                        3,
                        25,
                        59,
                        180,
                        145,
                        64,
                        110,
                        80,
                        107,
                        5,
                        2,
                        51,
                        146,
                        64,
                        22,
                        37,
                        248,
                        246,
                        89,
                        163,
                        147,
                        64,
                        136,
                        149,
                        39,
                        173,
                        215,
                        34,
                        148,
                        64,
                        6,
                        27,
                        140,
                        33,
                        147,
                        121,
                        149,
                        64,
                        198,
                        249,
                        59,
                        28,
                        42,
                        117,
                        148,
                        64,
                        57,
                        191,
                        174,
                        164,
                        119,
                        215,
                        146,
                        64,
                        53,
                        204,
                        5,
                        236,
                        26,
                        232,
                        147,
                        64,
                        105,
                        221,
                        184,
                        197,
                        189,
                        166,
                        146,
                        64,
                        240,
                        60,
                        7,
                        224,
                        235,
                        146,
                        145,
                        64,
                        36,
                        160,
                        196,
                        88,
                        181,
                        220,
                        144,
                        64,
                        210,
                        53,
                        111,
                        54,
                        179,
                        227,
                        144,
                        64,
                        22,
                        127,
                        114,
                        60,
                        26,
                        86,
                        144,
                        64,
                        138,
                        171,
                        133,
                        114,
                        62,
                        96,
                        140,
                        64,
                        185,
                        242,
                        0,
                        102,
                        89,
                        93,
                        138,
                        64,
                        242,
                        252,
                        208,
                        110,
                        160,
                        106,
                        131,
                        64,
                        221,
                        22,
                        132,
                        213,
                        207,
                        94,
                        133,
                        64,
                        239,
                        8,
                        26,
                        109,
                        42,
                        93,
                        128,
                        64,
                        237,
                        61,
                        192,
                        111,
                        81,
                        211,
                        121,
                        64,
                        138,
                        28,
                        196,
                        64,
                        200,
                        38,
                        122,
                        64,
                        156,
                        104,
                        234,
                        63,
                        123,
                        135,
                        117,
                        64,
                        198,
                        172,
                        39,
                        7,
                        78,
                        44,
                        127,
                        64,
                        9,
                        61,
                        117,
                        214,
                        187,
                        23,
                        119,
                        64,
                        3,
                        34,
                        178,
                        223,
                        3,
                        195,
                        120,
                        64,
                        31,
                        191,
                        167,
                        161,
                        41,
                        132,
                        120,
                        64,
                        54,
                        17,
                        232,
                        136,
                        54,
                        55,
                        113,
                        64,
                        147,
                        119,
                        170,
                        167,
                        116,
                        124,
                        116,
                        64,
                        59,
                        202,
                        21,
                        71,
                        251,
                        105,
                        115,
                        64,
                        116,
                        241,
                        252,
                        175,
                        216,
                        60,
                        120,
                        64,
                        116,
                        168,
                        41,
                        253,
                        115,
                        98,
                        125,
                        64,
                        228,
                        221,
                        132,
                        183,
                        208,
                        115,
                        133,
                        64,
                        74,
                        13,
                        19,
                        164,
                        9,
                        161,
                        137,
                        64
                    ]
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "6b3ecf68-80de-48e3-8573-c6241ced8eec"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b9de7bfc-755a-4355-bef2-c9ff1e480168",
                "data": "{\"header\": {\"msg_id\": \"3bf19b5b-4c937df9e02119b8d19841da\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:29.310489Z\", \"version\": \"5.3\"}, \"msg_id\": \"3bf19b5b-4c937df9e02119b8d19841da\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:28.750000Z\", \"msg_id\": \"e976c0ce-b008-4ba9-a1ed-1dda9185231d\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b9de7bfc-755a-4355-bef2-c9ff1e480168"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "2db2d1bb-1017-4cb5-aaae-1459db7bb6a2",
                "data": "{\"header\": {\"msg_id\": \"b08a8666-87ba040e7c0ce4d395b5173f\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:33.353823Z\", \"version\": \"5.3\"}, \"msg_id\": \"b08a8666-87ba040e7c0ce4d395b5173f\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:33.351000Z\", \"msg_id\": \"5ac9e689-4aec-4e3a-a137-92c86b54601d\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Let's assign the scatter plot to a variable\n",
                        "scatter_plot = plt.scatter(x_data, y_data)\n",
                        "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                    ]
                },
                "id": "NotebookImport#5",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "2db2d1bb-1017-4cb5-aaae-1459db7bb6a2"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b936c04d-6d3e-4f49-af4d-782fa0b424fd",
                "data": "{\"header\": {\"msg_id\": \"895ced6e-d708e8c0449ace3c0ad9567c\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:33.354855Z\", \"version\": \"5.3\"}, \"msg_id\": \"895ced6e-d708e8c0449ace3c0ad9567c\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:33.351000Z\", \"msg_id\": \"5ac9e689-4aec-4e3a-a137-92c86b54601d\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Let's assign the scatter plot to a variable\n",
                                "scatter_plot = plt.scatter(x_data, y_data)\n",
                                "scatter_plot.y = np.cumsum(np.random.randn(size)  * 100.0)"
                            ]
                        },
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#5"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#8"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#7"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "394b11ae-3274-48ea-b984-1abda2e18d61",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "# Say, the color\nscatter_plot.colors = ['Red']"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:35.939Z",
                        "msg_id": "394b11ae-3274-48ea-b984-1abda2e18d61",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b936c04d-6d3e-4f49-af4d-782fa0b424fd"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "d9b8c468-f74f-4197-9607-0817451b4a78",
                "data": "{\"header\": {\"msg_id\": \"e6760877-2389ad8b695465d33d6a69c0\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:33.858362Z\", \"version\": \"5.3\"}, \"msg_id\": \"e6760877-2389ad8b695465d33d6a69c0\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:33.854000Z\", \"msg_id\": \"e8feddb1-2872-4a0e-97e7-cf4dfdceb4a3\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"51e5b4011d504a18b47a1b588aee7d7b\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"bottom\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:36.367Z\",\"msg_id\":\"ca012b97-c874-482a-b257-8c21984b4c84\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "394b11ae-3274-48ea-b984-1abda2e18d61"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d9b8c468-f74f-4197-9607-0817451b4a78"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b5e19cfa-6a49-4327-9e4b-dd3b5aafc837",
                "data": "{\"header\": {\"msg_id\": \"35b491b5-389dce015a0311b6561f433b\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:33.859361Z\", \"version\": \"5.3\"}, \"msg_id\": \"35b491b5-389dce015a0311b6561f433b\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:33.854000Z\", \"msg_id\": \"e8feddb1-2872-4a0e-97e7-cf4dfdceb4a3\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b5e19cfa-6a49-4327-9e4b-dd3b5aafc837"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b8e35bb2-8c5a-49fe-98a7-ba3c20351009",
                "data": "{\"header\": {\"msg_id\": \"05e49e0b-7dce691deb41be87fb35a93b\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.371259Z\", \"version\": \"5.3\"}, \"msg_id\": \"05e49e0b-7dce691deb41be87fb35a93b\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:36.367000Z\", \"msg_id\": \"ca012b97-c874-482a-b257-8c21984b4c84\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"b5d7e76ed712471ebc2cbaaa0e3f84b8\",\"data\":{\"method\":\"update\",\"state\":{\"side\":\"left\"},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:44:37.379Z\",\"msg_id\":\"27e59fb0-8535-45a6-a434-49dd3b7ed12b\",\"msg_type\":\"comm_msg\",\"session\":\"47834645-2907-484e-9016-93e8e85f6222\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b8e35bb2-8c5a-49fe-98a7-ba3c20351009"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ab1f443a-f79b-45b9-a2a9-32d874a7c066",
                "data": "{\"header\": {\"msg_id\": \"a2788ebd-dadbd1e16e4a0f07a76a1036\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.372258Z\", \"version\": \"5.3\"}, \"msg_id\": \"a2788ebd-dadbd1e16e4a0f07a76a1036\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:36.367000Z\", \"msg_id\": \"ca012b97-c874-482a-b257-8c21984b4c84\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ab1f443a-f79b-45b9-a2a9-32d874a7c066"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "9fbe17dc-4b38-42b9-80fc-bf22471197a3",
                "data": "{\"header\": {\"msg_id\": \"16296ecd-3d84a0d758987fea57cf4c4a\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.460258Z\", \"version\": \"5.3\"}, \"msg_id\": \"16296ecd-3d84a0d758987fea57cf4c4a\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:35.939000Z\", \"msg_id\": \"394b11ae-3274-48ea-b984-1abda2e18d61\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9fbe17dc-4b38-42b9-80fc-bf22471197a3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "2b5d9abc-f631-4a35-b8db-7de6c3640ca3",
                "data": "{\"header\": {\"msg_id\": \"7a763c24-05a306082cbbf25746a00cb1\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.460258Z\", \"version\": \"5.3\"}, \"msg_id\": \"7a763c24-05a306082cbbf25746a00cb1\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:35.939000Z\", \"msg_id\": \"394b11ae-3274-48ea-b984-1abda2e18d61\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"# Say, the color\\nscatter_plot.colors = ['Red']\", \"execution_count\": 5}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "2b5d9abc-f631-4a35-b8db-7de6c3640ca3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "93906758-b5bf-487a-83cb-4ec6ea3ce8f2",
                "data": "{\"header\": {\"msg_id\": \"405dc583-7dfbef7d3983094c4364b43a\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.461229Z\", \"version\": \"5.3\"}, \"msg_id\": \"405dc583-7dfbef7d3983094c4364b43a\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:35.939000Z\", \"msg_id\": \"394b11ae-3274-48ea-b984-1abda2e18d61\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"colors\": [\"Red\"]}, \"buffer_paths\": []}, \"comm_id\": \"553c23c07d564596886470ffc4d1f5fa\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 5,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "93906758-b5bf-487a-83cb-4ec6ea3ce8f2"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "e6ef8e24-f95c-4f16-bf22-eb8e2b62d88e",
                "data": "{\"header\": {\"msg_id\": \"93f1bc3e-99103125e5109ea4a41ca7cf\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.464232Z\", \"version\": \"5.3\"}, \"msg_id\": \"93f1bc3e-99103125e5109ea4a41ca7cf\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:35.939000Z\", \"msg_id\": \"394b11ae-3274-48ea-b984-1abda2e18d61\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:36.460258Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 5, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 5,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "e6ef8e24-f95c-4f16-bf22-eb8e2b62d88e"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 5,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "d2a8675c-353a-4e0f-960b-e1a20052a1a8",
                "data": "{\"header\": {\"msg_id\": \"a81feda9-c8dd7c90dd250a990d8d869d\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:36.464232Z\", \"version\": \"5.3\"}, \"msg_id\": \"a81feda9-c8dd7c90dd250a990d8d869d\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:35.939000Z\", \"msg_id\": \"394b11ae-3274-48ea-b984-1abda2e18d61\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d2a8675c-353a-4e0f-960b-e1a20052a1a8"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c2326bad-10df-44da-a05a-e2c0fd392616",
                "data": "{\"header\": {\"msg_id\": \"b9c1d670-983d60bba1b00e3952287ea4\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:37.384017Z\", \"version\": \"5.3\"}, \"msg_id\": \"b9c1d670-983d60bba1b00e3952287ea4\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:37.379000Z\", \"msg_id\": \"27e59fb0-8535-45a6-a434-49dd3b7ed12b\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 5,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 5,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "# Say, the color\n",
                        "scatter_plot.colors = ['Red']"
                    ]
                },
                "id": "NotebookImport#7",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c2326bad-10df-44da-a05a-e2c0fd392616"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "1ef25b64-0d99-400f-9fa6-05262900605b",
                "data": "{\"header\": {\"msg_id\": \"9557a384-98b7b4063dbbe4f996f3aca5\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:37.385017Z\", \"version\": \"5.3\"}, \"msg_id\": \"9557a384-98b7b4063dbbe4f996f3aca5\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:37.379000Z\", \"msg_id\": \"27e59fb0-8535-45a6-a434-49dd3b7ed12b\", \"msg_type\": \"comm_msg\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 5,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "# Say, the color\n",
                                "scatter_plot.colors = ['Red']"
                            ]
                        },
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#7"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 10,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#9"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#8"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "5a1d766b-2a63-4046-b58a-176de75797d8",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "scatter_plot.colors = ['yellow']"
                    },
                    "header": {
                        "date": "2020-04-03T17:44:41.497Z",
                        "msg_id": "5a1d766b-2a63-4046-b58a-176de75797d8",
                        "msg_type": "execute_request",
                        "session": "47834645-2907-484e-9016-93e8e85f6222",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "1ef25b64-0d99-400f-9fa6-05262900605b"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "5a1d766b-2a63-4046-b58a-176de75797d8"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "06339687-3f54-4ec0-bafa-d73b833f54d4",
                "data": "{\"header\": {\"msg_id\": \"8acb8312-6bb631fbd10e9bdd490eea20\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:42.006271Z\", \"version\": \"5.3\"}, \"msg_id\": \"8acb8312-6bb631fbd10e9bdd490eea20\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:41.497000Z\", \"msg_id\": \"5a1d766b-2a63-4046-b58a-176de75797d8\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "06339687-3f54-4ec0-bafa-d73b833f54d4"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "50b30b91-f3a2-46f2-af51-bacf9739242d",
                "data": "{\"header\": {\"msg_id\": \"4e1f846e-73ee9ab0aa9f311bd156f5f8\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:42.006271Z\", \"version\": \"5.3\"}, \"msg_id\": \"4e1f846e-73ee9ab0aa9f311bd156f5f8\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:44:41.497000Z\", \"msg_id\": \"5a1d766b-2a63-4046-b58a-176de75797d8\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"scatter_plot.colors = ['yellow']\", \"execution_count\": 6}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "50b30b91-f3a2-46f2-af51-bacf9739242d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "726088b8-9654-4350-be3a-81289fba7dcf",
                "data": "{\"header\": {\"msg_id\": \"edabc2d3-ee90ce6732fbdfa2d9bf9b1e\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:42.007273Z\", \"version\": \"5.3\"}, \"msg_id\": \"edabc2d3-ee90ce6732fbdfa2d9bf9b1e\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:44:41.497000Z\", \"msg_id\": \"5a1d766b-2a63-4046-b58a-176de75797d8\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"colors\": [\"yellow\"]}, \"buffer_paths\": []}, \"comm_id\": \"553c23c07d564596886470ffc4d1f5fa\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 6,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "726088b8-9654-4350-be3a-81289fba7dcf"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "1a48bca7-51f8-4544-aa9d-720877e8b682",
                "data": "{\"header\": {\"msg_id\": \"75f8a661-6b7b8b90178b4efd23ce2377\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:42.010273Z\", \"version\": \"5.3\"}, \"msg_id\": \"75f8a661-6b7b8b90178b4efd23ce2377\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:44:41.497000Z\", \"msg_id\": \"5a1d766b-2a63-4046-b58a-176de75797d8\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:44:42.006271Z\", \"dependencies_met\": true, \"engine\": \"435c31a2-ca2f-4cca-96c1-4d3b174fab01\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 6, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 6,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "1a48bca7-51f8-4544-aa9d-720877e8b682"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 6,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "bc982147-da11-4589-9493-68957e1ae297",
                "data": "{\"header\": {\"msg_id\": \"03ef2050-eb3b13ddd8ff8971ac00d4c0\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"b8fa7c71-368914d2f548363823be9c0b\", \"date\": \"2020-04-03T17:44:42.010273Z\", \"version\": \"5.3\"}, \"msg_id\": \"03ef2050-eb3b13ddd8ff8971ac00d4c0\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:44:41.497000Z\", \"msg_id\": \"5a1d766b-2a63-4046-b58a-176de75797d8\", \"msg_type\": \"execute_request\", \"session\": \"47834645-2907-484e-9016-93e8e85f6222\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "bc982147-da11-4589-9493-68957e1ae297"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 6,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 6,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "scatter_plot.colors = ['yellow']"
                    ]
                },
                "id": "NotebookImport#8",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 6,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "scatter_plot.colors = ['yellow']"
                            ]
                        },
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#8"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    }
]
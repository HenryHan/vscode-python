[
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "### pip install ipysheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 38,
                            "metadata": {
                                "scrolled": true
                            },
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image\n",
                                "import ipysheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 1. Test Rendering a Sheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 39,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet(rows=3, columns=4)\n",
                                "cell1 = ipysheet.cell(0, 0, 'Hello')\n",
                                "cell2 = ipysheet.cell(2, 0, 'World')\n",
                                "cell_value = ipysheet.cell(2,2, 42.)\n",
                                "sheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 2. Test Searching a Sheet (interact with textbox in a different cell)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 40,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "\n",
                                "import numpy as np\n",
                                "import pandas as pd\n",
                                "from ipysheet import from_dataframe\n",
                                "from ipywidgets import Text, VBox, link\n",
                                "\n",
                                "df = pd.DataFrame({'A': 1.,\n",
                                "                   'B': pd.Timestamp('20130102'),\n",
                                "                   'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n",
                                "                   'D': np.array([False, True, False, False], dtype='bool'),\n",
                                "                   'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n",
                                "                   'F': 'foo'})\n",
                                "\n",
                                "df.loc[[0, 2], ['B']] = np.nan\n",
                                "\n",
                                "\n",
                                "sheet2 = from_dataframe(df)\n",
                                "\n",
                                "search_box = Text(description='Search:')\n",
                                "link((search_box, 'value'), (sheet2, 'search_token'))"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 41,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "search_box"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 42,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet2"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 3. Test calculations (slider update cell value via python code)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#11",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "* Typing value into textbox will move slider\n",
                                "* The value in cell will also get updated"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "4c24ea615616485084082848bd8e23b3"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#14",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_Ready"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "started"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "### pip install ipysheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 38,
                            "metadata": {
                                "scrolled": true
                            },
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image\n",
                                "import ipysheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 1. Test Rendering a Sheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 39,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet(rows=3, columns=4)\n",
                                "cell1 = ipysheet.cell(0, 0, 'Hello')\n",
                                "cell2 = ipysheet.cell(2, 0, 'World')\n",
                                "cell_value = ipysheet.cell(2,2, 42.)\n",
                                "sheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 2. Test Searching a Sheet (interact with textbox in a different cell)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 40,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "\n",
                                "import numpy as np\n",
                                "import pandas as pd\n",
                                "from ipysheet import from_dataframe\n",
                                "from ipywidgets import Text, VBox, link\n",
                                "\n",
                                "df = pd.DataFrame({'A': 1.,\n",
                                "                   'B': pd.Timestamp('20130102'),\n",
                                "                   'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n",
                                "                   'D': np.array([False, True, False, False], dtype='bool'),\n",
                                "                   'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n",
                                "                   'F': 'foo'})\n",
                                "\n",
                                "df.loc[[0, 2], ['B']] = np.nan\n",
                                "\n",
                                "\n",
                                "sheet2 = from_dataframe(df)\n",
                                "\n",
                                "search_box = Text(description='Search:')\n",
                                "link((search_box, 'value'), (sheet2, 'search_token'))"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 41,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "search_box"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 42,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet2"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 3. Test calculations (slider update cell value via python code)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#11",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "* Typing value into textbox will move slider\n",
                                "* The value in cell will also get updated"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "4c24ea615616485084082848bd8e23b3"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    {
                        "id": "NotebookImport#14",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_response",
            "payload": "<BLAH>"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_response",
            "payload": "{\r\n    \"information_for_contributors\": [\r\n        \"This file has been converted from https://github.com/MagicStack/MagicPython/blob/master/grammars/MagicPython.tmLanguage\",\r\n        \"If you want to provide a fix or improvement, please create a pull request against the original repository.\",\r\n        \"Once accepted there, we are happy to receive an update request.\"\r\n    ],\r\n    \"version\": \"https://github.com/MagicStack/MagicPython/commit/8ff35b3e5fcde471fae62a57ea1ae1c7cd34c9fc\",\r\n    \"name\": \"MagicPython\",\r\n    \"scopeName\": \"source.python\",\r\n    \"patterns\": [\r\n        {\r\n            \"include\": \"#statement\"\r\n        },\r\n        {\r\n            \"include\": \"#expression\"\r\n        }\r\n    ],\r\n    \"repository\": {\r\n        \"impossible\": {\r\n            \"comment\": \"This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.\",\r\n            \"match\": \"$.^\"\r\n        },\r\n        \"statement\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#import\"\r\n                },\r\n                {\r\n                    \"include\": \"#class-declaration\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-declaration\"\r\n                },\r\n                {\r\n                    \"include\": \"#statement-keyword\"\r\n                },\r\n                {\r\n                    \"include\": \"#assignment-operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#decorator\"\r\n                },\r\n                {\r\n                    \"include\": \"#docstring-statement\"\r\n                },\r\n                {\r\n                    \"include\": \"#semicolon\"\r\n                }\r\n            ]\r\n        },\r\n        \"semicolon\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"invalid.deprecated.semicolon.python\",\r\n                    \"match\": \"\\\\;$\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"comment.line.number-sign.python\",\r\n                    \"contentName\": \"meta.typehint.comment.python\",\r\n                    \"begin\": \"(?x)\\n  (?:\\n    \\\\# \\\\s* (type:)\\n    \\\\s*+ (?# we want `\\\\s*+` which is possessive quantifier since\\n             we do not actually want to backtrack when matching\\n             whitespace here)\\n    (?! $ | \\\\#)\\n  )\\n\",\r\n                    \"end\": \"(?:$|(?=\\\\#))\",\r\n                    \"beginCaptures\": {\r\n                        \"0\": {\r\n                            \"name\": \"meta.typehint.comment.python\"\r\n                        },\r\n                        \"1\": {\r\n                            \"name\": \"comment.typehint.directive.notation.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"comment.typehint.ignore.notation.python\",\r\n                            \"match\": \"(?x)\\n  \\\\G ignore\\n  (?= \\\\s* (?: $ | \\\\#))\\n\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.type.notation.python\",\r\n                            \"match\": \"(?x)\\n  (?<!\\\\.)\\\\b(\\n    bool | bytes | float | int | object | str\\n    | List | Dict | Iterable | Sequence | Set\\n    | FrozenSet | Callable | Union | Tuple\\n    | Any | None\\n  )\\\\b\\n\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.punctuation.notation.python\",\r\n                            \"match\": \"([\\\\[\\\\]\\\\(\\\\),\\\\.\\\\=\\\\*]|(->))\"\r\n                        },\r\n                        {\r\n                            \"name\": \"comment.typehint.variable.notation.python\",\r\n                            \"match\": \"([[:alpha:]_]\\\\w*)\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"include\": \"#comments-base\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-statement\": {\r\n            \"begin\": \"^(?=\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\r\n            \"comment\": \"the string either terminates correctly or by the beginning of a new line (this is for single line docstrings that aren't terminated) AND it's not followed by another docstring\",\r\n            \"end\": \"((?<=\\\\1)|^)(?!\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#docstring\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"string.quoted.docstring.multi.python\",\r\n                    \"begin\": \"(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\r\n                    \"end\": \"(\\\\1)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#docstring-prompt\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-guts-unicode\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.raw.multi.python\",\r\n                    \"begin\": \"([rR])(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\r\n                    \"end\": \"(\\\\2)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.string.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#string-consume-escape\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-prompt\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.single.python\",\r\n                    \"begin\": \"(\\\\'|\\\\\\\")\",\r\n                    \"end\": \"(\\\\1)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#docstring-guts-unicode\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"string.quoted.docstring.raw.single.python\",\r\n                    \"begin\": \"([rR])(\\\\'|\\\\\\\")\",\r\n                    \"end\": \"(\\\\2)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.string.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.string.begin.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.string.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#string-consume-escape\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#codetags\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-guts-unicode\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"docstring-prompt\": {\r\n            \"match\": \"(?x)\\n  (?:\\n    (?:^|\\\\G) \\\\s* (?# '\\\\G' is necessary for ST)\\n    ((?:>>>|\\\\.\\\\.\\\\.) \\\\s) (?=\\\\s*\\\\S)\\n  )\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                }\r\n            }\r\n        },\r\n        \"statement-keyword\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.function.python\",\r\n                    \"match\": \"\\\\b((async\\\\s+)?\\\\s*def)\\\\b\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.flow.python\",\r\n                    \"comment\": \"if `as` is eventually followed by `:` or line continuation\\nit's probably control flow like:\\n    with foo as bar, \\\\\\n         Foo as Bar:\\n      try:\\n        do_stuff()\\n      except Exception as e:\\n        pass\\n\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)as\\\\b(?=.*[:\\\\\\\\])\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.import.python\",\r\n                    \"comment\": \"other legal use of `as` is in an import\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.control.flow.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    async | continue | del | assert | break | finally | for\\n    | from | elif | else | if | except | pass | raise\\n    | return | try | while | with\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.modifier.declaration.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    global | nonlocal\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.class.python\",\r\n                    \"match\": \"\\\\b(?<!\\\\.)(class)\\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression-bare\": {\r\n            \"comment\": \"valid Python expressions w/o comments and line continuation\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#backticks\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-anno\"\r\n                },\r\n                {\r\n                    \"include\": \"#literal\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp\"\r\n                },\r\n                {\r\n                    \"include\": \"#string\"\r\n                },\r\n                {\r\n                    \"include\": \"#lambda\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#operator\"\r\n                },\r\n                {\r\n                    \"include\": \"#curly-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#item-access\"\r\n                },\r\n                {\r\n                    \"include\": \"#list\"\r\n                },\r\n                {\r\n                    \"include\": \"#round-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-call\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-types\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-exceptions\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#ellipsis\"\r\n                },\r\n                {\r\n                    \"include\": \"#punctuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression-base\": {\r\n            \"comment\": \"valid Python expressions with comments and line continuation\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression-bare\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"expression\": {\r\n            \"comment\": \"All valid Python expressions\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access\"\r\n                },\r\n                {\r\n                    \"comment\": \"Tokenize identifiers to help linters\",\r\n                    \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"member-access\": {\r\n            \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\r\n            \"end\": \"(?x)\\n  # stop when you've just read non-whitespace followed by non-word\\n  # i.e. when finished reading an identifier or function call\\n  (?<=\\\\S)(?=\\\\W) |\\n  # stop when seeing the start of something that's not a word,\\n  # i.e. when seeing a non-identifier\\n  (^|(?<=\\\\s))(?=[^\\\\\\\\\\\\w\\\\s]) |\\n  $\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.period.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#function-call\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-base\"\r\n                }\r\n            ]\r\n        },\r\n        \"member-access-base\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#item-access\"\r\n                }\r\n            ]\r\n        },\r\n        \"special-names\": {\r\n            \"name\": \"constant.other.caps.python\",\r\n            \"match\": \"(?x)\\n  \\\\b\\n    # we want to see \\\"enough\\\", meaning 2 or more upper-case\\n    # letters in the beginning of the constant\\n    #\\n    # for more details refer to:\\n    #   https://github.com/MagicStack/MagicPython/issues/42\\n    (\\n      _* [[:upper:]] [_\\\\d]* [[:upper:]]\\n    )\\n    [[:upper:]\\\\d]* (_\\\\w*)?\\n  \\\\b\\n\"\r\n        },\r\n        \"curly-braces\": {\r\n            \"begin\": \"\\\\{\",\r\n            \"end\": \"\\\\}\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.dict.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.dict.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.dict.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"list\": {\r\n            \"begin\": \"\\\\[\",\r\n            \"end\": \"\\\\]\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.list.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.definition.list.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"round-braces\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"\\\\)\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.parenthesis.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.parenthesis.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"line-continuation\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(\\\\\\\\)\\\\s*(\\\\S.*$\\\\n?)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.separator.continuation.line.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.line.continuation.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"begin\": \"(\\\\\\\\)\\\\s*$\\\\n?\",\r\n                    \"end\": \"(?x)\\n  (?=^\\\\s*$)\\n  |\\n  (?! (\\\\s* [rR]? (\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\\n      |\\n      (\\\\G $)  (?# '\\\\G' is necessary for ST)\\n  )\\n\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.separator.continuation.line.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#string\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"assignment-operator\": {\r\n            \"name\": \"keyword.operator.assignment.python\",\r\n            \"match\": \"(?x)\\n     <<= | >>= | //= | \\\\*\\\\*=\\n    | \\\\+= | -= | /= | @=\\n    | \\\\*= | %= | ~= | \\\\^= | &= | \\\\|=\\n    | =(?!=)\\n\"\r\n        },\r\n        \"operator\": {\r\n            \"match\": \"(?x)\\n    \\\\b(?<!\\\\.)\\n      (?:\\n        (and | or | not | in | is)                         (?# 1)\\n        |\\n        (for | if | else | await | (?:yield(?:\\\\s+from)?))  (?# 2)\\n      )\\n    (?!\\\\s*:)\\\\b\\n\\n    | (<< | >> | & | \\\\| | \\\\^ | ~)                          (?# 3)\\n\\n    | (\\\\*\\\\* | \\\\* | \\\\+ | - | % | // | / | @)                (?# 4)\\n\\n    | (!= | == | >= | <= | < | >)                          (?# 5)\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.logical.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"keyword.operator.bitwise.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"keyword.operator.arithmetic.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"keyword.operator.comparison.python\"\r\n                }\r\n            }\r\n        },\r\n        \"punctuation\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.colon.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"name\": \"punctuation.separator.element.python\",\r\n                    \"match\": \",\"\r\n                }\r\n            ]\r\n        },\r\n        \"literal\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.language.python\",\r\n                    \"match\": \"\\\\b(True|False|None|NotImplemented|Ellipsis)\\\\b\"\r\n                },\r\n                {\r\n                    \"include\": \"#number\"\r\n                }\r\n            ]\r\n        },\r\n        \"number\": {\r\n            \"name\": \"constant.numeric.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#number-float\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-dec\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-hex\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-oct\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-bin\"\r\n                },\r\n                {\r\n                    \"include\": \"#number-long\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.name.python\",\r\n                    \"match\": \"\\\\b[0-9]+\\\\w+\"\r\n                }\r\n            ]\r\n        },\r\n        \"number-float\": {\r\n            \"name\": \"constant.numeric.float.python\",\r\n            \"match\": \"(?x)\\n  (?<! \\\\w)(?:\\n    (?:\\n      \\\\.[0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\. [0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\.\\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\\n    |\\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\\n  )([jJ])?\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.imaginary.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-dec\": {\r\n            \"name\": \"constant.numeric.dec.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])(?:\\n      [1-9](?: _?[0-9] )*\\n      |\\n      0+\\n      |\\n      [0-9](?: _?[0-9] )* ([jJ])\\n      |\\n      0 ([0-9]+)(?![eE\\\\.])\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.imaginary.number.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.dec.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"invalid.illegal.dec.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-hex\": {\r\n            \"name\": \"constant.numeric.hex.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[xX]) (_?[0-9a-fA-F])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-oct\": {\r\n            \"name\": \"constant.numeric.oct.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[oO]) (_?[0-7])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-bin\": {\r\n            \"name\": \"constant.numeric.bin.python\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[bB]) (_?[01])+\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"number-long\": {\r\n            \"name\": \"constant.numeric.bin.python\",\r\n            \"comment\": \"this is to support python2 syntax for long ints\",\r\n            \"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    ([1-9][0-9]* | 0) ([lL])\\n  \\\\b\\n\",\r\n            \"captures\": {\r\n                \"2\": {\r\n                    \"name\": \"storage.type.number.python\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-single-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-double-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-single-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-double-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-single-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-double-three-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-single-one-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fregexp-double-one-line\"\r\n                }\r\n            ]\r\n        },\r\n        \"string\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-bin-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-bin-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-bin-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-bin-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-fnorm-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-fnorm-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-normf-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-normf-quoted-single-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-quoted-multi-line\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-quoted-single-line\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-unicode-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-brace-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-consume-escape\": {\r\n            \"match\": \"\\\\\\\\['\\\"\\\\n\\\\\\\\]\"\r\n        },\r\n        \"string-raw-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-brace-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-entity\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-guts\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-illegal-single-brace\": {\r\n            \"comment\": \"it is illegal to have a multiline brace inside a single-line string\",\r\n            \"begin\": \"(\\\\{)(?=[^\\\\n}]*$\\\\n?)\",\r\n            \"end\": \"(\\\\})|(?=\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-single\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-illegal-multi-brace\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#impossible\"\r\n                }\r\n            ]\r\n        },\r\n        \"f-expression\": {\r\n            \"comment\": \"All valid Python expressions, except comments and line cont\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression-bare\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access\"\r\n                },\r\n                {\r\n                    \"comment\": \"Tokenize identifiers to help linters\",\r\n                    \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"escape-sequence-unicode\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.character.escape.python\",\r\n                    \"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n        | N\\\\{[\\\\w\\\\s]+?\\\\}\\n     )\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"escape-sequence\": {\r\n            \"name\": \"constant.character.escape.python\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | [0-7]{1,3}\\n        | [\\\\\\\\\\\"'abfnrtv]\\n     )\\n\"\r\n        },\r\n        \"string-line-continuation\": {\r\n            \"name\": \"constant.language.python\",\r\n            \"match\": \"\\\\\\\\$\"\r\n        },\r\n        \"string-formatting\": {\r\n            \"name\": \"meta.format.percent.python\",\r\n            \"match\": \"(?x)\\n  (\\n    % (\\\\([\\\\w\\\\s]*\\\\))?\\n      [-+#0 ]*\\n      (\\\\d+|\\\\*)? (\\\\.(\\\\d+|\\\\*))?\\n      ([hlL])?\\n      [diouxXeEfFgGcrsab%]\\n  )\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            }\r\n        },\r\n        \"string-brace-formatting\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.format.brace.python\",\r\n                    \"match\": \"(?x)\\n  (\\n    {{ | }}\\n    | (?:\\n      {\\n        \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n        (![rsa])?\\n        ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n          \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )?\\n      })\\n  )\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"4\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"meta.format.brace.python\",\r\n                    \"match\": \"(?x)\\n  (\\n    {\\n      \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n      (![rsa])?\\n      (:)\\n        [^'\\\"{}\\\\n]* (?:\\n          \\\\{ [^'\\\"}\\\\n]*? \\\\} [^'\\\"{}\\\\n]*\\n        )*\\n    }\\n  )\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"4\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-formatting-braces\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting-singe-brace\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting-singe-brace\": {\r\n            \"name\": \"invalid.illegal.brace.python\",\r\n            \"match\": \"(}(?!}))\"\r\n        },\r\n        \"import\": {\r\n            \"comment\": \"Import statements used to correctly mark `from`, `import`, and `as`\\n\",\r\n            \"patterns\": [\r\n                {\r\n                    \"begin\": \"\\\\b(?<!\\\\.)(from)\\\\b(?=.+import)\",\r\n                    \"end\": \"$|(?=import)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.import.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"punctuation.separator.period.python\",\r\n                            \"match\": \"\\\\.+\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"begin\": \"\\\\b(?<!\\\\.)(import)\\\\b\",\r\n                    \"end\": \"$\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.import.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"keyword.control.import.python\",\r\n                            \"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"class-declaration\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.class.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\s*(class)\\\\s+\\n    (?=\\n      [[:alpha:]_]\\\\w* \\\\s* (:|\\\\()\\n    )\\n\",\r\n                    \"end\": \"(:)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.class.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.section.class.begin.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#class-name\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#class-inheritance\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"class-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.type.class.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"class-inheritance\": {\r\n            \"name\": \"meta.class.inheritance.python\",\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.inheritance.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.inheritance.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"keyword.operator.unpacking.arguments.python\",\r\n                    \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                },\r\n                {\r\n                    \"name\": \"punctuation.separator.inheritance.python\",\r\n                    \"match\": \",\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                },\r\n                {\r\n                    \"name\": \"support.type.metaclass.python\",\r\n                    \"match\": \"\\\\bmetaclass\\\\b\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#class-kwarg\"\r\n                },\r\n                {\r\n                    \"include\": \"#call-wrapper-inheritance\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-class\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"class-kwarg\": {\r\n            \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\s*(=)(?!=)\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.other.inherited-class.python variable.parameter.class.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.operator.assignment.python\"\r\n                }\r\n            }\r\n        },\r\n        \"inheritance-identifier\": {\r\n            \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.other.inherited-class.python\"\r\n                }\r\n            }\r\n        },\r\n        \"member-access-class\": {\r\n            \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\r\n            \"end\": \"(?<=\\\\S)(?=\\\\W)|$\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.period.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#call-wrapper-inheritance\"\r\n                },\r\n                {\r\n                    \"include\": \"#member-access-base\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"lambda\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"((?<=\\\\.)lambda|lambda(?=\\\\s*[\\\\.=]))\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.control.flow.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"match\": \"\\\\b(lambda)\\\\s*?(?=[,\\\\n]|$)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.function.lambda.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"meta.lambda-function.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\b (lambda) \\\\b\\n\",\r\n                    \"end\": \"(:)|(\\\\n)\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.function.lambda.python\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.section.function.lambda.begin.python\"\r\n                        }\r\n                    },\r\n                    \"contentName\": \"meta.function.lambda.parameters.python\",\r\n                    \"patterns\": [\r\n                        {\r\n                            \"name\": \"keyword.operator.unpacking.parameter.python\",\r\n                            \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#lambda-nested-incomplete\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-names\"\r\n                        },\r\n                        {\r\n                            \"match\": \"([[:alpha:]_]\\\\w*)\\\\s*(?:(,)|(?=:|$))\",\r\n                            \"captures\": {\r\n                                \"1\": {\r\n                                    \"name\": \"variable.parameter.function.language.python\"\r\n                                },\r\n                                \"2\": {\r\n                                    \"name\": \"punctuation.separator.parameters.python\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"include\": \"#comments\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#backticks\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-anno\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#lambda-parameter-with-default\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#line-continuation\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#illegal-operator\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"lambda-incomplete\": {\r\n            \"name\": \"storage.type.function.lambda.python\",\r\n            \"match\": \"\\\\blambda(?=\\\\s*[,)])\"\r\n        },\r\n        \"lambda-nested-incomplete\": {\r\n            \"name\": \"storage.type.function.lambda.python\",\r\n            \"match\": \"\\\\blambda(?=\\\\s*[:,)])\"\r\n        },\r\n        \"lambda-parameter-with-default\": {\r\n            \"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (=)\\n\",\r\n            \"end\": \"(,)|(?=:|$)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.operator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-declaration\": {\r\n            \"name\": \"meta.function.python\",\r\n            \"begin\": \"(?x)\\n  \\\\s*\\n  (?:\\\\b(async) \\\\s+)? \\\\b(def)\\\\s+\\n    (?=\\n      [[:alpha:]_][[:word:]]* \\\\s* \\\\(\\n    )\\n\",\r\n            \"end\": \"(:|(?=[#'\\\"\\\\n]))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.function.async.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.function.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.section.function.begin.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#function-def-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#parameters\"\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"include\": \"#return-annotation\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-def-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.function.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"parameters\": {\r\n            \"name\": \"meta.function.parameters.python\",\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.parameters.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.parameters.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"keyword.operator.unpacking.parameter.python\",\r\n                    \"match\": \"(\\\\*\\\\*|\\\\*)\"\r\n                },\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#parameter-special\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*)\\n    \\\\s* (?: (,) | (?=[)#\\\\n=]))\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"variable.parameter.function.language.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.separator.parameters.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#loose-default\"\r\n                },\r\n                {\r\n                    \"include\": \"#annotated-parameter\"\r\n                }\r\n            ]\r\n        },\r\n        \"parameter-special\": {\r\n            \"match\": \"(?x)\\n  \\\\b ((self)|(cls)) \\\\b \\\\s*(?:(,)|(?=\\\\)))\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"variable.parameter.function.language.special.self.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"variable.parameter.function.language.special.cls.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            }\r\n        },\r\n        \"loose-default\": {\r\n            \"begin\": \"(=)\",\r\n            \"end\": \"(,)|(?=\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"annotated-parameter\": {\r\n            \"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\",\r\n            \"end\": \"(,)|(?=\\\\))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.parameter.function.language.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.separator.annotation.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.parameters.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                }\r\n            ]\r\n        },\r\n        \"return-annotation\": {\r\n            \"begin\": \"(->)\",\r\n            \"end\": \"(?=:)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.separator.annotation.result.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"item-access\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"meta.item-access.python\",\r\n                    \"begin\": \"(?x)\\n  \\\\b(?=\\n    [[:alpha:]_]\\\\w* \\\\s* \\\\[\\n  )\\n\",\r\n                    \"end\": \"(\\\\])\",\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.arguments.end.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#item-name\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#item-index\"\r\n                        },\r\n                        {\r\n                            \"include\": \"#expression\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"item-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#special-names\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"item-index\": {\r\n            \"begin\": \"(\\\\[)\",\r\n            \"end\": \"(?=\\\\])\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                }\r\n            },\r\n            \"contentName\": \"meta.item-access.arguments.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.slice.python\",\r\n                    \"match\": \":\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"decorator\": {\r\n            \"name\": \"meta.function.decorator.python\",\r\n            \"begin\": \"(?x)\\n  ^\\\\s*\\n  ((@)) \\\\s* (?=[[:alpha:]_]\\\\w*)\\n\",\r\n            \"end\": \"(?x)\\n  ( \\\\) )\\n    # trailing whitespace and comments are legal\\n    (?: (.*?) (?=\\\\s*(?:\\\\#|$)) )\\n  | (?=\\\\n|\\\\#)\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.name.function.decorator.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.decorator.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.decorator.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#decorator-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"decorator-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"name\": \"entity.name.function.decorator.python\",\r\n                    \"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*) | (\\\\.)\\n\",\r\n                    \"captures\": {\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.separator.period.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#line-continuation\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.decorator.python\",\r\n                    \"match\": \"(?x)\\n  \\\\s* ([^([:alpha:]\\\\s_\\\\.#\\\\\\\\] .*?) (?=\\\\#|$)\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"invalid.illegal.decorator.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"call-wrapper-inheritance\": {\r\n            \"comment\": \"same as a function call, but in inheritance context\",\r\n            \"name\": \"meta.function-call.python\",\r\n            \"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\r\n            \"end\": \"(\\\\))\",\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#inheritance-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"inheritance-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#inheritance-identifier\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-call\": {\r\n            \"name\": \"meta.function-call.python\",\r\n            \"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\r\n            \"end\": \"(\\\\))\",\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.end.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#special-variables\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#function-arguments\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-name\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-possible-callables\"\r\n                },\r\n                {\r\n                    \"comment\": \"Some color schemas support meta.function-call.generic scope\",\r\n                    \"name\": \"meta.function-call.generic.python\",\r\n                    \"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"function-arguments\": {\r\n            \"begin\": \"(\\\\()\",\r\n            \"end\": \"(?=\\\\))(?!\\\\)\\\\s*\\\\()\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                }\r\n            },\r\n            \"contentName\": \"meta.function-call.arguments.python\",\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"punctuation.separator.arguments.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (?:(?<=[,(])|^) \\\\s* (\\\\*{1,2})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"keyword.operator.unpacking.arguments.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#lambda-incomplete\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\b([[:alpha:]_]\\\\w*)\\\\s*(=)(?!=)\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"variable.parameter.function-call.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.assignment.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.assignment.python\",\r\n                    \"match\": \"=(?!=)\"\r\n                },\r\n                {\r\n                    \"include\": \"#expression\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\s*(\\\\))\\\\s*(\\\\()\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.definition.arguments.end.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"punctuation.definition.arguments.begin.python\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-callables\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#illegal-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#illegal-object-name\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-exceptions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-functions\"\r\n                },\r\n                {\r\n                    \"include\": \"#builtin-types\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-possible-callables\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#builtin-callables\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-names\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-exceptions\": {\r\n            \"name\": \"support.type.exception.python\",\r\n            \"match\": \"(?x) (?<!\\\\.) \\\\b(\\n  (\\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\\n    | BrokenPipe | ChildProcess\\n    | (Connection (Aborted | Refused | Reset)?)\\n    | EOF | Environment | FileExists | FileNotFound\\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\\n    | Timeout\\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\\n    | Reference | Runtime | Recursion | Syntax | System\\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\\n    | Value | Windows | ZeroDivision | ModuleNotFound\\n  ) Error\\n|\\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\\n    | Unicode | Bytes | Resource\\n  )? Warning\\n|\\n  SystemExit | Stop(Async)?Iteration\\n  | KeyboardInterrupt\\n  | GeneratorExit | (Base)?Exception\\n)\\\\b\\n\"\r\n        },\r\n        \"builtin-functions\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"support.function.builtin.python\",\r\n                    \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    __import__ | abs | all | any | ascii | bin | breakpoint | callable\\n    | chr | compile | copyright | credits | delattr | dir | divmod\\n    | enumerate | eval | exec | exit | filter | format | getattr\\n    | globals | hasattr | hash | help | hex | id | input\\n    | isinstance | issubclass | iter | len | license | locals | map\\n    | max | memoryview | min | next | oct | open | ord | pow | print\\n    | quit | range | reload | repr | reversed | round\\n    | setattr | sorted | sum | vars | zip\\n  )\\\\b\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"variable.legacy.builtin.python\",\r\n                    \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    file | reduce | intern | raw_input | unicode | cmp | basestring\\n    | execfile | long | xrange\\n  )\\\\b\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"builtin-types\": {\r\n            \"name\": \"support.type.python\",\r\n            \"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    bool | bytearray | bytes | classmethod | complex | dict\\n    | float | frozenset | int | list | object | property\\n    | set | slice | staticmethod | str | tuple | type\\n\\n    (?# Although 'super' is not a type, it's related to types,\\n        and is special enough to be highlighted differently from\\n        other built-ins)\\n    | super\\n  )\\\\b\\n\"\r\n        },\r\n        \"magic-function-names\": {\r\n            \"comment\": \"these methods have magic interpretation by python and are generally called\\nindirectly through syntactic constructs\\n\",\r\n            \"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      abs | add | aenter | aexit | aiter | and | anext | await\\n      | bool | call | ceil | cmp | coerce | complex | contains\\n      | copy | deepcopy | del | delattr | delete | delitem\\n      | delslice | dir | div | divmod | enter | eq | exit | float\\n      | floor | floordiv | format | ge | get | getattr\\n      | getattribute | getinitargs | getitem | getnewargs\\n      | getslice | getstate | gt | hash | hex | iadd | iand | idiv\\n      | ifloordiv | ilshift | imod | imul | index | init\\n      | instancecheck | int | invert | ior | ipow | irshift | isub\\n      | iter | itruediv | ixor | le | len | long | lshift | lt\\n      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or\\n      | pos | pow | radd | rand | rdiv | rdivmod | reduce\\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\\n      | rmul | ror | round | rpow | rrshift | rshift | rsub\\n      | rtruediv | rxor | set | setattr | setitem | setslice\\n      | setstate | sizeof | str | sub | subclasscheck | truediv\\n      | trunc | unicode | xor | matmul | rmatmul | imatmul\\n      | init_subclass | set_name | fspath | bytes | prepare\\n    )__\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.function.magic.python\"\r\n                }\r\n            }\r\n        },\r\n        \"magic-variable-names\": {\r\n            \"comment\": \"magic variables which a class/module may have.\",\r\n            \"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      all | bases | builtins | class | class_getitem | code | debug\\n      | defaults | dict | doc | file | func | kwdefaults | members\\n      | metaclass | methods | module | mro | mro_entries | name\\n      | qualname | post_init | self | signature | slots | subclasses\\n      | version | weakref | wrapped | annotations | classcell\\n      | spec | path | package | future | traceback\\n    )__\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.variable.magic.python\"\r\n                }\r\n            }\r\n        },\r\n        \"magic-names\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#magic-function-names\"\r\n                },\r\n                {\r\n                    \"include\": \"#magic-variable-names\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-names\": {\r\n            \"match\": \"(?x)\\n  \\\\b(?:\\n    (\\n      and | assert | async | await | break | class | continue | def\\n      | del | elif | else | except | finally | for | from | global\\n      | if | in | is | (?<=\\\\.)lambda | lambda(?=\\\\s*[\\\\.=])\\n      | nonlocal | not | or | pass | raise | return | try | while | with\\n      | yield\\n    ) | (\\n      as | import\\n    )\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.control.flow.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"keyword.control.import.python\"\r\n                }\r\n            }\r\n        },\r\n        \"special-variables\": {\r\n            \"match\": \"(?x)\\n  \\\\b (?<!\\\\.) (?:\\n    (self) | (cls)\\n  )\\\\b\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"variable.language.special.self.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"variable.language.special.cls.python\"\r\n                }\r\n            }\r\n        },\r\n        \"ellipsis\": {\r\n            \"name\": \"constant.other.ellipsis.python\",\r\n            \"match\": \"\\\\.\\\\.\\\\.\"\r\n        },\r\n        \"backticks\": {\r\n            \"name\": \"invalid.deprecated.backtick.python\",\r\n            \"begin\": \"\\\\`\",\r\n            \"end\": \"(?:\\\\`|(?<!\\\\\\\\)(\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-operator\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"match\": \"&&|\\\\|\\\\||--|\\\\+\\\\+\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"match\": \"[?$]\"\r\n                },\r\n                {\r\n                    \"name\": \"invalid.illegal.operator.python\",\r\n                    \"comment\": \"We don't want `!` to flash when we're typing `!=`\",\r\n                    \"match\": \"!\\\\b\"\r\n                }\r\n            ]\r\n        },\r\n        \"illegal-object-name\": {\r\n            \"comment\": \"It's illegal to name class or function \\\"True\\\"\",\r\n            \"name\": \"keyword.illegal.name.python\",\r\n            \"match\": \"\\\\b(True|False|None)\\\\b\"\r\n        },\r\n        \"illegal-anno\": {\r\n            \"name\": \"invalid.illegal.annotation.python\",\r\n            \"match\": \"->\"\r\n        },\r\n        \"regexp-base-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-quantifier\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-base-common\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-base-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-quantifier\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-formatting-braces\"\r\n                },\r\n                {\r\n                    \"match\": \"\\\\{.*?\\\\}\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-base-common\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-formatting-braces\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"comment\": \"empty braces are illegal\",\r\n                    \"match\": \"({)(\\\\s*?)(})\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.brace.python\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.format.placeholder.other.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"constant.character.escape.python\",\r\n                    \"match\": \"({{|}})\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-base-common\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"support.other.match.any.regexp\",\r\n                    \"match\": \"\\\\.\"\r\n                },\r\n                {\r\n                    \"name\": \"support.other.match.begin.regexp\",\r\n                    \"match\": \"\\\\^\"\r\n                },\r\n                {\r\n                    \"name\": \"support.other.match.end.regexp\",\r\n                    \"match\": \"\\\\$\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.quantifier.regexp\",\r\n                    \"match\": \"[+*?]\\\\??\"\r\n                },\r\n                {\r\n                    \"name\": \"keyword.operator.disjunction.regexp\",\r\n                    \"match\": \"\\\\|\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-sequence\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-quantifier\": {\r\n            \"name\": \"keyword.operator.quantifier.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\n\"\r\n        },\r\n        \"fregexp-quantifier\": {\r\n            \"name\": \"keyword.operator.quantifier.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\{\\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\\\}\\n\"\r\n        },\r\n        \"regexp-backreference-number\": {\r\n            \"name\": \"meta.backreference.regexp\",\r\n            \"match\": \"(\\\\\\\\[1-9]\\\\d?)\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"entity.name.tag.backreference.regexp\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp-backreference\": {\r\n            \"name\": \"meta.backreference.named.regexp\",\r\n            \"match\": \"(?x)\\n  (\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.backreference.regexp\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\"\r\n                }\r\n            }\r\n        },\r\n        \"regexp-flags\": {\r\n            \"name\": \"storage.modifier.flag.regexp\",\r\n            \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\"\r\n        },\r\n        \"regexp-escape-special\": {\r\n            \"name\": \"support.other.escape.special.regexp\",\r\n            \"match\": \"\\\\\\\\([AbBdDsSwWZ])\"\r\n        },\r\n        \"regexp-escape-character\": {\r\n            \"name\": \"constant.character.escape.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | 0[0-7]{1,2}\\n        | [0-7]{3}\\n     )\\n\"\r\n        },\r\n        \"regexp-escape-unicode\": {\r\n            \"name\": \"constant.character.unicode.regexp\",\r\n            \"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n     )\\n\"\r\n        },\r\n        \"regexp-escape-catchall\": {\r\n            \"name\": \"constant.character.escape.regexp\",\r\n            \"match\": \"\\\\\\\\(.|\\\\n)\"\r\n        },\r\n        \"regexp-escape-sequence\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-escape-special\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-character\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference-number\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-catchall\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-charecter-set-escapes\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"constant.character.escape.regexp\",\r\n                    \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-special\"\r\n                },\r\n                {\r\n                    \"name\": \"constant.character.escape.regexp\",\r\n                    \"match\": \"\\\\\\\\([0-7]{1,3})\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-character\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-escape-catchall\"\r\n                }\r\n            ]\r\n        },\r\n        \"codetags\": {\r\n            \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\",\r\n            \"captures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.codetag.notation.python\"\r\n                }\r\n            }\r\n        },\r\n        \"comments-base\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($)\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments-string-single-three\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($|(?='''))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"comments-string-double-three\": {\r\n            \"name\": \"comment.line.number-sign.python\",\r\n            \"begin\": \"(\\\\#)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.comment.python\"\r\n                }\r\n            },\r\n            \"end\": \"($|(?=\\\"\\\"\\\"))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\\'\\\\'\\\\'))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#regexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-character-set\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\r\n                },\r\n                {\r\n                    \"name\": \"meta.character.set.regexp\",\r\n                    \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\r\n                    \"end\": \"(\\\\]|(?=\\\"\\\"\\\"))\",\r\n                    \"beginCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"keyword.operator.negation.regexp\"\r\n                        },\r\n                        \"3\": {\r\n                            \"name\": \"constant.character.set.regexp\"\r\n                        }\r\n                    },\r\n                    \"endCaptures\": {\r\n                        \"1\": {\r\n                            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"invalid.illegal.newline.python\"\r\n                        }\r\n                    },\r\n                    \"patterns\": [\r\n                        {\r\n                            \"include\": \"#regexp-charecter-set-escapes\"\r\n                        },\r\n                        {\r\n                            \"name\": \"constant.character.set.regexp\",\r\n                            \"match\": \"[^\\\\n]\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-comments\": {\r\n            \"name\": \"comment.regexp\",\r\n            \"begin\": \"\\\\(\\\\?#\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"punctuation.comment.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.comment.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#codetags\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-regexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-single-one-line\": {\r\n            \"name\": \"string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\')\",\r\n            \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-single-three-line\": {\r\n            \"name\": \"string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\'\\\\'\\\\')\",\r\n            \"end\": \"(\\\\'\\\\'\\\\')\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-double-one-line\": {\r\n            \"name\": \"string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\")\",\r\n            \"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"regexp-double-three-line\": {\r\n            \"name\": \"string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\"\\\"\\\")\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-regexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-one-fregexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-one-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#single-three-fregexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"single-three-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-single-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-one-fregexp-parentheses\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-one-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-expression\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fregexp-base-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-character-set\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-comments\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-flags\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-regexp-named-group\"\r\n                },\r\n                {\r\n                    \"include\": \"#regexp-backreference\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookahead\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookahead-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookbehind\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-lookbehind-negative\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-conditional\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-parentheses-non-capturing\"\r\n                },\r\n                {\r\n                    \"include\": \"#double-three-fregexp-parentheses\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-named-group\": {\r\n            \"name\": \"meta.named.regexp\",\r\n            \"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"entity.name.tag.named.group.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookahead\": {\r\n            \"begin\": \"(\\\\()\\\\?=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookahead-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookbehind\": {\r\n            \"begin\": \"(\\\\()\\\\?<=\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-lookbehind-negative\": {\r\n            \"begin\": \"(\\\\()\\\\?<!\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-conditional\": {\r\n            \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"keyword.operator.conditional.regexp\"\r\n                },\r\n                \"1\": {\r\n                    \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-parentheses-non-capturing\": {\r\n            \"begin\": \"\\\\(\\\\?:\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"double-three-fregexp-parentheses\": {\r\n            \"begin\": \"\\\\(\",\r\n            \"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\r\n            \"beginCaptures\": {\r\n                \"0\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                },\r\n                {\r\n                    \"include\": \"#comments-string-double-three\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-single-one-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\')\",\r\n            \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-single-three-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\'\\\\'\\\\')\",\r\n            \"end\": \"(\\\\'\\\\'\\\\')\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#single-three-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-double-one-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\")\",\r\n            \"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-one-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fregexp-double-three-line\": {\r\n            \"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\"\\\"\\\")\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"5\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#double-three-fregexp-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-quoted-single-line\": {\r\n            \"name\": \"string.quoted.raw.single.python\",\r\n            \"begin\": \"\\\\b(([uU]R)|(R))((['\\\"]))\",\r\n            \"end\": \"(\\\\4)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-single-bad-brace1-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-single-bad-brace2-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-bin-quoted-single-line\": {\r\n            \"name\": \"string.quoted.binary.single.python\",\r\n            \"begin\": \"(\\\\b[bB])((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-quoted-single-line\": {\r\n            \"name\": \"string.quoted.raw.binary.single.python\",\r\n            \"begin\": \"(\\\\b(?:R[bB]|[bB]R))((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-raw-bin-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-quoted-single-line\": {\r\n            \"name\": \"string.quoted.single.python\",\r\n            \"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-single-bad-brace1-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-single-bad-brace2-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-unicode-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace1-formatting-unicode\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace1-formatting-raw\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace2-formatting-unicode\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-single-bad-brace2-formatting-raw\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.raw.multi.python\",\r\n            \"begin\": \"\\\\b(([uU]R)|(R))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\4)\",\r\n            \"beginCaptures\": {\r\n                \"2\": {\r\n                    \"name\": \"invalid.deprecated.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"4\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace1-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace2-formatting-raw\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-raw-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-bin-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.binary.multi.python\",\r\n            \"begin\": \"(\\\\b[bB])('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-raw-bin-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.raw.binary.multi.python\",\r\n            \"begin\": \"(\\\\b(?:R[bB]|[bB]R))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-raw-bin-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-quoted-multi-line\": {\r\n            \"name\": \"string.quoted.multi.python\",\r\n            \"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace1-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-multi-bad-brace2-formatting-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-unicode-guts\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace1-formatting-unicode\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#escape-sequence\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-line-continuation\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace1-formatting-raw\": {\r\n            \"comment\": \"template using {% ... %}\",\r\n            \"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace2-formatting-unicode\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#escape-sequence-unicode\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-entity\"\r\n                }\r\n            ]\r\n        },\r\n        \"string-multi-bad-brace2-formatting-raw\": {\r\n            \"comment\": \"odd format or format-like syntax\",\r\n            \"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\r\n            \"end\": \"(?='''|\\\"\\\"\\\")\",\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#string-consume-escape\"\r\n                },\r\n                {\r\n                    \"include\": \"#string-formatting\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-fnorm-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[fF])([bBuU])?((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-normf-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[bBuU])([fF])((['\\\"]))\",\r\n            \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-quoted-single-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))((['\\\"]))\",\r\n            \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.raw.single.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.single.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-raw-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-single-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-single-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.single.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-raw-single-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.raw.single.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-single-brace\": {\r\n            \"comment\": \"value interpolation using { ... }\",\r\n            \"begin\": \"(\\\\{)\",\r\n            \"end\": \"(?x)\\n  (\\\\})|(?=\\\\n)\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-single\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-single\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(![rsa])(?=})\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-terminator-single-tail\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-single-tail\": {\r\n            \"begin\": \"(![rsa])?(:)(?=.*?{)\",\r\n            \"end\": \"(?=})|(?=\\\\n)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-illegal-single-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-single-brace\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([bcdeEfFgGnosxX%])(?=})\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\.\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\#)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([-+ ])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([<>=^])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\w)\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-fnorm-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[fF])([bBuU])?('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-normf-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b[bBuU])([fF])('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\3)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"invalid.illegal.prefix.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\r\n                },\r\n                \"3\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-raw-quoted-multi-line\": {\r\n            \"name\": \"meta.fstring.python\",\r\n            \"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))('''|\\\"\\\"\\\")\",\r\n            \"end\": \"(\\\\2)\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"string.interpolated.python string.quoted.raw.multi.python storage.type.string.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.multi.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"invalid.illegal.newline.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-raw-guts\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-raw-multi-core\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-multi-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.multi.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-raw-multi-core\": {\r\n            \"name\": \"string.interpolated.python string.quoted.raw.multi.python\",\r\n            \"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\r\n        },\r\n        \"fstring-multi-brace\": {\r\n            \"comment\": \"value interpolation using { ... }\",\r\n            \"begin\": \"(\\\\{)\",\r\n            \"end\": \"(?x)\\n  (\\\\})\\n\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"endCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"constant.character.format.placeholder.other.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-terminator-multi\"\r\n                },\r\n                {\r\n                    \"include\": \"#f-expression\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-multi\": {\r\n            \"patterns\": [\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(![rsa])(?=})\"\r\n                },\r\n                {\r\n                    \"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\r\n                    \"captures\": {\r\n                        \"1\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        },\r\n                        \"2\": {\r\n                            \"name\": \"storage.type.format.python\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-terminator-multi-tail\"\r\n                }\r\n            ]\r\n        },\r\n        \"fstring-terminator-multi-tail\": {\r\n            \"begin\": \"(![rsa])?(:)(?=.*?{)\",\r\n            \"end\": \"(?=})\",\r\n            \"beginCaptures\": {\r\n                \"1\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                },\r\n                \"2\": {\r\n                    \"name\": \"storage.type.format.python\"\r\n                }\r\n            },\r\n            \"patterns\": [\r\n                {\r\n                    \"include\": \"#fstring-illegal-multi-brace\"\r\n                },\r\n                {\r\n                    \"include\": \"#fstring-multi-brace\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([bcdeEfFgGnosxX%])(?=})\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\.\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(,)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\d+)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\#)\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([-+ ])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"([<>=^])\"\r\n                },\r\n                {\r\n                    \"name\": \"storage.type.format.python\",\r\n                    \"match\": \"(\\\\w)\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.editor_loaded",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 15,
                "undoCount": 0,
                "redoCount": 0
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "settings_updated"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#0",
                    "NotebookImport#1",
                    "NotebookImport#2",
                    "NotebookImport#3",
                    "NotebookImport#4",
                    "NotebookImport#5",
                    "NotebookImport#6",
                    "NotebookImport#7",
                    "NotebookImport#8",
                    "NotebookImport#9",
                    "NotebookImport#10",
                    "NotebookImport#11",
                    "NotebookImport#12",
                    "NotebookImport#13",
                    "NotebookImport#14"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_all_cells_complete",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# Prerequisites\n",
                                "\n",
                                "### pip install ipysheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 38,
                            "metadata": {
                                "scrolled": true
                            },
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image\n",
                                "import ipysheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 1. Test Rendering a Sheet"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#3",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 39,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet(rows=3, columns=4)\n",
                                "cell1 = ipysheet.cell(0, 0, 'Hello')\n",
                                "cell2 = ipysheet.cell(2, 0, 'World')\n",
                                "cell_value = ipysheet.cell(2,2, 42.)\n",
                                "sheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#4",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 2. Test Searching a Sheet (interact with textbox in a different cell)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#5",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 40,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "\n",
                                "import numpy as np\n",
                                "import pandas as pd\n",
                                "from ipysheet import from_dataframe\n",
                                "from ipywidgets import Text, VBox, link\n",
                                "\n",
                                "df = pd.DataFrame({'A': 1.,\n",
                                "                   'B': pd.Timestamp('20130102'),\n",
                                "                   'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n",
                                "                   'D': np.array([False, True, False, False], dtype='bool'),\n",
                                "                   'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n",
                                "                   'F': 'foo'})\n",
                                "\n",
                                "df.loc[[0, 2], ['B']] = np.nan\n",
                                "\n",
                                "\n",
                                "sheet2 = from_dataframe(df)\n",
                                "\n",
                                "search_box = Text(description='Search:')\n",
                                "link((search_box, 'value'), (sheet2, 'search_token'))"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#6",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 41,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "search_box"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#7",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 42,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet2"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#8",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "# 3. Test calculations (slider update cell value via python code)"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 51,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 52,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "slider"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#11",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "source": [
                                "* Typing value into textbox will move slider\n",
                                "* The value in cell will also get updated"
                            ],
                            "cell_type": "markdown",
                            "metadata": {}
                        }
                    },
                    {
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 53,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "textbox"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 57,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#14",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": []
                        }
                    }
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.loaded_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_onigasm_assembly_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_tmlanguage_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_monaco_ready",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 15,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#10"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#9"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": ""
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "notebook_execution_activated",
            "payload": "file:///c%3A/Users/RCHIOD~1.RED/AppData/Local/Temp/tmp-5480dFBqg6MeWbKP.ipynb"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_kernelOptions",
            "payload": {
                "clientId": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                "id": "6fdd1826-daa9-4c95-8b2a-c5bdc8aced4d",
                "model": {
                    "name": "python3",
                    "id": "6fdd1826-daa9-4c95-8b2a-c5bdc8aced4d"
                },
                "userName": ""
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "bfb77d78-22a8-4032-a552-cea48c5a0249",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": false,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "import os\nimport sys\n%cd \"c:\\Users\\RCHIOD~1.RED\\AppData\\Local\\Temp\"\nif os.getcwd() not in sys.path:\n    sys.path.insert(0, os.getcwd())"
                    },
                    "header": {
                        "date": "2020-04-03T17:46:22.244Z",
                        "msg_id": "bfb77d78-22a8-4032-a552-cea48c5a0249",
                        "msg_type": "execute_request",
                        "session": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": ""
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_registerCommTarget",
            "payload": "jupyter.widget"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_registerCommTarget",
            "payload": "jupyter.widget"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "bfb77d78-22a8-4032-a552-cea48c5a0249"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_notebook_execution_activated",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "9e30ed87-e28e-496f-a9f9-02c032afa72b",
                "data": "{\"header\": {\"msg_id\": \"fd826d50-607a0f938d8abb31ec687ffd\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:22.977354Z\", \"version\": \"5.3\"}, \"msg_id\": \"fd826d50-607a0f938d8abb31ec687ffd\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:22.244000Z\", \"msg_id\": \"bfb77d78-22a8-4032-a552-cea48c5a0249\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "9e30ed87-e28e-496f-a9f9-02c032afa72b"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "698dabf8-094d-4995-af65-a1fdfb393d34",
                "data": "{\"header\": {\"msg_id\": \"88c80366-33f7dc3ed3741acf40e6740f\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:22.977354Z\", \"version\": \"5.3\"}, \"msg_id\": \"88c80366-33f7dc3ed3741acf40e6740f\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:46:22.244000Z\", \"msg_id\": \"bfb77d78-22a8-4032-a552-cea48c5a0249\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"import os\\nimport sys\\n%cd \\\"c:\\\\Users\\\\RCHIOD~1.RED\\\\AppData\\\\Local\\\\Temp\\\"\\nif os.getcwd() not in sys.path:\\n    sys.path.insert(0, os.getcwd())\", \"execution_count\": 1}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "698dabf8-094d-4995-af65-a1fdfb393d34"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "252a86b9-0630-4bc2-8c60-e7224a048438",
                "data": "{\"header\": {\"msg_id\": \"35421a5f-b38c9d00ed20dafb992ae3f4\", \"msg_type\": \"stream\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:22.983353Z\", \"version\": \"5.3\"}, \"msg_id\": \"35421a5f-b38c9d00ed20dafb992ae3f4\", \"msg_type\": \"stream\", \"parent_header\": {\"date\": \"2020-04-03T17:46:22.244000Z\", \"msg_id\": \"bfb77d78-22a8-4032-a552-cea48c5a0249\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"name\": \"stdout\", \"text\": \"c:\\\\Users\\\\RCHIOD~1.RED\\\\AppData\\\\Local\\\\Temp\\n\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "252a86b9-0630-4bc2-8c60-e7224a048438"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "938e5e4d-241c-4fa3-b48f-23c49bf0d56b",
                "data": "{\"header\": {\"msg_id\": \"b7b5c089-9845bbf42c7ef112f1cef0fe\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:22.987354Z\", \"version\": \"5.3\"}, \"msg_id\": \"b7b5c089-9845bbf42c7ef112f1cef0fe\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:46:22.244000Z\", \"msg_id\": \"bfb77d78-22a8-4032-a552-cea48c5a0249\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:46:22.977354Z\", \"dependencies_met\": true, \"engine\": \"090f730d-660c-4feb-842b-6bb25445c553\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 0, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "938e5e4d-241c-4fa3-b48f-23c49bf0d56b"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "bb384aef-077c-4342-9d11-b0f2c1a1b360",
                "data": "{\"header\": {\"msg_id\": \"894d80f7-8156569f38735c5aa940d575\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:22.988354Z\", \"version\": \"5.3\"}, \"msg_id\": \"894d80f7-8156569f38735c5aa940d575\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:22.244000Z\", \"msg_id\": \"bfb77d78-22a8-4032-a552-cea48c5a0249\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "bb384aef-077c-4342-9d11-b0f2c1a1b360"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "a87543db-b74b-4e4d-bb1e-277024b38f22",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\nimport ipysheet\n\nslider = IntSlider(description=\"Continuous\", continuous_update=True)\ntextbox = IntText(description=\"Continuous\", continuous_update=True)\n\nlink((slider, 'value'), (textbox, 'value'))"
                    },
                    "header": {
                        "date": "2020-04-03T17:46:25.525Z",
                        "msg_id": "a87543db-b74b-4e4d-bb1e-277024b38f22",
                        "msg_type": "execute_request",
                        "session": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "a87543db-b74b-4e4d-bb1e-277024b38f22"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4c703082-c874-4e9c-acab-fa20803105dc",
                "data": "{\"header\": {\"msg_id\": \"86a810da-bca996ba360d119b3aad991a\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.071211Z\", \"version\": \"5.3\"}, \"msg_id\": \"86a810da-bca996ba360d119b3aad991a\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4c703082-c874-4e9c-acab-fa20803105dc"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "1f911275-2f55-48c3-809e-dc259acd9c06",
                "data": "{\"header\": {\"msg_id\": \"0e193a7c-101c89a71533d60f0f50a594\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.072211Z\", \"version\": \"5.3\"}, \"msg_id\": \"0e193a7c-101c89a71533d60f0f50a594\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\\nimport ipysheet\\n\\nslider = IntSlider(description=\\\"Continuous\\\", continuous_update=True)\\ntextbox = IntText(description=\\\"Continuous\\\", continuous_update=True)\\n\\nlink((slider, 'value'), (textbox, 'value'))\", \"execution_count\": 1}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "1f911275-2f55-48c3-809e-dc259acd9c06"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "49085e17-c438-4d82-ba24-18b0a29e8f21",
                "data": "{\"header\": {\"msg_id\": \"f86d4c48-cdeff88a367ff927a836bcef\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.106208Z\", \"version\": \"5.3\"}, \"msg_id\": \"f86d4c48-cdeff88a367ff927a836bcef\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"4dbadf85d2014cd5959427387fa2931c\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "49085e17-c438-4d82-ba24-18b0a29e8f21"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "a0bd18e4-613a-417a-81bf-5d1a9284e8ff",
                "data": "{\"header\": {\"msg_id\": \"a09a369a-9b982a364bf57189efc1b5df\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.108208Z\", \"version\": \"5.3\"}, \"msg_id\": \"a09a369a-9b982a364bf57189efc1b5df\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/controls\", \"_model_module_version\": \"1.5.0\", \"_model_name\": \"SliderStyleModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"StyleView\", \"description_width\": \"\", \"handle_color\": null}, \"buffer_paths\": []}, \"comm_id\": \"8e21449652e6436da67cac05972f7c93\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "a0bd18e4-613a-417a-81bf-5d1a9284e8ff"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "3f608a29-4993-450a-b121-84b5abfd2369",
                "data": "{\"header\": {\"msg_id\": \"bd7675fd-b2522237fd027d64f2272e96\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.109209Z\", \"version\": \"5.3\"}, \"msg_id\": \"bd7675fd-b2522237fd027d64f2272e96\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"@jupyter-widgets/controls\", \"_model_module_version\": \"1.5.0\", \"_model_name\": \"IntSliderModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/controls\", \"_view_module_version\": \"1.5.0\", \"_view_name\": \"IntSliderView\", \"continuous_update\": true, \"description\": \"Continuous\", \"description_tooltip\": null, \"disabled\": false, \"layout\": \"IPY_MODEL_4dbadf85d2014cd5959427387fa2931c\", \"max\": 100, \"min\": 0, \"orientation\": \"horizontal\", \"readout\": true, \"readout_format\": \"d\", \"step\": 1, \"style\": \"IPY_MODEL_8e21449652e6436da67cac05972f7c93\", \"value\": 0}, \"buffer_paths\": []}, \"comm_id\": \"0552183554244cfb826427d5e6501a3b\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "3f608a29-4993-450a-b121-84b5abfd2369"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "53518f8f-a3db-4b90-acc1-7dfc646e5a51",
                "data": "{\"header\": {\"msg_id\": \"d8638a72-d36dec1fdfef2380c8a081d3\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.113208Z\", \"version\": \"5.3\"}, \"msg_id\": \"d8638a72-d36dec1fdfef2380c8a081d3\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": null, \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": null}, \"buffer_paths\": []}, \"comm_id\": \"f5a3a2c61b0d4c198b2ba375bf664fd6\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "53518f8f-a3db-4b90-acc1-7dfc646e5a51"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "2d3dea7b-3ce1-47da-a91f-e97d738b97c9",
                "data": "{\"header\": {\"msg_id\": \"00817550-2ec3fce71936c6257483c470\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.116210Z\", \"version\": \"5.3\"}, \"msg_id\": \"00817550-2ec3fce71936c6257483c470\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/controls\", \"_model_module_version\": \"1.5.0\", \"_model_name\": \"DescriptionStyleModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"StyleView\", \"description_width\": \"\"}, \"buffer_paths\": []}, \"comm_id\": \"39288885e96744ef94472fc566add448\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "2d3dea7b-3ce1-47da-a91f-e97d738b97c9"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "0ece10cc-2d72-4e7f-acd1-a9cffc2734fe",
                "data": "{\"header\": {\"msg_id\": \"b4bf5827-720670ead36edffb0939d090\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.117209Z\", \"version\": \"5.3\"}, \"msg_id\": \"b4bf5827-720670ead36edffb0939d090\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"@jupyter-widgets/controls\", \"_model_module_version\": \"1.5.0\", \"_model_name\": \"IntTextModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/controls\", \"_view_module_version\": \"1.5.0\", \"_view_name\": \"IntTextView\", \"continuous_update\": true, \"description\": \"Continuous\", \"description_tooltip\": null, \"disabled\": false, \"layout\": \"IPY_MODEL_f5a3a2c61b0d4c198b2ba375bf664fd6\", \"step\": 1, \"style\": \"IPY_MODEL_39288885e96744ef94472fc566add448\", \"value\": 0}, \"buffer_paths\": []}, \"comm_id\": \"7b2174102d55431eb3cab5ed4900775a\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "0ece10cc-2d72-4e7f-acd1-a9cffc2734fe"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "85ba7600-6130-4dc7-83e8-971b709347f7",
                "data": "{\"header\": {\"msg_id\": \"69e68edd-ae166380ac2ae603e084e94f\", \"msg_type\": \"execute_result\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.118208Z\", \"version\": \"5.3\"}, \"msg_id\": \"69e68edd-ae166380ac2ae603e084e94f\", \"msg_type\": \"execute_result\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"<traitlets.traitlets.link at 0x288fe3b2b88>\"}, \"metadata\": {}, \"execution_count\": 1}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "85ba7600-6130-4dc7-83e8-971b709347f7"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "338ca387-14e9-4b15-991b-ef30fd003aa9",
                "data": "{\"header\": {\"msg_id\": \"07b6d17d-682730edd4229750b0284e79\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.134211Z\", \"version\": \"5.3\"}, \"msg_id\": \"07b6d17d-682730edd4229750b0284e79\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:46:26.072211Z\", \"dependencies_met\": true, \"engine\": \"090f730d-660c-4feb-842b-6bb25445c553\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 1, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "execute_result",
                            "data": {
                                "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                            },
                            "metadata": {},
                            "execution_count": 1
                        }
                    ],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "338ca387-14e9-4b15-991b-ef30fd003aa9"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "execute_result",
                            "data": {
                                "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                            },
                            "metadata": {},
                            "execution_count": 1
                        }
                    ],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "480b0783-cabb-47ec-b4ca-05c79d08aed7",
                "data": "{\"header\": {\"msg_id\": \"ab9145ef-9b745c2e721726bd053e2132\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:26.134211Z\", \"version\": \"5.3\"}, \"msg_id\": \"ab9145ef-9b745c2e721726bd053e2132\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:25.525000Z\", \"msg_id\": \"a87543db-b74b-4e4d-bb1e-277024b38f22\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "480b0783-cabb-47ec-b4ca-05c79d08aed7"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "execute_result",
                            "data": {
                                "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                            },
                            "metadata": {},
                            "execution_count": 1
                        }
                    ],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 1,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "execute_result",
                            "data": {
                                "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                            },
                            "metadata": {},
                            "execution_count": 1
                        }
                    ],
                    "source": [
                        "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                        "import ipysheet\n",
                        "\n",
                        "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                        "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                        "\n",
                        "link((slider, 'value'), (textbox, 'value'))"
                    ]
                },
                "id": "NotebookImport#9",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "execute_result",
                                    "data": {
                                        "text/plain": "<traitlets.traitlets.link at 0x288fe3b2b88>"
                                    },
                                    "metadata": {},
                                    "execution_count": 1
                                }
                            ],
                            "source": [
                                "from ipywidgets import FloatSlider, IntSlider, Image, IntText, link\n",
                                "import ipysheet\n",
                                "\n",
                                "slider = IntSlider(description=\"Continuous\", continuous_update=True)\n",
                                "textbox = IntText(description=\"Continuous\", continuous_update=True)\n",
                                "\n",
                                "link((slider, 'value'), (textbox, 'value'))"
                            ]
                        },
                        "id": "NotebookImport#9",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#9"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 15,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#11"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#10"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "c0ce9455-0d56-42a4-a73e-ef3c82d24081",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "slider"
                    },
                    "header": {
                        "date": "2020-04-03T17:46:32.228Z",
                        "msg_id": "c0ce9455-0d56-42a4-a73e-ef3c82d24081",
                        "msg_type": "execute_request",
                        "session": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c0ce9455-0d56-42a4-a73e-ef3c82d24081"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "f50ee4fd-9815-4e46-9ef1-1d9d9fc382fe",
                "data": "{\"header\": {\"msg_id\": \"516288f2-3e08dd61393849d2b35384e5\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:32.736039Z\", \"version\": \"5.3\"}, \"msg_id\": \"516288f2-3e08dd61393849d2b35384e5\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:32.228000Z\", \"msg_id\": \"c0ce9455-0d56-42a4-a73e-ef3c82d24081\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "f50ee4fd-9815-4e46-9ef1-1d9d9fc382fe"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ace59ab8-1777-4917-b7e8-49730ef93fe4",
                "data": "{\"header\": {\"msg_id\": \"25599a97-988260e99a87170db3f909ad\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:32.737040Z\", \"version\": \"5.3\"}, \"msg_id\": \"25599a97-988260e99a87170db3f909ad\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:46:32.228000Z\", \"msg_id\": \"c0ce9455-0d56-42a4-a73e-ef3c82d24081\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"slider\", \"execution_count\": 2}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ace59ab8-1777-4917-b7e8-49730ef93fe4"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "5e3fdec2-0144-49e5-a696-1cdf0aeb1a0f",
                "data": "{\"header\": {\"msg_id\": \"d18edacc-3d01c69d1b9b806171ea745d\", \"msg_type\": \"display_data\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:32.738069Z\", \"version\": \"5.3\"}, \"msg_id\": \"d18edacc-3d01c69d1b9b806171ea745d\", \"msg_type\": \"display_data\", \"parent_header\": {\"date\": \"2020-04-03T17:46:32.228000Z\", \"msg_id\": \"c0ce9455-0d56-42a4-a73e-ef3c82d24081\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"IntSlider(value=0, description='Continuous')\", \"application/vnd.jupyter.widget-view+json\": {\"version_major\": 2, \"version_minor\": 0, \"model_id\": \"0552183554244cfb826427d5e6501a3b\"}}, \"metadata\": {}, \"transient\": {}}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "5e3fdec2-0144-49e5-a696-1cdf0aeb1a0f"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "4d2332ac-2560-46f3-87ec-bc5adc49cf51",
                "data": "{\"header\": {\"msg_id\": \"bbace89a-be24695d41aa9f6813135123\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:32.742098Z\", \"version\": \"5.3\"}, \"msg_id\": \"bbace89a-be24695d41aa9f6813135123\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:46:32.228000Z\", \"msg_id\": \"c0ce9455-0d56-42a4-a73e-ef3c82d24081\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:46:32.737040Z\", \"dependencies_met\": true, \"engine\": \"090f730d-660c-4feb-842b-6bb25445c553\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 2, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntSlider(value=0, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "0552183554244cfb826427d5e6501a3b"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "4d2332ac-2560-46f3-87ec-bc5adc49cf51"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntSlider(value=0, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "0552183554244cfb826427d5e6501a3b"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "63425d81-bb97-4175-91c6-e442fa24a06d",
                "data": "{\"header\": {\"msg_id\": \"9767d463-eeffc696301e78bb4a9ac905\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:32.742098Z\", \"version\": \"5.3\"}, \"msg_id\": \"9767d463-eeffc696301e78bb4a9ac905\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:32.228000Z\", \"msg_id\": \"c0ce9455-0d56-42a4-a73e-ef3c82d24081\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "63425d81-bb97-4175-91c6-e442fa24a06d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntSlider(value=0, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "0552183554244cfb826427d5e6501a3b"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 2,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntSlider(value=0, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "0552183554244cfb826427d5e6501a3b"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "slider"
                    ]
                },
                "id": "NotebookImport#10",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntSlider(value=0, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "0552183554244cfb826427d5e6501a3b"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "slider"
                            ]
                        },
                        "id": "NotebookImport#10",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#10"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 15,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#13"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#12"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "69143261-7ecb-4b63-bfe3-60f5c1b30a03",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "textbox"
                    },
                    "header": {
                        "date": "2020-04-03T17:46:35.887Z",
                        "msg_id": "69143261-7ecb-4b63-bfe3-60f5c1b30a03",
                        "msg_type": "execute_request",
                        "session": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "69143261-7ecb-4b63-bfe3-60f5c1b30a03"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b0c1b4e7-c72c-45d3-9840-bbbf119b5184",
                "data": "{\"header\": {\"msg_id\": \"b5cc2bb0-364efb6901478d9c0b6787a0\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:36.394498Z\", \"version\": \"5.3\"}, \"msg_id\": \"b5cc2bb0-364efb6901478d9c0b6787a0\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:35.887000Z\", \"msg_id\": \"69143261-7ecb-4b63-bfe3-60f5c1b30a03\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b0c1b4e7-c72c-45d3-9840-bbbf119b5184"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "fefe56c7-889b-4b05-8ab3-f7e21ae6ff92",
                "data": "{\"header\": {\"msg_id\": \"1ecbe70f-922df685da2da635530f558e\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:36.395498Z\", \"version\": \"5.3\"}, \"msg_id\": \"1ecbe70f-922df685da2da635530f558e\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:46:35.887000Z\", \"msg_id\": \"69143261-7ecb-4b63-bfe3-60f5c1b30a03\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"textbox\", \"execution_count\": 3}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "fefe56c7-889b-4b05-8ab3-f7e21ae6ff92"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "68001cdc-9423-42d4-9c97-0b5737900dfe",
                "data": "{\"header\": {\"msg_id\": \"6643a10b-edb3dc7f736f9040cbd3d512\", \"msg_type\": \"display_data\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:36.397495Z\", \"version\": \"5.3\"}, \"msg_id\": \"6643a10b-edb3dc7f736f9040cbd3d512\", \"msg_type\": \"display_data\", \"parent_header\": {\"date\": \"2020-04-03T17:46:35.887000Z\", \"msg_id\": \"69143261-7ecb-4b63-bfe3-60f5c1b30a03\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"IntText(value=0, continuous_update=True, description='Continuous')\", \"application/vnd.jupyter.widget-view+json\": {\"version_major\": 2, \"version_minor\": 0, \"model_id\": \"7b2174102d55431eb3cab5ed4900775a\"}}, \"metadata\": {}, \"transient\": {}}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "68001cdc-9423-42d4-9c97-0b5737900dfe"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "40039ff9-3ca2-4985-9c54-0ba48e893c69",
                "data": "{\"header\": {\"msg_id\": \"f0f6eb56-d0e81fec49a02b0f37e4c707\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:36.400002Z\", \"version\": \"5.3\"}, \"msg_id\": \"f0f6eb56-d0e81fec49a02b0f37e4c707\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:35.887000Z\", \"msg_id\": \"69143261-7ecb-4b63-bfe3-60f5c1b30a03\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "40039ff9-3ca2-4985-9c54-0ba48e893c69"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "034e70d0-7993-497f-b269-d49e5306ea1d",
                "data": "{\"header\": {\"msg_id\": \"a5f3b0e3-55f7daf05d2e92c935be3e39\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:36.399496Z\", \"version\": \"5.3\"}, \"msg_id\": \"a5f3b0e3-55f7daf05d2e92c935be3e39\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:46:35.887000Z\", \"msg_id\": \"69143261-7ecb-4b63-bfe3-60f5c1b30a03\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:46:36.395498Z\", \"dependencies_met\": true, \"engine\": \"090f730d-660c-4feb-842b-6bb25445c553\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 3, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "034e70d0-7993-497f-b269-d49e5306ea1d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 3,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "textbox"
                    ]
                },
                "id": "NotebookImport#12",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "IntText(value=0, continuous_update=True, description='Continuous')",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "7b2174102d55431eb3cab5ed4900775a"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "textbox"
                            ]
                        },
                        "id": "NotebookImport#12",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#12"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 15,
                "undoCount": 0,
                "redoCount": 0,
                "selectedCell": "NotebookImport#14"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "reexecute_cells",
            "payload": {
                "cellIds": [
                    "NotebookImport#13"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "start_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 0
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_mirror_execute",
            "payload": {
                "id": "46693721-109f-4280-ac3b-3cf89af6245c",
                "msg": {
                    "buffers": [],
                    "channel": "shell",
                    "content": {
                        "silent": false,
                        "store_history": true,
                        "user_expressions": {},
                        "allow_stdin": true,
                        "stop_on_error": false,
                        "code": "sheet = ipysheet.sheet()\n\ncell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\ncell3 = ipysheet.cell(2, 2, 50.)\ncell_sum = ipysheet.cell(3, 2, 50.)\n\n@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\ndef calculate(a, b):\n    return a + b\n\nsheet"
                    },
                    "header": {
                        "date": "2020-04-03T17:46:39.482Z",
                        "msg_id": "46693721-109f-4280-ac3b-3cf89af6245c",
                        "msg_type": "execute_request",
                        "session": "a0dc48da-92d8-4c74-8a07-a310ee2674ef",
                        "username": "",
                        "version": "5.2"
                    },
                    "metadata": {},
                    "parent_header": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "native_command",
            "payload": {
                "command": 14,
                "source": "mouse"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell_and_advance",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.execute_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.send_command",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "46693721-109f-4280-ac3b-3cf89af6245c"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ad8a4079-0cee-4caa-860a-93d95f218dea",
                "data": "{\"header\": {\"msg_id\": \"e7d84d00-d6d7e03caaacd074878991b7\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.002230Z\", \"version\": \"5.3\"}, \"msg_id\": \"e7d84d00-d6d7e03caaacd074878991b7\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "start_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 0
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_start_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ad8a4079-0cee-4caa-860a-93d95f218dea"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c0b20b04-d2c5-4968-a6ec-15a39197c313",
                "data": "{\"header\": {\"msg_id\": \"de1f4bfc-8af9233aa2463f1be9d5f1d3\", \"msg_type\": \"execute_input\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.002230Z\", \"version\": \"5.3\"}, \"msg_id\": \"de1f4bfc-8af9233aa2463f1be9d5f1d3\", \"msg_type\": \"execute_input\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"code\": \"sheet = ipysheet.sheet()\\n\\ncell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\\ncell3 = ipysheet.cell(2, 2, 50.)\\ncell_sum = ipysheet.cell(3, 2, 50.)\\n\\n@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\\ndef calculate(a, b):\\n    return a + b\\n\\nsheet\", \"execution_count\": 4}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": null,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c0b20b04-d2c5-4968-a6ec-15a39197c313"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "e690306a-d085-48fa-9a00-f7c5a6368eb5",
                "data": "{\"header\": {\"msg_id\": \"3958e27c-f1ee5e099d7070ad258956d4\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.010231Z\", \"version\": \"5.3\"}, \"msg_id\": \"3958e27c-f1ee5e099d7070ad258956d4\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"@jupyter-widgets/base\", \"_model_module_version\": \"1.2.0\", \"_model_name\": \"LayoutModel\", \"_view_count\": null, \"_view_module\": \"@jupyter-widgets/base\", \"_view_module_version\": \"1.2.0\", \"_view_name\": \"LayoutView\", \"align_content\": null, \"align_items\": null, \"align_self\": null, \"border\": null, \"bottom\": null, \"display\": null, \"flex\": null, \"flex_flow\": null, \"grid_area\": null, \"grid_auto_columns\": null, \"grid_auto_flow\": null, \"grid_auto_rows\": null, \"grid_column\": null, \"grid_gap\": null, \"grid_row\": null, \"grid_template_areas\": null, \"grid_template_columns\": null, \"grid_template_rows\": null, \"height\": \"auto\", \"justify_content\": null, \"justify_items\": null, \"left\": null, \"margin\": null, \"max_height\": null, \"max_width\": null, \"min_height\": null, \"min_width\": null, \"object_fit\": null, \"object_position\": null, \"order\": null, \"overflow\": null, \"overflow_x\": null, \"overflow_y\": null, \"padding\": null, \"right\": null, \"top\": null, \"visibility\": null, \"width\": \"auto\"}, \"buffer_paths\": []}, \"comm_id\": \"3a5a70b83052428788fbe65055b030fd\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": null,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "e690306a-d085-48fa-9a00-f7c5a6368eb5"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "a1f09f21-5e8d-47e1-a58f-8c08ce69666d",
                "data": "{\"header\": {\"msg_id\": \"faebe0f5-893d6d15d8ebe263605f373c\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.011232Z\", \"version\": \"5.3\"}, \"msg_id\": \"faebe0f5-893d6d15d8ebe263605f373c\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_dom_classes\": [], \"_model_module\": \"ipysheet\", \"_model_module_version\": \"~0.4.3\", \"_model_name\": \"SheetModel\", \"_view_count\": null, \"_view_module\": \"ipysheet\", \"_view_module_version\": \"~0.4.3\", \"_view_name\": \"SheetView\", \"cells\": [], \"column_headers\": true, \"column_resizing\": true, \"column_width\": null, \"columns\": 5, \"layout\": \"IPY_MODEL_3a5a70b83052428788fbe65055b030fd\", \"named_cells\": {}, \"row_headers\": true, \"row_resizing\": true, \"rows\": 5, \"search_token\": \"\", \"stretch_headers\": \"all\"}, \"buffer_paths\": []}, \"comm_id\": \"4c24ea615616485084082848bd8e23b3\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "a1f09f21-5e8d-47e1-a58f-8c08ce69666d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "39731663-69bc-4e4b-8308-7f9a1cd62c96",
                "data": "{\"header\": {\"msg_id\": \"f279be27-463beea1cddd1dae38de9458\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.012230Z\", \"version\": \"5.3\"}, \"msg_id\": \"f279be27-463beea1cddd1dae38de9458\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"ipysheet\", \"_model_module_version\": \"~0.4.3\", \"_model_name\": \"CellRangeModel\", \"_view_count\": null, \"_view_module\": null, \"_view_module_version\": \"\", \"_view_name\": null, \"choice\": null, \"column_end\": 0, \"column_start\": 0, \"date_format\": \"YYYY/MM/DD\", \"name\": null, \"numeric_format\": \"0.000\", \"read_only\": false, \"renderer\": null, \"row_end\": 0, \"row_start\": 0, \"squeeze_column\": true, \"squeeze_row\": true, \"style\": {\"min-width\": \"150px\"}, \"time_format\": \"h:mm:ss a\", \"transpose\": false, \"type\": \"widget\", \"value\": \"IPY_MODEL_0552183554244cfb826427d5e6501a3b\"}, \"buffer_paths\": []}, \"comm_id\": \"7112d330bfbc4d73a77fc2f48ee12a0f\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "39731663-69bc-4e4b-8308-7f9a1cd62c96"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "871b1b39-c8a7-43cf-b683-c515990be504",
                "data": "{\"header\": {\"msg_id\": \"f85a9c46-2e7dde6eeac633ff2d01734b\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.013231Z\", \"version\": \"5.3\"}, \"msg_id\": \"f85a9c46-2e7dde6eeac633ff2d01734b\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"cells\": [\"IPY_MODEL_7112d330bfbc4d73a77fc2f48ee12a0f\"]}, \"buffer_paths\": []}, \"comm_id\": \"4c24ea615616485084082848bd8e23b3\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "871b1b39-c8a7-43cf-b683-c515990be504"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "05c249b1-161b-4c62-a582-a8fe0391369d",
                "data": "{\"header\": {\"msg_id\": \"e9126788-d7c248e4ef7aeb13017eed38\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.014230Z\", \"version\": \"5.3\"}, \"msg_id\": \"e9126788-d7c248e4ef7aeb13017eed38\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"ipysheet\", \"_model_module_version\": \"~0.4.3\", \"_model_name\": \"CellRangeModel\", \"_view_count\": null, \"_view_module\": null, \"_view_module_version\": \"\", \"_view_name\": null, \"choice\": null, \"column_end\": 2, \"column_start\": 2, \"date_format\": \"YYYY/MM/DD\", \"name\": null, \"numeric_format\": \"0.000\", \"read_only\": false, \"renderer\": null, \"row_end\": 2, \"row_start\": 2, \"squeeze_column\": true, \"squeeze_row\": true, \"style\": {}, \"time_format\": \"h:mm:ss a\", \"transpose\": false, \"type\": \"numeric\", \"value\": 50.0}, \"buffer_paths\": []}, \"comm_id\": \"c13a35ecdf3542bc861f5794dadd8cc4\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "05c249b1-161b-4c62-a582-a8fe0391369d"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "c5290580-28d8-4126-9b3b-f343af006ff4",
                "data": "{\"header\": {\"msg_id\": \"810912d7-18fbf2823a9e5d804d70cd36\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.014230Z\", \"version\": \"5.3\"}, \"msg_id\": \"810912d7-18fbf2823a9e5d804d70cd36\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"cells\": [\"IPY_MODEL_7112d330bfbc4d73a77fc2f48ee12a0f\", \"IPY_MODEL_c13a35ecdf3542bc861f5794dadd8cc4\"]}, \"buffer_paths\": []}, \"comm_id\": \"4c24ea615616485084082848bd8e23b3\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "c5290580-28d8-4126-9b3b-f343af006ff4"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "d469188a-6311-486f-99c8-75112d399437",
                "data": "{\"header\": {\"msg_id\": \"9a0c6ed4-8aeae8e902c6723df9d1a433\", \"msg_type\": \"execute_reply\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.024232Z\", \"version\": \"5.3\"}, \"msg_id\": \"9a0c6ed4-8aeae8e902c6723df9d1a433\", \"msg_type\": \"execute_reply\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"started\": \"2020-04-03T17:46:40.002230Z\", \"dependencies_met\": true, \"engine\": \"090f730d-660c-4feb-842b-6bb25445c553\", \"status\": \"ok\"}, \"content\": {\"status\": \"ok\", \"execution_count\": 4, \"user_expressions\": {}, \"payload\": []}, \"buffers\": [], \"channel\": \"shell\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d469188a-6311-486f-99c8-75112d399437"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "e1a795ba-9184-4c97-bc21-da23d1e356a8",
                "data": "{\"header\": {\"msg_id\": \"3462ee11-29c677a10b0b0b25ebc4eaa5\", \"msg_type\": \"comm_open\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.016234Z\", \"version\": \"5.3\"}, \"msg_id\": \"3462ee11-29c677a10b0b0b25ebc4eaa5\", \"msg_type\": \"comm_open\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {\"version\": \"2.0.0\"}, \"content\": {\"data\": {\"state\": {\"_model_module\": \"ipysheet\", \"_model_module_version\": \"~0.4.3\", \"_model_name\": \"CellRangeModel\", \"_view_count\": null, \"_view_module\": null, \"_view_module_version\": \"\", \"_view_name\": null, \"choice\": null, \"column_end\": 2, \"column_start\": 2, \"date_format\": \"YYYY/MM/DD\", \"name\": null, \"numeric_format\": \"0.000\", \"read_only\": false, \"renderer\": null, \"row_end\": 3, \"row_start\": 3, \"squeeze_column\": true, \"squeeze_row\": true, \"style\": {}, \"time_format\": \"h:mm:ss a\", \"transpose\": false, \"type\": \"numeric\", \"value\": 50.0}, \"buffer_paths\": []}, \"comm_id\": \"9ae3e38caabb44949fae1d4a32a4adcc\", \"target_name\": \"jupyter.widget\", \"target_module\": null}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "e1a795ba-9184-4c97-bc21-da23d1e356a8"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "b59e02cf-8f28-443a-9219-07a2faa3d0dd",
                "data": "{\"header\": {\"msg_id\": \"142d7476-6349b435bd4132c5d43c616f\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.017232Z\", \"version\": \"5.3\"}, \"msg_id\": \"142d7476-6349b435bd4132c5d43c616f\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"cells\": [\"IPY_MODEL_7112d330bfbc4d73a77fc2f48ee12a0f\", \"IPY_MODEL_c13a35ecdf3542bc861f5794dadd8cc4\", \"IPY_MODEL_9ae3e38caabb44949fae1d4a32a4adcc\"]}, \"buffer_paths\": []}, \"comm_id\": \"4c24ea615616485084082848bd8e23b3\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "b59e02cf-8f28-443a-9219-07a2faa3d0dd"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "f6d95a83-9737-4a4c-9bc9-f2e4042ad869",
                "data": "{\"header\": {\"msg_id\": \"76236c1d-586bb0d0884454e2fa8beddf\", \"msg_type\": \"display_data\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.020232Z\", \"version\": \"5.3\"}, \"msg_id\": \"76236c1d-586bb0d0884454e2fa8beddf\", \"msg_type\": \"display_data\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"text/plain\": \"Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi\\u2026\", \"application/vnd.jupyter.widget-view+json\": {\"version_major\": 2, \"version_minor\": 0, \"model_id\": \"4c24ea615616485084082848bd8e23b3\"}}, \"metadata\": {}, \"transient\": {}}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "f6d95a83-9737-4a4c-9bc9-f2e4042ad869"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "23f1a177-3084-4dad-9fca-34e158b3cfd3",
                "data": "{\"header\": {\"msg_id\": \"af30da18-7ba00337c5fa8808f0fd10bf\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:40.024232Z\", \"version\": \"5.3\"}, \"msg_id\": \"af30da18-7ba00337c5fa8808f0fd10bf\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:39.482000Z\", \"msg_id\": \"46693721-109f-4280-ac3b-3cf89af6245c\", \"msg_type\": \"execute_request\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "4c24ea615616485084082848bd8e23b3"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "23f1a177-3084-4dad-9fca-34e158b3cfd3"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "4c24ea615616485084082848bd8e23b3"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 1
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "dirty"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "finish_cell",
            "payload": {
                "data": {
                    "cell_type": "code",
                    "execution_count": 4,
                    "metadata": {},
                    "outputs": [
                        {
                            "output_type": "display_data",
                            "data": {
                                "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                "application/vnd.jupyter.widget-view+json": {
                                    "version_major": 2,
                                    "version_minor": 0,
                                    "model_id": "4c24ea615616485084082848bd8e23b3"
                                }
                            },
                            "metadata": {},
                            "transient": {}
                        }
                    ],
                    "source": [
                        "sheet = ipysheet.sheet()\n",
                        "\n",
                        "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                        "cell3 = ipysheet.cell(2, 2, 50.)\n",
                        "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                        "\n",
                        "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                        "def calculate(a, b):\n",
                        "    return a + b\n",
                        "\n",
                        "sheet"
                    ]
                },
                "id": "NotebookImport#13",
                "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                "line": 0,
                "state": 2
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "stop_progress"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "4c24ea615616485084082848bd8e23b3"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "4c24ea615616485084082848bd8e23b3"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 1
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_dirty",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "finish_cell",
                "payload": {
                    "data": {
                        "data": {
                            "cell_type": "code",
                            "execution_count": 4,
                            "metadata": {},
                            "outputs": [
                                {
                                    "output_type": "display_data",
                                    "data": {
                                        "text/plain": "Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, style={'min-width': '150px'}, type='wi…",
                                        "application/vnd.jupyter.widget-view+json": {
                                            "version_major": 2,
                                            "version_minor": 0,
                                            "model_id": "4c24ea615616485084082848bd8e23b3"
                                        }
                                    },
                                    "metadata": {},
                                    "transient": {}
                                }
                            ],
                            "source": [
                                "sheet = ipysheet.sheet()\n",
                                "\n",
                                "cell1 = ipysheet.cell(0, 0, slider, style={'min-width': '150px'})\n",
                                "cell3 = ipysheet.cell(2, 2, 50.)\n",
                                "cell_sum = ipysheet.cell(3, 2, 50.)\n",
                                "\n",
                                "@ipysheet.calculation(inputs=[(cell1, 'value'), cell3], output=cell_sum)\n",
                                "def calculate(a, b):\n",
                                "    return a + b\n",
                                "\n",
                                "sheet"
                            ]
                        },
                        "id": "NotebookImport#13",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#13"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_finish_cell",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_stop_progress",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"7b2174102d55431eb3cab5ed4900775a\",\"data\":{\"method\":\"update\",\"state\":{\"value\":5},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:46:47.151Z\",\"msg_id\":\"d8347089-ab41-4771-8c6b-fb05739b6fde\",\"msg_type\":\"comm_msg\",\"session\":\"a0dc48da-92d8-4c74-8a07-a310ee2674ef\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "46cebc32-3b5b-4c86-8662-3f1f8d994c09",
                "data": "{\"header\": {\"msg_id\": \"10a69a35-e0d701b8ff1c14890416cbb8\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:47.153936Z\", \"version\": \"5.3\"}, \"msg_id\": \"10a69a35-e0d701b8ff1c14890416cbb8\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:47.151000Z\", \"msg_id\": \"d8347089-ab41-4771-8c6b-fb05739b6fde\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "46cebc32-3b5b-4c86-8662-3f1f8d994c09"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "a7fe06d6-ed42-4c7e-8bf1-89a5981f942b",
                "data": "{\"header\": {\"msg_id\": \"2c82ff28-b4acacaaa48069811a0b4bb9\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:47.154935Z\", \"version\": \"5.3\"}, \"msg_id\": \"2c82ff28-b4acacaaa48069811a0b4bb9\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:47.151000Z\", \"msg_id\": \"d8347089-ab41-4771-8c6b-fb05739b6fde\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"value\": 5}, \"buffer_paths\": []}, \"comm_id\": \"0552183554244cfb826427d5e6501a3b\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "a7fe06d6-ed42-4c7e-8bf1-89a5981f942b"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "d7f8d543-f9b1-4208-989e-000b672e7ac1",
                "data": "{\"header\": {\"msg_id\": \"7178b849-0011c2c56bb4450fb0c3fd8c\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:47.154935Z\", \"version\": \"5.3\"}, \"msg_id\": \"7178b849-0011c2c56bb4450fb0c3fd8c\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:47.151000Z\", \"msg_id\": \"d8347089-ab41-4771-8c6b-fb05739b6fde\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"value\": 55.0}, \"buffer_paths\": []}, \"comm_id\": \"9ae3e38caabb44949fae1d4a32a4adcc\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "d7f8d543-f9b1-4208-989e-000b672e7ac1"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "ca19f9ba-6f3f-4661-9664-0e3919e25700",
                "data": "{\"header\": {\"msg_id\": \"048a80ae-2d5123026e024a07170dc3c8\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:47.155911Z\", \"version\": \"5.3\"}, \"msg_id\": \"048a80ae-2d5123026e024a07170dc3c8\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:47.151000Z\", \"msg_id\": \"d8347089-ab41-4771-8c6b-fb05739b6fde\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "ca19f9ba-6f3f-4661-9664-0e3919e25700"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Idle",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": "{\"buffers\":[],\"channel\":\"shell\",\"content\":{\"comm_id\":\"7b2174102d55431eb3cab5ed4900775a\",\"data\":{\"method\":\"update\",\"state\":{\"value\":50},\"buffer_paths\":[]}},\"header\":{\"date\":\"2020-04-03T17:46:49.172Z\",\"msg_id\":\"938fe944-0d70-4a98-a372-4782b3652ef2\",\"msg_type\":\"comm_msg\",\"session\":\"a0dc48da-92d8-4c74-8a07-a310ee2674ef\",\"username\":\"\",\"version\":\"5.2\"},\"metadata\":{},\"parent_header\":{}}"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "3d0b1797-a359-4998-a976-8dcf5e916ab0",
                "data": "{\"header\": {\"msg_id\": \"b582a30e-6b312185a0eed24471a0a666\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:49.182885Z\", \"version\": \"5.3\"}, \"msg_id\": \"b582a30e-6b312185a0eed24471a0a666\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:49.172000Z\", \"msg_id\": \"938fe944-0d70-4a98-a372-4782b3652ef2\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"busy\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Idle",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "3d0b1797-a359-4998-a976-8dcf5e916ab0"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "update_kernel",
            "payload": {
                "jupyterServerStatus": "Busy",
                "localizedUri": "local",
                "displayName": "Python 3"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "573c1ab7-98da-4b3f-a0d2-394d8d70590e",
                "data": "{\"header\": {\"msg_id\": \"b858642d-662ddb1ecd5ffdec56c870ed\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:49.184883Z\", \"version\": \"5.3\"}, \"msg_id\": \"b858642d-662ddb1ecd5ffdec56c870ed\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:49.172000Z\", \"msg_id\": \"938fe944-0d70-4a98-a372-4782b3652ef2\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"value\": 50}, \"buffer_paths\": []}, \"comm_id\": \"0552183554244cfb826427d5e6501a3b\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "573c1ab7-98da-4b3f-a0d2-394d8d70590e"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "8bed254f-969a-471a-b4b4-f40be69b493f",
                "data": "{\"header\": {\"msg_id\": \"5af7c05a-5a361c51d540245a3e4b657a\", \"msg_type\": \"comm_msg\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:49.184883Z\", \"version\": \"5.3\"}, \"msg_id\": \"5af7c05a-5a361c51d540245a3e4b657a\", \"msg_type\": \"comm_msg\", \"parent_header\": {\"date\": \"2020-04-03T17:46:49.172000Z\", \"msg_id\": \"938fe944-0d70-4a98-a372-4782b3652ef2\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"data\": {\"method\": \"update\", \"state\": {\"value\": 100.0}, \"buffer_paths\": []}, \"comm_id\": \"9ae3e38caabb44949fae1d4a32a4adcc\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "sync_message_used_to_broadcast_and_sync_editors",
            "payload": {
                "type": "update_kernel",
                "payload": {
                    "data": {
                        "jupyterServerStatus": "Busy",
                        "localizedUri": "local",
                        "displayName": "Python 3"
                    },
                    "messageType": 3,
                    "messageDirection": "incoming"
                }
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_kernel",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg_handled",
            "payload": {
                "id": "8bed254f-969a-471a-b4b4-f40be69b493f"
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_msg",
            "payload": {
                "id": "25e9d3fc-b9fb-49aa-9cce-a5ad4839a2e2",
                "data": "{\"header\": {\"msg_id\": \"08182149-b332430ab781e79bdcb92121\", \"msg_type\": \"status\", \"username\": \"username\", \"session\": \"e1b4f4a5-85df1f9ab8231da6cf29b9e0\", \"date\": \"2020-04-03T17:46:49.187883Z\", \"version\": \"5.3\"}, \"msg_id\": \"08182149-b332430ab781e79bdcb92121\", \"msg_type\": \"status\", \"parent_header\": {\"date\": \"2020-04-03T17:46:49.172000Z\", \"msg_id\": \"938fe944-0d70-4a98-a372-4782b3652ef2\", \"msg_type\": \"comm_msg\", \"session\": \"a0dc48da-92d8-4c74-8a07-a310ee2674ef\", \"username\": \"\", \"version\": \"5.2\"}, \"metadata\": {}, \"content\": {\"execution_state\": \"idle\"}, \"buffers\": [], \"channel\": \"iopub\"}"
            }
        },
        "type": "forUI"
    }
]